<root><category name="any"><method category="any" name="!=" variadic="false"><return type="Value₂|nil"/><parameters><parameter name="Value₁" type="any"/><parameter name="Value₂" type="any"/></parameters><description>Returns <mini>Value₂</mini> if <mini>Value₁</mini> and <mini>Value₂</mini> are not exactly the same instance and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="!=" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ != Argᵢ</mini> for i = 2,  ...,  n and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="#" variadic="false"><return type="integer"/><parameters><parameter name="Value" type="any"/></parameters><description>Returns a hash for <mini>Value</mini> for use in lookup tables,  etc.
</description><examples/></method><method category="any" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="any"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="any" name=":in" variadic="false"><return type="Value|nil"/><parameters><parameter name="Value" type="any"/><parameter name="Type" type="type"/></parameters><description>Returns <mini>Value</mini> if it is an instance of <mini>Type</mini> or a type that inherits from <mini>Type</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name=":max" variadic="false"><return type="any"/><parameters><parameter name="A" type="any"/><parameter name="B" type="any"/></parameters><description>Returns <mini>A</mini> if <mini>A &gt; B</mini> and <mini>B</mini> otherwise.
</description><examples/></method><method category="any" name=":min" variadic="false"><return type="any"/><parameters><parameter name="A" type="any"/><parameter name="B" type="any"/></parameters><description>Returns <mini>A</mini> if <mini>A &lt; B</mini> and <mini>B</mini> otherwise.
</description><examples/></method><method category="any" name="&lt;" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ &lt; Arg₂ &lt; ... &lt; Argₙ</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="&lt;=" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ &lt;= Arg₂ &lt;= ... &lt;= Argₙ</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Value₁" type="any"/><parameter name="Value₂" type="any"/></parameters><description>Compares <mini>Value₁</mini> and <mini>Value₂</mini> and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini>.
This comparison is based on the types and internal addresses of <mini>Value₁</mini> and <mini>Value₂</mini> and thus only has no persistent meaning.
</description><examples/></method><method category="any" name="=" variadic="false"><return type="Value₂|nil"/><parameters><parameter name="Value₁" type="any"/><parameter name="Value₂" type="any"/></parameters><description>Returns <mini>Value₂</mini> if <mini>Value₁</mini> and <mini>Value₂</mini> are exactly the same instance and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="=" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ = Arg₂ = ... = Argₙ</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="&gt;" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ &gt; Arg₂ &gt; ... &gt; Argₙ</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="any" name="&gt;=" variadic="true"><return type="any|nil"/><parameters><parameter name="Arg₁" type="any"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="any"/></parameters><description>Returns <mini>Argₙ</mini> if <mini>Arg₁ &gt;= Arg₂ &gt;= ... &gt;= Argₙ</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><type name="any"><parents/><description>Base type for all values.
</description><examples/></type></category><category name="sequence"><method category="sequence" name="&amp;" variadic="false"><return type="Sequence"/><parameters><parameter name="Sequence₁" type="sequence"/><parameter name="Sequence₂" type="sequence"/></parameters><description>Returns an sequence that produces the values from <mini>Sequence₁</mini> followed by those from <mini>Sequence₂</mini>.
</description><examples><code>list(1 .. 3 &amp; &quot;cake&quot;)</code><result>[1, 2, 3, &quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result></examples></method><method category="sequence" name="&amp;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer::interval"/><parameter name="Arg₂" type="integer::interval"/></parameters><description/><examples/></method><method category="sequence" name="&amp;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer::range"/><parameter name="Arg₂" type="integer::range"/></parameters><description/><examples/></method><method category="sequence" name="&amp;" variadic="false"><return type="Sequence"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns an sequence that repeatedly produces the values from <mini>Sequence</mini> (for use with <mini>limit</mini>).
</description><examples><code>list(&amp;(1 .. 3) limit 10)</code><result>[1, 2, 3, 1, 2, 3, 1, 2, 3, 1]</result></examples></method><method category="sequence" name="-&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(K₁,  F(V₁)),  ...,  (Kₙ,  F(Vₙ))</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini>.
</description><examples/></method><method category="sequence" name="-&gt;!" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(K₁,  F ! V₁),  ...,  (Kₙ,  F ! Vₙ)</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini>.
</description><examples><code>map({&quot;A&quot; is [1, 2], &quot;B&quot; is [3, 4], &quot;C&quot; is [5, 6]} -&gt;! +)</code><result>{&quot;A&quot; is 3, &quot;B&quot; is 7, &quot;C&quot; is 11}</result></examples></method><method category="sequence" name="-&gt;!?" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(Kⱼ,  Vⱼ),  ...</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini> and <mini>F ! Vⱼ</mini> returns non-<mini>nil</mini>.
</description><examples><code>map({&quot;A&quot; is [1, 2], &quot;B&quot; is [3, 3], &quot;C&quot; is [5, 6]} -&gt;!? !=)</code><result>{&quot;A&quot; is [1, 2], &quot;C&quot; is [5, 6]}</result></examples></method><method category="sequence" name="-&gt;&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Function" type="function"/></parameters><description>Returns a new sequence that generates the keys and values from <mini>Function(Value)</mini> for each value generated by <mini>Sequence</mini>.
</description><examples><code>list(1 .. 5 -&gt;&gt; (1 .. _))</code><result>[1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5]</result></examples></method><method category="sequence" name="-&gt;?" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(Kⱼ,  Vⱼ),  ...</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini> and <mini>F(Vⱼ)</mini> returns non-<mini>nil</mini>.
</description><examples><code>list(1 .. 10 -&gt;? (2 | _))</code><result>[2, 4, 6, 8, 10]</result></examples></method><method category="sequence" name="-&gt;|" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(Kⱼ,  Vⱼ),  ...</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini> while <mini>F(Vⱼ)</mini> returns non-<mini>nil</mini>.
</description><examples><code>list(1 .. 10 -&gt;? (5 !| _))</code><result>[1, 2, 3, 4, 6, 7, 8, 9]</result><code>list(1 .. 10 -&gt;| (5 !| _))</code><result>[1, 2, 3, 4]</result></examples></method><method category="sequence" name="//" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence that produces <mini>V₁</mini>,  <mini>Fn(V₁,  V₂)</mini>,  <mini>Fn(Fn(V₁,  V₂),  V₃)</mini>,  ... .

.. deprecated:: 2.9.0

   Use <mini>distill</mini> instead.
</description><examples><code>list(1 .. 10 // +)</code><result>[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]</result></examples></method><method category="sequence" name="//" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Initial" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence that produces <mini>Initial</mini>,  <mini>Fn(Initial,  V₁)</mini>,  <mini>Fn(Fn(Initial,  V₁),  V₂)</mini>,  ... .

.. deprecated:: 2.9.0

   Use <mini>distill</mini> instead.
</description><examples><code>list(1 .. 10 // (10, +))</code><result>[11, 13, 16, 20, 25, 31, 38, 46, 55, 65]</result></examples></method><method category="sequence" name=":after" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Value" type="any"/></parameters><description>Returns an sequence that skips initial values not equal to <mini>Value</mini> and skips <mini>Value</mini> itself once.
</description><examples><code>list(&quot;banana&quot;)</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result><code>list(&quot;banana&quot; after &quot;n&quot;)</code><result>[&quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result></examples></method><method category="sequence" name=":append" variadic="false"><return type="some|nil"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Sequence" type="sequence"/><parameter name="Separator" type="string"/></parameters><description>Appends the values generated by <mini>Sequence</mini> to <mini>Buffer</mini> separated by <mini>Separator</mini>.
</description><examples/></method><method category="sequence" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="real::range"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="sequence" name=":apply" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Calls <mini>Fn(Key,  Value)</mini> for each key and value produced by <mini>Sequence</mini>,  then returns <mini>Sequence</mini>.
</description><examples/></method><method category="sequence" name=":before" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="sequence"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="sequence" name=":chunk" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="sequence"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="sequence" name=":count" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="zipped"/></parameters><description/><examples/></method><method category="sequence" name=":count" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="zipped2"/></parameters><description/><examples/></method><method category="sequence" name=":count" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="grid"/></parameters><description/><examples/></method><method category="sequence" name=":count" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="paired"/></parameters><description/><examples/></method><method category="sequence" name=":find" variadic="false"><return type="any|nil"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Value" type="any"/></parameters><description>Returns the first key generated by <mini>Sequence</mini> with corresponding value <mini>= Value</mini>.
</description><examples><code>map(&quot;a&quot; .. &quot;z&quot;):find(&quot;j&quot;)</code><result>106</result></examples></method><method category="sequence" name=":find" variadic="false"><return type="any|nil"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Value" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns the first key generated by <mini>Sequence</mini> with corresponding value satisfying <mini>Fn(_,  Value)</mini>.
</description><examples><code>map(&quot;a&quot; .. &quot;z&quot;):find(&quot;j&quot;, &lt;)</code><result>107</result></examples></method><method category="sequence" name=":first" variadic="false"><return type="any|nil"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the first value produced by <mini>Sequence</mini>.
</description><examples><code>first(&quot;cake&quot;)</code><result>&quot;c&quot;</result><code>first([])</code><result>nil</result></examples></method><method category="sequence" name=":first2" variadic="false"><return type="tuple(any,  any)|nil"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the first key and value produced by <mini>Sequence</mini>.
</description><examples><code>first2(&quot;cake&quot;)</code><result>(1, c)</result><code>first2([])</code><result>nil</result></examples></method><method category="sequence" name=":from" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Value" type="any"/></parameters><description>Returns an sequence that skips initial values not equal to <mini>Value</mini>.
</description><examples><code>list(&quot;banana&quot;)</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result><code>list(&quot;banana&quot; from &quot;n&quot;)</code><result>[&quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result></examples></method><method category="sequence" name=":generate" variadic="false"><return type="function"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Function" type="function"/></parameters><description>Returns a new function that returns <mini>Function(Key,  Value)</mini> where <mini>Key</mini> and <mini>Value</mini> are the next key-value pair generated by <mini>Sequence</mini>. Once <mini>Sequence</mini> is exhausted,  the function returns <mini>nil</mini>.
</description><examples><code>let f := &quot;cat&quot; generate tuple</code><result>&lt;generator&gt;</result><code>f()</code><result>(1, c)</result><code>f()</code><result>(2, a)</result><code>f()</code><result>(3, t)</result><code>f()</code><result>nil</result><code>f()</code><result>nil</result></examples></method><method category="sequence" name=":group" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="sequence"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="sequence" name=":join" variadic="false"><return type="string"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Separator" type="string"/></parameters><description>Joins the elements of <mini>Sequence</mini> into a string using <mini>Separator</mini> between elements.
</description><examples><code>(1 .. 10):join</code><result>&quot;12345678910&quot;</result></examples></method><method category="sequence" name=":join" variadic="false"><return type="string"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Joins the elements of <mini>Sequence</mini> into a string.
</description><examples><code>1 .. 10 join &quot;,&quot;</code><result>&quot;1,2,3,4,5,6,7,8,9,10&quot;</result></examples></method><method category="sequence" name=":key" variadic="false"><return type="any"/><parameters><parameter name="Iterator" type="iterator"/></parameters><description>Returns the current key produced by <mini>Iterator</mini>.
</description><examples/></method><method category="sequence" name=":last" variadic="false"><return type="any|nil"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the last value produced by <mini>Sequence</mini>.
</description><examples><code>last(&quot;cake&quot;)</code><result>&quot;e&quot;</result><code>last([])</code><result>nil</result></examples></method><method category="sequence" name=":last2" variadic="false"><return type="tuple(any,  any)|nil"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the last key and value produced by <mini>Sequence</mini>.
</description><examples><code>last2(&quot;cake&quot;)</code><result>(4, e)</result><code>last2([])</code><result>nil</result></examples></method><method category="sequence" name=":limit" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Limit" type="integer"/></parameters><description>Returns an sequence that produces at most <mini>Limit</mini> values from <mini>Sequence</mini>.
</description><examples><code>list(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result><code>list(1 .. 10 limit 5)</code><result>[1, 2, 3, 4, 5]</result></examples></method><method category="sequence" name=":next" variadic="false"><return type="iterator|nil"/><parameters><parameter name="Iterator" type="iterator"/></parameters><description>Advances <mini>Iterator</mini>,  returning <mini>nil</mini> if it is finished.
</description><examples/></method><method category="sequence" name=":precount" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="zipped"/></parameters><description/><examples/></method><method category="sequence" name=":precount" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="zipped2"/></parameters><description/><examples/></method><method category="sequence" name=":precount" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="grid"/></parameters><description/><examples/></method><method category="sequence" name=":precount" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="paired"/></parameters><description/><examples/></method><method category="sequence" name=":precount" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="unpacked"/></parameters><description/><examples/></method><method category="sequence" name=":provided" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns an sequence that stops when <mini>Fn(Value)</mini> is <mini>nil</mini>.
</description><examples><code>list(&quot;banana&quot;)</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result><code>list(&quot;banana&quot; provided (_ != &quot;n&quot;))</code><result>[&quot;b&quot;, &quot;a&quot;]</result></examples></method><method category="sequence" name=":random" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="type"/></parameters><description/><examples/></method><method category="sequence" name=":random" variadic="true"><return type="any|nil"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a random value produced by <mini>Sequence</mini>.
</description><examples><code>random(&quot;cake&quot;)</code><result>&quot;k&quot;</result><code>random([])</code><result>nil</result></examples></method><method category="sequence" name=":repeat" variadic="false"><return type="sequence"/><parameters><parameter name="Function" type="function"/></parameters><description>Returns a sequence that generates the result of calling <mini>Function()</mini> at each iteration until <mini>nil</mini> is returned.

.. deprecated:: 2.9.0

   Use <mini>^</mini> instead.
</description><examples><code>let L := [1, 2, 3, 4]
list(L:pull(_):repeat)</code><result>[4, 3, 2, 1]</result></examples></method><method category="sequence" name=":skip" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Skip" type="integer"/></parameters><description>Returns an sequence that skips the first <mini>Skip</mini> values from <mini>Sequence</mini> and then produces the rest.
</description><examples><code>list(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result><code>list(1 .. 10 skip 5)</code><result>[6, 7, 8, 9, 10]</result></examples></method><method category="sequence" name=":skipuntil" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns an sequence that skips initial values for which which <mini>Fn(Value)</mini> is <mini>nil</mini>.
</description><examples><code>list(&quot;banana&quot;)</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result><code>list(&quot;banana&quot; skipuntil (_ != &quot;b&quot;))</code><result>[&quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result></examples></method><method category="sequence" name=":split" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="sequence"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="sequence" name=":value" variadic="false"><return type="any"/><parameters><parameter name="Iterator" type="iterator"/></parameters><description>Returns the current value produced by <mini>Iterator</mini>.
</description><examples/></method><method category="sequence" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="chained"/><parameter name="Arg₂" type="chained"/></parameters><description/><examples/></method><method category="sequence" name="=&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F₁" type="function"/><parameter name="F₂" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(F₁(K₁,  V₁),  F₂(K₁,  V₁)),  ...,  (F₁(Kₙ,  Vₙ),  F₂(Kₙ,  Vₙ))</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini>.
</description><examples><code>map(&quot;cake&quot; =&gt; (tuple, *))</code><result>{(1, c) is &quot;c&quot;, (2, a) is &quot;aa&quot;, (3, k) is &quot;kkk&quot;, (4, e) is &quot;eeee&quot;}</result></examples></method><method category="sequence" name="=&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(K₁,  F(K₁,  V₁)),  ...,  (Kₙ,  F(Kₙ,  Vₙ))</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini>.
</description><examples><code>map(&quot;cake&quot; =&gt; *)</code><result>{1 is &quot;c&quot;, 2 is &quot;aa&quot;, 3 is &quot;kkk&quot;, 4 is &quot;eeee&quot;}</result></examples></method><method category="sequence" name="=&gt;&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Function" type="function"/></parameters><description>Returns a new sequence that generates the keys and values from <mini>Function(Key,  Value)</mini> for each key and value generated by <mini>Sequence</mini>.
</description><examples><code>list(&quot;cake&quot; =&gt;&gt; *)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;a&quot;, &quot;k&quot;, &quot;k&quot;, &quot;k&quot;, &quot;e&quot;, &quot;e&quot;, &quot;e&quot;, &quot;e&quot;]</result></examples></method><method category="sequence" name="=&gt;?" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(Kⱼ,  Vⱼ),  ...</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini> and <mini>F(Kⱼ,  Vⱼ)</mini> returns non-<mini>nil</mini>.
</description><examples><code>let M := map(1 .. 10 -&gt; fun(X) X ^ 2 % 10)</code><result>{1 is 1, 2 is 4, 3 is 9, 4 is 6, 5 is 5, 6 is 6, 7 is 9, 8 is 4, 9 is 1, 10 is 0}</result><code>map(M =&gt;? !=)</code><result>{2 is 4, 3 is 9, 4 is 6, 7 is 9, 8 is 4, 9 is 1, 10 is 0}</result></examples></method><method category="sequence" name="=&gt;|" variadic="false"><return type="sequence"/><parameters><parameter name="Base" type="sequence"/><parameter name="F" type="function"/></parameters><description>Returns a chained sequence equivalent to <mini>(Kⱼ,  Vⱼ),  ...</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Base</mini> while <mini>F(Kⱼ,  Vⱼ)</mini> returns non-<mini>nil</mini>.
</description><examples><code>let M := map(1 .. 10 -&gt; fun(X) X ^ 2 % 10)</code><result>{1 is 1, 2 is 4, 3 is 9, 4 is 6, 5 is 5, 6 is 6, 7 is 9, 8 is 4, 9 is 1, 10 is 0}</result><code>map(M =&gt;? fun(K, V) K + V &lt; 15)</code><result>{1 is 1, 2 is 4, 3 is 9, 4 is 6, 5 is 5, 6 is 6, 8 is 4, 9 is 1, 10 is 0}</result><code>map(M =&gt;| fun(K, V) K + V &lt; 15)</code><result>{1 is 1, 2 is 4, 3 is 9, 4 is 6, 5 is 5, 6 is 6}</result></examples></method><method category="sequence" name="@" variadic="false"><return type="sequence"/><parameters><parameter name="Initial" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence that produces <mini>Initial</mini>,  <mini>Fn(Initial)</mini>,  <mini>Fn(Fn(Initial))</mini>,  ... stopping when <mini>Fn(Last)</mini> returns <mini>nil</mini>.
</description><examples><code>list(1 @ (_ + 1) limit 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result></examples></method><method category="sequence" name="@" variadic="false"><return type="sequence"/><parameters><parameter name="Value" type="any"/></parameters><description>Returns an infinite sequence that repeatedly produces <mini>Value</mini>. Should be used with <mini>:limit</mini> or paired with a finite sequence in <mini>zip</mini>,  <mini>weave</mini>,  etc.
</description><examples><code>list(@1 limit 10)</code><result>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</result></examples></method><type name="chained"><parents><parent type="function"/><parent type="sequence"/></parents><description>A chained function or sequence,  consisting of a base function or sequence and any number of additional functions or filters.

When used as a function or sequence,  the base is used to produce an initial result,  then the additional functions are applied in turn to the result.

Filters do not affect the result but will shortcut a function call or skip an iteration if <mini>nil</mini> is returned. I.e. filters remove values from a sequence that fail a condition without affecting the values that pass.
</description><examples/></type><type name="chunk"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="grouped"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="sequence"><parents/><description>The base type for any sequence value.
</description><examples/></type><type name="split"><parents><parent type="sequence"/></parents><description/><examples/></type><method category="sequence" name="[]" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="chained"/></parameters><description/><examples/></method><method category="sequence" name="^" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Function" type="function"/></parameters><description>Returns a new sequence that generates the keys and values from <mini>Function(Value)</mini> for each value generated by <mini>Sequence</mini>.

.. deprecated:: 2.5.0

   Use <mini>-&gt;&gt;</mini> instead.
</description><examples><code>list(1 .. 5 ^ (1 .. _))</code><result>[1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5]</result></examples></method><method category="sequence" name="^" variadic="false"><return type="sequence"/><parameters><parameter name="Function" type="function"/></parameters><description>Returns a sequence that generates the result of calling <mini>Function()</mini> at each iteration until <mini>nil</mini> is returned.
</description><examples><code>let L := [1, 2, 3, 4]
list(^fun L:pull)</code><result>[4, 3, 2, 1]</result></examples></method><function name="all"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns <mini>nil</mini> if <mini>nil</mini> is produced by <mini>Sequence</mini>. Otherwise returns <mini>some</mini>. If <mini>Sequence</mini> is empty,  then <mini>some</mini> is returned.
</description><examples><code>all([1, 2, 3, 4])</code><result>some</result><code>all([1, 2, nil, 4])</code><result>nil</result><code>all([])</code><result>some</result></examples></function><function name="batch"><return/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Size" type="integer"/><parameter name="Shift?" type="integer"/><parameter name="Function" type="function"/></parameters><description>Returns a new sequence that calls <mini>Function</mini> with each batch of <mini>Size</mini> values produced by <mini>Sequence</mini> and produces the results. If a <mini>Shift</mini> is provided then <mini>Size - Shift</mini> values of each batch come from the previous batch.
</description><examples><code>list(batch(1 .. 20, 4, tuple))</code><result>[(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16), (17, 18, 19, 20)]</result><code>list(batch(1 .. 20, 4, 2, tuple))</code><result>[(1, 2, 3, 4), (3, 4, 5, 6), (5, 6, 7, 8), (7, 8, 9, 10), (9, 10, 11, 12), (11, 12, 13, 14), (13, 14, 15, 16), (15, 16, 17, 18), (17, 18, 19, 20)]</result></examples></function><constructor name="chained"><return/><parameters><parameter name="Base" type="any"/><parameter name="Fn₁, ..., Fnₙ" type="function"/></parameters><description>Returns a new chained function or sequence with base <mini>Base</mini> and additional functions or filters <mini>Fn₁,  ...,  Fnₙ</mini>.
</description><examples><code>let F := chained(fun(X) X + 1, fun(X) X ^ 2)
F(10)</code><result>121</result></examples></constructor><function name="count"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the count of the values produced by <mini>Sequence</mini>. For some types of sequences (e.g. <mini>list</mini>,  <mini>map</mini>,  etc),  the count is simply retrieved. For all other types,  the sequence is iterated and the total number of values counted.
</description><examples><code>count([1, 2, 3, 4])</code><result>4</result><code>count(1 .. 10 -&gt;? (2 | _))</code><result>5</result></examples></function><function name="count2"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a map of the values produced by <mini>Sequence</mini> with associated counts.
</description><examples><code>count2(&quot;banana&quot;)</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 3, &quot;n&quot; is 2}</result></examples></function><function name="distill"><return/><parameters><parameter name="Initial?" type="any"/><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence that produces <mini>Fn(Initial,  V₁)</mini>,  <mini>Fn(Fn(Initial,  V₁),  V₂)</mini>,  ... if <mini>Initial</mini> is provided,  otherwise returns a sequence that produces <mini>V₁</mini>,  <mini>Fn(V₁,  V₂)</mini>,  <mini>Fn(Fn(V₁,  V₂),  V₃)</mini>,  ... .

The resulting sequence always has the same number of values as <mini>Sequence</mini>.
</description><examples><code>list(distill(1 .. 10, +))</code><result>[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]</result><code>list(distill(20, 1 .. 10, +))</code><result>[21, 23, 26, 30, 35, 41, 48, 56, 65, 75]</result></examples></function><function name="dup"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence which produces the values of <mini>Sequence</mini> as both keys and values.
</description><examples><code>map(dup({&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}))</code><result>{1 is 1, 2 is 2, 3 is 3}</result></examples></function><function name="fold"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence that treats alternating values produced by <mini>Sequence</mini> as keys and values respectively.
</description><examples><code>map(fold(1 .. 10))</code><result>{1 is 2, 3 is 4, 5 is 6, 7 is 8, 9 is 10}</result></examples></function><function name="grid"><return/><parameters><parameter name="Sequence₁, ..., Sequenceₙ" type="sequence"/><parameter name="Function" type="any"/></parameters><description>Returns a new sequence that produces <mini>Function(V₁,  V₂,  ...,  Vₙ)</mini> for all possible combinations of <mini>V₁,  ...,  Vₙ</mini>,  where <mini>Vᵢ</mini> are the values produced by <mini>Sequenceᵢ</mini>.
</description><examples><code>list(grid(1 .. 3, &quot;cake&quot;, [true, false], tuple))</code><result>[(1, c, true), (1, c, false), (1, a, true), (1, a, false), (1, k, true), (1, k, false), (1, e, true), (1, e, false), (2, c, true), (2, c, false), (2, a, true), (2, a, false), (2, k, true), (2, k, false), (2, e, true), (2, e, false), (3, c, true), (3, c, false), (3, a, true), (3, a, false), (3, k, true), (3, k, false), (3, e, true), (3, e, false)]</result><code>list(grid(1 .. 3, &quot;cake&quot;, *))</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;, &quot;cc&quot;, &quot;aa&quot;, &quot;kk&quot;, &quot;ee&quot;, &quot;ccc&quot;, &quot;aaa&quot;, &quot;kkk&quot;, &quot;eee&quot;]</result></examples></function><function name="iterate"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Create an iterator for <mini>Sequence</mini>. Returns <mini>nil</mini> is <mini>Sequence</mini> is empty.
</description><examples/></function><type name="iterator"><parents/><description>An iterator.
</description><examples/></type><function name="key"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence which produces the keys of <mini>Sequence</mini>.
</description><examples><code>list(key({&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}))</code><result>[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</result></examples></function><function name="max"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the largest value (using <mini>:max</mini>) produced by <mini>Sequence</mini>.
</description><examples><code>max([1, 5, 2, 10, 6])</code><result>10</result></examples></function><function name="max2"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a tuple with the key and value of the largest value (using <mini>&gt;</mini>) produced by <mini>Sequence</mini>.  Returns <mini>nil</mini> if <mini>Sequence</mini> is empty.
</description><examples><code>max2([1, 5, 2, 10, 6])</code><result>(4, 10)</result></examples></function><function name="min"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the smallest value (using <mini>:min</mini>) produced by <mini>Sequence</mini>.
</description><examples><code>min([1, 5, 2, 10, 6])</code><result>1</result></examples></function><function name="min2"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a tuple with the key and value of the smallest value (using <mini>&lt;</mini>) produced by <mini>Sequence</mini>.  Returns <mini>nil</mini> if <mini>Sequence</mini> is empty.
</description><examples><code>min2([1, 5, 2, 10, 6])</code><result>(1, 1)</result></examples></function><function name="pair"><return/><parameters><parameter name="Sequence₁" type="sequence"/><parameter name="Sequence₂" type="sequence"/></parameters><description>Returns a new sequence that produces the values from <mini>Sequence₁</mini> as keys and the values from <mini>Sequence₂</mini> as values.
</description><examples/></function><function name="prod"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the product of the values (using <mini>*</mini>) produced by <mini>Sequence</mini>.
</description><examples><code>prod([1, 5, 2, 10, 6])</code><result>600</result></examples></function><function name="range"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the smallest and largest values (using <mini>:min</mini> and <mini>:max</mini>) produced by <mini>Sequence</mini>.
</description><examples><code>range([1, 5, 2, 10, 6])</code><result>(1, 10)</result></examples></function><function name="reduce"><return/><parameters><parameter name="Initial?" type="any"/><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns <mini>Fn(Fn( ... Fn(Initial,  V₁),  V₂) ...,  Vₙ)</mini> where <mini>Vᵢ</mini> are the values produced by <mini>Sequence</mini>.
If <mini>Initial</mini> is omitted,  the first value produced by <mini>Sequence</mini> is used.
</description><examples><code>reduce(1 .. 10, +)</code><result>55</result><code>reduce([], 1 .. 10, :put)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result></examples></function><function name="reduce2"><return/><parameters><parameter name="Initial?" type="any"/><parameter name="Sequence" type="sequence"/><parameter name="Fn" type="function"/></parameters><description>Returns <mini>Fn(Fn( ... Fn(Initial,  K₁,  V₁),  K₂,  V₂) ...,  Kₙ,  Vₙ)</mini> where <mini>Kᵢ</mini> and <mini>Vᵢ</mini> are the keys and values produced by <mini>Sequence</mini>.
If <mini>Initial</mini> is omitted,  a tuple with the first key and value produced by <mini>Sequence</mini> is used.
</description><examples><code>reduce2([], &quot;cake&quot;, fun(L, K, V) L:put((K, V)))</code><result>[(1, c), (2, a), (3, k), (4, e)]</result></examples></function><function name="some"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the first value produced by <mini>Sequence</mini> that is not <mini>nil</mini>.
</description><examples><code>some([nil, nil, &quot;X&quot;, nil])</code><result>&quot;X&quot;</result><code>some([nil, nil, nil, nil])</code><result>nil</result></examples></function><function name="sum"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns the sum of the values (using <mini>+</mini>) produced by <mini>Sequence</mini>.
</description><examples><code>sum([1, 5, 2, 10, 6])</code><result>24</result></examples></function><function name="swap"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence which swaps the keys and values produced by <mini>Sequence</mini>.
</description><examples><code>map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result></examples></function><function name="unfold"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence that treats produces alternatively the keys and values produced by <mini>Sequence</mini>.
</description><examples><code>list(unfold(&quot;cake&quot;))</code><result>[1, &quot;c&quot;, 2, &quot;a&quot;, 3, &quot;k&quot;, 4, &quot;e&quot;]</result></examples></function><function name="unique"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns an sequence that returns the unique values produced by <mini>Sequence</mini>. Uniqueness is determined by using a <mini>map</mini>.
</description><examples><code>list(unique(&quot;banana&quot;))</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;]</result></examples></function><function name="unique1"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns an sequence that returns the unique keys produced by <mini>Sequence</mini>. Uniqueness is determined by using a <mini>map</mini>.
</description><examples><code>list(unique1(&quot;banana&quot;))</code><result>[&quot;b&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;]</result></examples></function><function name="unpack"><return/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a new sequence unpacks each value generated by <mini>Sequence</mini> as keys and values respectively.
</description><examples><code>let L := [(&quot;A&quot;, &quot;a&quot;), (&quot;B&quot;, &quot;b&quot;), (&quot;C&quot;, &quot;c&quot;)]
map(unpack(L))</code><result>{&quot;A&quot; is &quot;a&quot;, &quot;B&quot; is &quot;b&quot;, &quot;C&quot; is &quot;c&quot;}</result></examples></function><function name="weave"><return/><parameters><parameter name="Sequence₁, ..., Sequenceₙ" type="sequence"/></parameters><description>Returns a new sequence that produces interleaved values <mini>Vᵢ</mini> from each of <mini>Sequenceᵢ</mini>.
The sequence stops produces values when any of the <mini>Sequenceᵢ</mini> stops.
</description><examples><code>list(weave(1 .. 3, &quot;cake&quot;))</code><result>[1, &quot;c&quot;, 2, &quot;a&quot;, 3, &quot;k&quot;]</result></examples></function><function name="zip"><return/><parameters><parameter name="Sequence₁, ..., Sequenceₙ" type="sequence"/><parameter name="Function" type="any"/></parameters><description>Returns a new sequence that produces <mini>Function(V₁₁,  ...,  Vₙ₁),  Function(V₁₂,  ...,  Vₙ₂),  ...</mini> where <mini>Vᵢⱼ</mini> is the <mini>j</mini>-th value produced by <mini>Sequenceᵢ</mini>.
The sequence stops produces values when any of the <mini>Sequenceᵢ</mini> stops.
</description><examples><code>list(zip(1 .. 3, &quot;cake&quot;, tuple))</code><result>[(1, c), (2, a), (3, k)]</result></examples></function><function name="zip2"><return/><parameters><parameter name="Sequence₁, ..., Sequenceₙ" type="sequence"/><parameter name="KeyFn" type="any"/><parameter name="ValueFn" type="any"/></parameters><description>Returns a new sequence that produces <mini>KeyFn(K₁₁,  ...,  Kₙ₁) - ValueFn(V₁₁,  ...,  Vₙ₁),  ...</mini> where <mini>Kᵢⱼ - Vᵢⱼ</mini> are the <mini>j</mini>-th key and value produced by <mini>Sequenceᵢ</mini>.
The sequence stops produces values when any of the <mini>Sequenceᵢ</mini> stops.
</description><examples><code>map(zip2(1 .. 3, &quot;cake&quot;, tuple, tuple))</code><result>{(1, 1) is (1, c), (2, 2) is (2, a), (3, 3) is (3, k)}</result></examples></function></category><category name="type"><method category="type" name="*" variadic="false"><return type="type"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns the closest common parent type of <mini>Type₁</mini> and <mini>Type₂</mini>.
</description><examples/></method><method category="type" name="::" variadic="false"><return type="any|error"/><parameters><parameter name="Type" type="type"/><parameter name="Name" type="string"/></parameters><description>Returns the value of <mini>Name</mini> exported from <mini>Type</mini>.
Returns an error if <mini>Name</mini> is not present.
This allows types to behave as modules.
</description><examples/></method><method category="type" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="type"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="type" name=":constructor" variadic="false"><return type="function"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns the constructor for <mini>Type</mini>.
</description><examples/></method><method category="type" name=":exports" variadic="false"><return type="map"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns a map of all the exports from <mini>Type</mini>.
</description><examples/></method><method category="type" name=":get" variadic="false"><return type="any|nil"/><parameters><parameter name="Ref" type="weak::ref"/></parameters><description/><examples/></method><method category="type" name=":name" variadic="false"><return type="string"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns the name of <mini>Type</mini>.
</description><examples/></method><method category="type" name=":parents" variadic="false"><return type="list"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns a list of the parent types of <mini>Type</mini>.
</description><examples/></method><method category="type" name=":rank" variadic="false"><return type="integer"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns the rank of <mini>Type</mini>,  i.e. the depth of its inheritence tree.
</description><examples/></method><method category="type" name="&lt;" variadic="false"><return type="type or nil"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns <mini>Type₂</mini> if <mini>Type₂</mini> is a strict parent of <mini>Type₁</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="type" name="&lt;=" variadic="false"><return type="type or nil"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns <mini>Type₂</mini> if <mini>Type₂</mini> is a parent of <mini>Type₁</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="type" name="&gt;" variadic="false"><return type="type or nil"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns <mini>Type₂</mini> if <mini>Type₂</mini> is a strict sub-type of <mini>Type₁</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="type" name="&gt;=" variadic="false"><return type="type or nil"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns <mini>Type₂</mini> if <mini>Type₂</mini> is a sub-type of <mini>Type₁</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="type" name="?" variadic="false"><return type="type"/><parameters><parameter name="Type" type="type::union"/></parameters><description>Returns a union interface of <mini>Type₁</mini> and <mini>Type₂</mini>.
</description><examples/></method><method category="type" name="?" variadic="false"><return type="type"/><parameters><parameter name="Type" type="type"/></parameters><description>Returns a union interface of <mini>Type</mini> and <mini>type(nil)</mini>.
</description><examples/></method><type name="type"><parents><parent type="function"/></parents><description>Type of all types.
Every type contains a set of named exports,  which allows them to be used as modules.
</description><examples/></type><method category="type" name="[]" variadic="true"><return type="type"/><parameters><parameter name="Base" type="type"/><parameter name="Type₁, ..., Typeₙ" type="type"/></parameters><description>Returns the generic type <mini>Base[Type₁,  ...,  Typeₙ]</mini>.
</description><examples/></method><constructor name="type"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns the type of <mini>Value</mini>.
</description><examples/></constructor><type name="weakref"><parents/><description/><examples/></type><constructor name="weakref"><return/><parameters><parameter name="Value" type="any"/></parameters><description/><examples/></constructor><method category="type" name="|" variadic="false"><return type="type"/><parameters><parameter name="Type₁" type="type::union"/><parameter name="Type₂" type="type"/></parameters><description>Returns a union interface of <mini>Type₁</mini> and <mini>Type₂</mini>.
</description><examples/></method><method category="type" name="|" variadic="false"><return type="type"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type"/></parameters><description>Returns a union interface of <mini>Type₁</mini> and <mini>Type₂</mini>.
</description><examples/></method><method category="type" name="|" variadic="false"><return type="type"/><parameters><parameter name="Type₁" type="type"/><parameter name="Type₂" type="type::union"/></parameters><description>Returns a union interface of <mini>Type₁</mini> and <mini>Type₂</mini>.
</description><examples/></method></category><category name="general"><method category="general" name=":WeakMapT" variadic="false"><return type=""/><parameters/><description/><examples/></method><method category="general" name=":alt" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":alt" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="weakmaptoken"/></parameters><description/><examples/></method><method category="general" name=":button" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":buttons" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":canvasX" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":canvasY" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":clientX" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":clientY" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":code" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":const" variadic="false"><return type="any"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Value" type="any"/></parameters><description>Default visitor implementation,  just returns <mini>Value</mini>.
</description><examples/></method><method category="general" name=":copy" variadic="false"><return type="any"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Value" type="any"/></parameters><description>Default visitor implementation,  just returns <mini>Value</mini>.
</description><examples/></method><method category="general" name=":ctrl" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":ctrl" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":insert" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="weakmap"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="general" name=":key" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":locale" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":location" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":meta" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":meta" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":movementX" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":movementY" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":repeat" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":screenX" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":screenY" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":shift" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":shift" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":targetX" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":targetY" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":timestamp" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mouseevent"/></parameters><description/><examples/></method><method category="general" name=":timestamp" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="keyboardevent"/></parameters><description/><examples/></method><method category="general" name=":visit" variadic="false"><return type="any"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Value" type="any"/></parameters><description>Default visitor implementation,  just returns <mini>nil</mini>.
</description><examples/></method><type name="event"><parents/><description/><examples/></type><type name="focusevent"><parents><parent type="event"/></parents><description/><examples/></type><type name="keyboardevent"><parents><parent type="event"/></parents><description/><examples/></type><type name="visitor"><parents><parent type="function"/></parents><description>Used to apply a transformation recursively to values.

<mini>fun (V: visitor)(Value: any,  Result: any): any</mini>
   Adds the pair <mini>(Value,  Result)</mini> to <mini>V</mini>&apos;s cache and returns <mini>Result</mini>.

<mini>fun (V: visitor)(Value: any): any</mini>
   Visits <mini>Value</mini> with <mini>V</mini> returning the result.
</description><examples/></type><type name="mouseevent"><parents><parent type="event"/></parents><description/><examples/></type><type name="uievent"><parents><parent type="event"/></parents><description/><examples/></type><type name="weakmap"><parents/><description/><examples/></type><type name="weakmaptoken"><parents/><description/><examples/></type><type name="wheelevent"><parents><parent type="event"/></parents><description/><examples/></type><function name="assign"><return/><parameters><parameter name="Var" type="any"/><parameter name="Value" type="any"/></parameters><description>Functional equivalent of <mini>Var := Value</mini>.
</description><examples/></function><function name="call"><return/><parameters><parameter name="Fn" type="any"/><parameter name="Arg₁..." type="any"/><parameter name="Argₙ" type="any"/></parameters><description>Returns <mini>Fn(Arg₁,  ...,  Argₙ)</mini>.
</description><examples/></function><function name="cas"><return/><parameters><parameter name="Var" type="any"/><parameter name="Old" type="any"/><parameter name="New" type="any"/></parameters><description>If the value of <mini>Var</mini> is *identically* equal to <mini>Old</mini>,  then sets <mini>Var</mini> to <mini>New</mini> and returns <mini>New</mini>. Otherwise leaves <mini>Var</mini> unchanged and returns <mini>nil</mini>.
</description><examples><code>var X := 10
cas(X, 10, 11)</code><result>11</result><code>X</code><result>11</result><code>cas(X, 20, 21)</code><result>nil</result><code>X</code><result>11</result></examples></function><function name="copy"><return/><parameters><parameter name="Value" type="any"/><parameter name="Fn?" type="function"/></parameters><description>Returns a copy of <mini>Value</mini> using a new <mini>copy</mini> instance which applies <mini>Fn(Copy,  Value)</mini> to each value. If omitted,  <mini>Fn</mini> defaults to <mini>:copy</mini>.
</description><examples/></function><function name="deref"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns the dereferenced value of <mini>Value</mini>.
</description><examples/></function><function name="exchange"><return/><parameters><parameter name="Var₁..." type="any"/><parameter name="Varₙ" type="any"/></parameters><description>Assigns <mini>Varᵢ := Varᵢ₊₁</mini> for each <mini>1 &lt;= i &lt; n</mini> and <mini>Varₙ := Var₁</mini>.
</description><examples/></function><function name="findall"><return/><parameters><parameter name="Value" type="any"/><parameter name="Filter?" type="boolean|type"/></parameters><description>Returns a list of all unique values referenced by <mini>Value</mini> (including <mini>Value</mini>).
</description><examples/></function><function name="isconstant"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns <mini>some</mini> if it is a constant (i.e. directly immutable and not referencing any mutable values),  otherwise returns <mini>nil</mini>.
</description><examples><code>isconstant(1)</code><result>1</result><code>isconstant(1.5)</code><result>1.5</result><code>isconstant(&quot;Hello&quot;)</code><result>&quot;Hello&quot;</result><code>isconstant(true)</code><result>true</result><code>isconstant([1, 2, 3])</code><result>nil</result><code>isconstant((1, 2, 3))</code><result>(1, 2, 3)</result><code>isconstant((1, [2], 3))</code><result>nil</result></examples></function><function name="mlafter"><return/><parameters><parameter name="Arg₁" type="number"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></function><function name="mlevent"><return/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="function"/></parameters><description/><examples/></function><function name="mlprint"><return/><parameters/><description/><examples/></function><function name="replace"><return/><parameters><parameter name="Var₁..." type="any"/><parameter name="Varₙ" type="any"/><parameter name="Value" type="any"/></parameters><description>Assigns <mini>Varᵢ := Varᵢ₊₁</mini> for each <mini>1 &lt;= i &lt; n</mini> and <mini>Varₙ := Value</mini>. Returns the old value of <mini>Var₁</mini>.
</description><examples/></function><function name="visit"><return/><parameters><parameter name="Value" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns <mini>Fn(V,  Value)</mini> where <mini>V</mini> is a newly created <mini>visitor</mini>.
</description><examples/></function></category><category name="module"><method category="module" name="::" variadic="false"><return type="any"/><parameters><parameter name="Module" type="module"/><parameter name="Name" type="string"/></parameters><description>Imports a symbol from a module.
</description><examples/></method><method category="module" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="module"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="module" name=":exports" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="module"/></parameters><description/><examples/></method><method category="module" name=":path" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="module"/></parameters><description/><examples/></method><type name="module"><parents/><description/><examples/></type></category><category name="external"><method category="external" name="::" variadic="false"><return type="external"/><parameters><parameter name="External" type="external"/><parameter name="Import" type="string"/></parameters><description/><examples/></method><method category="external" name=":add" variadic="false"><return type=""/><parameters><parameter name="Externals" type="external::set"/><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><type name="external::set"><parents/><description/><examples/></type><type name="external"><parents/><description>A placeholder value that can be encoded and replaced on decoding.
</description><examples/></type><constructor name="external"><return/><parameters><parameter name="Name" type="string"/></parameters><description/><examples/></constructor><constructor name="external"><return/><parameters><parameter name="Name" type="string"/></parameters><description/><examples/></constructor><function name="external::add"><return/><parameters><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></function><function name="external::get"><return/><parameters><parameter name="Name" type="string"/></parameters><description/><examples/></function><constructor category="external" name="external::set" variadic="false"><return type="external::set"/><parameters/><description/><examples/></constructor></category><category name="symbol"><method category="symbol" name=".." variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="symbol"/><parameter name="Arg₂" type="symbol"/></parameters><description/><examples/></method><method category="symbol" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="symbol"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><type name="symbol::interval"><parents/><description/><examples/></type><type name="symbol"><parents><parent type="function"/></parents><description/><examples/></type></category><category name="memory"><function name="address"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns the internal address of <mini>Value</mini> as an integer.
</description><examples/></function><function name="collect"><return/><parameters/><description>Call garbage collector.
</description><examples/></function><function name="dump"><return/><parameters/><description/><examples/></function><function name="size"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns information about the blocks of memory referenced by <mini>Value</mini>.
</description><examples/></function><function name="trace"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns information about the blocks of memory referenced by <mini>Value</mini>.
</description><examples/></function><function name="usage"><return/><parameters/><description/><examples/></function></category><category name="xml"><method category="xml" name="/" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns a sequence of the children of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name="/" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns a sequence of the children of <mini>Xml</mini> with tag <mini>Tag</mini>.
</description><examples/></method><method category="xml" name="/" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the children of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="/" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ / Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="/" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the children of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="/" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence of the children of <mini>Xml</mini> for which <mini>Fn(Child)</mini> is non-nil.
</description><examples/></method><method category="xml" name="//" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns a sequence of the recursive children of <mini>Xml</mini> with tag <mini>Tag</mini>.
</description><examples/></method><method category="xml" name="//" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the recursive children of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="//" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the recursive children of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="//" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns a sequence of the recursive children of <mini>Xml</mini>,  including <mini>Xml</mini>.
</description><examples/></method><method category="xml" name="//" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence of the recursive children of <mini>Xml</mini> for which <mini>Fn(Child)</mini> is non-nil.
</description><examples/></method><method category="xml" name="//" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ // Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="::" variadic="false"><return type="string|nil"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Attribute" type="string"/></parameters><description>Returns the value of the <mini>Attribute</mini> attribute of <mini>Parent</mini>.
</description><examples/></method><method category="xml" name=":add_next" variadic="true"><return type="xml"/><parameters><parameter name="Node" type="xml"/><parameter name="Other" type="any"/></parameters><description>Inserts <mini>Other</mini> directly after <mini>Node</mini>.
</description><examples/></method><method category="xml" name=":add_prev" variadic="true"><return type="xml"/><parameters><parameter name="Node" type="xml"/><parameter name="Other" type="any"/></parameters><description>Inserts <mini>Other</mini> directly before <mini>Node</mini>.
</description><examples/></method><method category="xml" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Xml" type="xml::element"/></parameters><description>Appends a string representation of <mini>Xml</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="xml" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="xml::element"/><parameter name="Arg₃" type="xml"/><parameter name="Arg₄" type="xml"/></parameters><description/><examples/></method><method category="xml" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="xml::element"/><parameter name="Arg₃" type="nil"/><parameter name="Arg₄" type="xml"/></parameters><description/><examples/></method><method category="xml" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="xml::element"/><parameter name="Arg₃" type="xml"/><parameter name="Arg₄" type="nil"/></parameters><description/><examples/></method><method category="xml" name=":attributes" variadic="false"><return type="map"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns the attributes of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name=":contains" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="String" type="string"/></parameters><description>Equivalent to <mini>Sequence -&gt;? fun(X) X:text:find(String)</mini>.
</description><examples/></method><method category="xml" name=":contains" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Regex" type="regex"/></parameters><description>Equivalent to <mini>Sequence -&gt;? fun(X) X:text:find(Regex)</mini>.
</description><examples/></method><method category="xml" name=":copy" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="xml::text"/></parameters><description/><examples/></method><method category="xml" name=":copy" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="xml::element"/></parameters><description/><examples/></method><method category="xml" name=":empty" variadic="false"><return type="xml"/><parameters><parameter name="Parent" type="xml::element"/></parameters><description>Removes the contents of <mini>Parent</mini>.
</description><examples/></method><method category="xml" name=":grow" variadic="true"><return type="xml"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Children" type="sequence"/></parameters><description>Adds each node generated by <mini>Children</mini> to <mini>Parent</mini> and returns <mini>Parent</mini>.
</description><examples/></method><method category="xml" name=":has" variadic="false"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Fn" type="function"/></parameters><description>Equivalent to <mini>Sequence -&gt;? fun(X) some(Fn(X))</mini>.
</description><examples/></method><method category="xml" name=":index" variadic="false"><return type="integer|nil"/><parameters><parameter name="Node" type="xml"/></parameters><description>Returns the index of <mini>Node</mini> in its parent or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":index" variadic="false"><return type="integer|nil"/><parameters><parameter name="Node" type="xml"/><parameter name="Text" type="boolean"/></parameters><description>Returns the index of <mini>Node</mini> in its parent including or excluding text nodes.
</description><examples/></method><method category="xml" name=":next" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th next sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":next" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":next" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":next" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":next" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &gt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name=":next" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the next sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the parent of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ ^ Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th parent of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the parent of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the parent of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":parent" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the parent of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":path" variadic="false"><return type="string"/><parameters><parameter name="Parent" type="xml"/><parameter name="Node" type="xml"/></parameters><description>Returns the path of <mini>Node</mini> from <mini>Parent</mini>.
</description><examples/></method><method category="xml" name=":path" variadic="false"><return type="string"/><parameters><parameter name="Node" type="xml"/></parameters><description>Returns the path of <mini>Node</mini> from its root.
</description><examples/></method><method category="xml" name=":prev" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th prev sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":prev" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":prev" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":prev" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":prev" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the previous sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name=":prev" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &lt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name=":put" variadic="true"><return type="xml"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Child" type="any"/></parameters><description>Adds <mini>Child</mini> to <mini>Parent</mini>.
</description><examples/></method><method category="xml" name=":remove" variadic="false"><return type="xml"/><parameters><parameter name="Node" type="xml"/></parameters><description>Removes <mini>Node</mini> from its parent.
</description><examples/></method><method category="xml" name=":replace" variadic="false"><return type="xml"/><parameters><parameter name="Node₁" type="xml"/><parameter name="Node₂" type="xml"/></parameters><description>Removes <mini>Node₁</mini> from its parent and replaces it with <mini>Node₂</mini>.
</description><examples/></method><method category="xml" name=":set" variadic="false"><return type="xml"/><parameters><parameter name="Xml" type="xml::element"/><parameter name="Attribute" type="string"/><parameter name="Value" type="string"/></parameters><description>Sets the value of attribute <mini>Attribute</mini> in <mini>Xml</mini> to <mini>Value</mini> and returns <mini>Xml</mini>.
</description><examples/></method><method category="xml" name=":tag" variadic="false"><return type="string"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns the tag of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name=":text" variadic="false"><return type="string"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns the (recursive) text content of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name=":text" variadic="false"><return type="string"/><parameters><parameter name="Xml" type="xml::element"/><parameter name="Sep" type="string"/></parameters><description>Returns the (recursive) text content of <mini>Xml</mini>,  adding <mini>Sep</mini> between the contents of adjacent nodes.
</description><examples/></method><method category="xml" name=":text" variadic="false"><return type="string"/><parameters><parameter name="Xml" type="xml::text"/></parameters><description>Returns the text content of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name=":visit" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="xml::element"/></parameters><description/><examples/></method><method category="xml" name="&lt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th prev sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&lt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&lt;" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&lt;" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &lt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="&lt;" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the prev sibling of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&lt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the previous sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence of the previous siblings of <mini>Xml</mini> for which <mini>Fn(Child)</mini> is non-nil.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &lt;&lt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns a sequence of the previous siblings of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns a sequence of the previous siblings of <mini>Xml</mini> with tag <mini>Tag</mini>.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the previous siblings of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="&lt;&lt;" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the previous siblings of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="&gt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th next sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&gt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&gt;" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&gt;" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the next sibling of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&gt;" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the next sibling of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="&gt;" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &gt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml::element"/></parameters><description>Returns a sequence of the next siblings of <mini>Xml</mini>.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns a sequence of the next siblings of <mini>Xml</mini> with tag <mini>Tag</mini>.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ &gt;&gt; Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the next siblings of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="true"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns a sequence of the next siblings of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.
</description><examples/></method><method category="xml" name="&gt;&gt;" variadic="false"><return type="sequence"/><parameters><parameter name="Xml" type="xml"/><parameter name="Fn" type="function"/></parameters><description>Returns a sequence of the next siblings of <mini>Xml</mini> for which <mini>Fn(Child)</mini> is non-nil.
</description><examples/></method><type name="xml::element"><parents><parent type="xml"/><parent type="sequence"/></parents><description>An XML element node.
</description><examples/></type><type name="xml::filter"><parents><parent type="function"/></parents><description>An XML filter.
</description><examples/></type><type name="xml::flags"><parents><parent type="flags"/></parents><description>* <mini>::NoText</mini>
* <mini>::Trim</mini>
</description><examples/></type><type name="xml"><parents/><description>An XML node.
</description><examples/></type><type name="xml::text"><parents><parent type="xml"/><parent type="string"/></parents><description>An XML text node.
</description><examples/></type><method category="xml" name="[]" variadic="false"><return type="string|nil"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Attribute" type="string"/></parameters><description>Returns the value of the <mini>Attribute</mini> attribute of <mini>Parent</mini>.
</description><examples/></method><method category="xml" name="[]" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="xml::element"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="names"/></parameters><description/><examples/></method><method category="xml" name="[]" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="xml::element"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="string"/><parameter name="Arg₄" type="names"/></parameters><description/><examples/></method><method category="xml" name="[]" variadic="false"><return type="xml|nil"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Index" type="integer"/><parameter name="Tag" type="string"/></parameters><description>Returns the <mini>Index</mini>-th child of <mini>Parent</mini> with tag <mini>Tag</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="[]" variadic="false"><return type="xml|nil"/><parameters><parameter name="Parent" type="xml::element"/><parameter name="Index" type="integer"/></parameters><description>Returns the <mini>Index</mini>-th child of <mini>Parent</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="^" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/></parameters><description>Returns the parent of <mini>Xml</mini> with tag <mini>Tag</mini> if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="^" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Attribute" type="names"/></parameters><description>Returns the parent of <mini>Xml</mini> with <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="^" variadic="true"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="Tag" type="string"/><parameter name="Attribute" type="names"/></parameters><description>Returns the parent of <mini>Xml</mini> with tag <mini>Tag</mini> and <mini>Attribute₁ = Value₁</mini>,  etc.,  if one exists,  otherwise <mini>nil</mini>.
</description><examples/></method><method category="xml" name="^" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/><parameter name="N" type="integer"/></parameters><description>Returns the <mini>N</mini>-th parent of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><method category="xml" name="^" variadic="true"><return type="sequence"/><parameters><parameter name="Sequence" type="xml::sequence"/><parameter name="Args" type="any"/></parameters><description>Generates the sequence <mini>Nodeᵢ ^ Args</mini> where <mini>Nodeᵢ</mini> are the nodes generated by <mini>Sequence</mini>.
</description><examples/></method><method category="xml" name="^" variadic="false"><return type="xml|nil"/><parameters><parameter name="Xml" type="xml"/></parameters><description>Returns the parent of <mini>Xml</mini> or <mini>nil</mini>.
</description><examples/></method><constructor category="xml" name="xml" variadic="true"><return type="xml"/><parameters><parameter name="Tag" type="symbol"/></parameters><description>Returns a new xml element with tag <mini>Tag</mini>,  adding attributes and children as <mini>xml::element(...)</mini>.
</description><examples/></constructor><constructor category="xml" name="xml" variadic="false"><return type="xml"/><parameters><parameter name="Stream" type="stream"/><parameter name="Arg₂" type="xml::flags"/></parameters><description>Returns the contents of <mini>Stream</mini> parsed into an XML node.
</description><examples/></constructor><constructor category="xml" name="xml" variadic="false"><return type="xml"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Returns the contents of <mini>Stream</mini> parsed into an XML node.
</description><examples/></constructor><constructor category="xml" name="xml" variadic="false"><return type="xml"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> parsed into an XML node.
</description><examples/></constructor><constructor category="xml" name="xml" variadic="false"><return type="xml"/><parameters><parameter name="String" type="string"/><parameter name="Arg₂" type="xml::flags"/></parameters><description>Returns <mini>String</mini> parsed into an XML node.
</description><examples/></constructor><constructor category="xml" name="xml::element" variadic="true"><return type="xml::element"/><parameters><parameter name="Tag" type="string"/><parameter name="Arg₁, ..., Argₙ" type="any"/></parameters><description>Returns a new XML node with tag <mini>Tag</mini> and optional children and attributes depending on the types of each <mini>Argᵢ</mini>:

* <mini>string</mini>: added as child text node. Consecutive strings are added a single node.
* <mini>xml</mini>: added as a child node.
* <mini>list</mini>: each value must be a <mini>string</mini> or <mini>xml</mini> and is added as above.
* <mini>map</mini>: keys and values must be strings,  set as attributes.
* <mini>name is value</mini>: values must be strings,  set as attributes.
</description><examples><code>import: xml(&quot;fmt/xml&quot;)
xml::element(&quot;test&quot;, &quot;Text&quot;, type is &quot;example&quot;)</code><result>error(&quot;XMLError&quot;, &quot;Attribute values must be strings&quot;)</result></examples></constructor><function name="xml::escape"><return/><parameters><parameter name="String" type="string"/></parameters><description>Escapes characters in <mini>String</mini>.
</description><examples><code>import: xml(&quot;fmt/xml&quot;)
xml::escape(&quot;\&apos;1 + 2 &gt; 3 &amp; 2 &lt; 4\&apos;&quot;)</code><result>&quot;\&apos;1 + 2 &amp;gt; 3 &amp;amp; 2 &amp;lt; 4\&apos;&quot;</result></examples></function><constructor category="xml" name="xml::filter" variadic="true"><return type="xml::filter"/><parameters><parameter name="Attr, Value" type="names"/></parameters><description>Returns an XML filter that checks if a node has attributes <mini>Attrᵢ = Valueᵢ</mini>.
</description><examples/></constructor><constructor category="xml" name="xml::filter" variadic="true"><return type="xml::filter"/><parameters><parameter name="Tag" type="string"/><parameter name="Attr, Value" type="names"/></parameters><description>Returns an XML filter that checks if a node has tag <mini>Tag</mini> and attributes <mini>Attrᵢ = Valueᵢ</mini>.
</description><examples/></constructor><method category="xml" name="xml::parse" variadic="false"><return type="xml"/><parameters><parameter name="String" type="address"/></parameters><description>Returns <mini>String</mini> parsed into an XML node.
</description><examples/></method><method category="xml" name="xml::parse" variadic="false"><return type="xml"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Returns the contents of <mini>Stream</mini> parsed into an XML node.
</description><examples/></method><method category="xml" name="xml::parse" variadic="false"><return type="xml"/><parameters><parameter name="Stream" type="stream"/><parameter name="Arg₂" type="xml::flags"/></parameters><description>Returns the contents of <mini>Stream</mini> parsed into an XML node.
</description><examples/></method><method category="xml" name="xml::parse" variadic="false"><return type="xml"/><parameters><parameter name="String" type="address"/><parameter name="Arg₂" type="xml::flags"/></parameters><description>Returns <mini>String</mini> parsed into an XML node.
</description><examples/></method><type name="xml::parser"><parents><parent type="stream"/></parents><description>A callback based streaming XML parser.
</description><examples/></type><constructor name="xml::parser"><return/><parameters><parameter name="Callback" type="any"/></parameters><description>Returns a new parser that calls <mini>Callback(Xml)</mini> each time a complete XML document is parsed.
</description><examples/></constructor></category><category name="xe"><method category="xe" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="xe::node"/></parameters><description/><examples/></method><method category="xe" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="xe::var"/></parameters><description/><examples/></method><method category="xe" name=":attributes" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::node"/></parameters><description/><examples/></method><method category="xe" name=":content" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::node"/></parameters><description/><examples/></method><method category="xe" name=":indices" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::var"/></parameters><description/><examples/></method><method category="xe" name=":name" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::var"/></parameters><description/><examples/></method><method category="xe" name=":tag" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::node"/></parameters><description/><examples/></method><type name="xe::node"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="xe::var"><parents/><description/><examples/></type><method category="xe" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="xe::node"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><constructor name="xe::node"><return/><parameters><parameter name="Tag" type="string"/></parameters><description/><examples/></constructor><function name="xe::parse"><return/><parameters><parameter name="String" type="string"/></parameters><description/><examples/></function><constructor name="xe::var"><return/><parameters><parameter name="Name" type="string"/></parameters><description/><examples/></constructor></category><category name="uuid"><description>.. note::
   Depending on how *Minilang* is built,  <mini>uuid</mini> might need to be imported using <mini>import: uuid(&quot;util/uuid&quot;)</mini>.
</description><method category="uuid" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="UUID" type="uuid"/></parameters><description>Appends a representation of <mini>UUID</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="uuid" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="uuid"/><parameter name="Arg₂" type="uuid"/></parameters><description/><examples/></method><type name="uuid"><parents/><description>A UUID.
</description><examples/></type><constructor category="uuid" name="address" variadic="false"><return type="address"/><parameters><parameter name="UUID" type="uuid"/></parameters><description>Returns an address view of <mini>UUID</mini>.
</description><examples><code>import: uuid(&quot;util/uuid&quot;)
address(uuid())</code><result>&lt;16:2C492C599BC94BE2B46AA9D407463D1D&gt;</result></examples></constructor><constructor category="uuid" name="uuid" variadic="false"><return type="uuid|error"/><parameters><parameter name="String" type="string"/></parameters><description>Parses <mini>String</mini> as a UUID,  returning an error if <mini>String</mini> does not have the correct format.
</description><examples><code>import: uuid(&quot;util/uuid&quot;)
uuid(&quot;5fe1af82-02f9-429a-8787-4a7c16628a02&quot;)</code><result>5fe1af82-02f9-429a-8787-4a7c16628a02</result><code>uuid(&quot;test&quot;)</code><result>error(&quot;UUIDError&quot;, &quot;Invalid UUID string&quot;)</result></examples></constructor><constructor category="uuid" name="uuid" variadic="false"><return type="uuid|error"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns a new UUID with the bytes of <mini>Address</mini>.
</description><examples/></constructor><constructor category="uuid" name="uuid" variadic="false"><return type="uuid"/><parameters/><description>Returns a new random UUID.
</description><examples><code>import: uuid(&quot;util/uuid&quot;)
uuid()</code><result>6ff612ac-dcb4-4565-aa95-c804d5534d24</result></examples></constructor></category><category name="tuple"><method category="tuple" name="!=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>A:size != B:size</mini> or <mini>Aᵢ != Bᵢ</mini> for some <mini>i</mini>.
</description><examples><code>!=((1, 2, 3), (1, 2, 3))</code><result>nil</result><code>!=((1, 2, 3), (1, 2))</code><result>(1, 2)</result><code>!=((1, 2), (1, 2, 3))</code><result>(1, 2, 3)</result><code>!=((1, 2, 3), (1, 2, 4))</code><result>(1, 2, 4)</result><code>!=((1, 3, 2), (1, 2, 3))</code><result>(1, 2, 3)</result></examples></method><method category="tuple" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="tuple"/><parameter name="Arg₃" type="string"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="tuple" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="tuple"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="tuple" name=":const" variadic="false"><return type="tuple"/><parameters><parameter name="Copy" type="visitor"/><parameter name="Tuple" type="tuple"/></parameters><description>Returns a new tuple containing copies of the elements of <mini>Tuple</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="tuple" name=":copy" variadic="false"><return type="tuple"/><parameters><parameter name="Copy" type="visitor"/><parameter name="Tuple" type="tuple"/></parameters><description>Returns a new tuple containing copies of the elements of <mini>Tuple</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="tuple" name=":size" variadic="false"><return type="integer"/><parameters><parameter name="Tuple" type="tuple"/></parameters><description>Returns the number of elements in <mini>Tuple</mini>.
</description><examples/></method><method category="tuple" name=":visit" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="tuple"/></parameters><description/><examples/></method><method category="tuple" name="&lt;" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &lt; Bⱼ</mini>.
</description><examples><code>&lt;((1, 2, 3), (1, 2, 3))</code><result>nil</result><code>&lt;((1, 2, 3), (1, 2))</code><result>nil</result><code>&lt;((1, 2), (1, 2, 3))</code><result>(1, 2, 3)</result><code>&lt;((1, 2, 3), (1, 2, 4))</code><result>(1, 2, 4)</result><code>&lt;((1, 3, 2), (1, 2, 3))</code><result>nil</result></examples></method><method category="tuple" name="&lt;=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &lt;= Bⱼ</mini>.
</description><examples><code>&lt;=((1, 2, 3), (1, 2, 3))</code><result>(1, 2, 3)</result><code>&lt;=((1, 2, 3), (1, 2))</code><result>nil</result><code>&lt;=((1, 2), (1, 2, 3))</code><result>(1, 2, 3)</result><code>&lt;=((1, 2, 3), (1, 2, 4))</code><result>(1, 2, 4)</result><code>&lt;=((1, 3, 2), (1, 2, 3))</code><result>nil</result></examples></method><method category="tuple" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Tuple₁" type="tuple"/><parameter name="Tuple₂" type="tuple"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Tuple₁</mini> is less than,  equal to or greater than <mini>Tuple₂</mini> using lexicographical ordering.
</description><examples/></method><method category="tuple" name="=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>A:size = B:size</mini> and <mini>Aᵢ = Bᵢ</mini> for each <mini>i</mini>.
</description><examples><code>=((1, 2, 3), (1, 2, 3))</code><result>(1, 2, 3)</result><code>=((1, 2, 3), (1, 2))</code><result>nil</result><code>=((1, 2), (1, 2, 3))</code><result>nil</result><code>=((1, 2, 3), (1, 2, 4))</code><result>nil</result><code>=((1, 3, 2), (1, 2, 3))</code><result>nil</result></examples></method><method category="tuple" name="&gt;" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &gt; Bⱼ</mini>.
</description><examples><code>&gt;((1, 2, 3), (1, 2, 3))</code><result>nil</result><code>&gt;((1, 2, 3), (1, 2))</code><result>(1, 2)</result><code>&gt;((1, 2), (1, 2, 3))</code><result>nil</result><code>&gt;((1, 2, 3), (1, 2, 4))</code><result>nil</result><code>&gt;((1, 3, 2), (1, 2, 3))</code><result>(1, 2, 3)</result></examples></method><method category="tuple" name="&gt;=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="tuple"/><parameter name="B" type="tuple"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &gt;= Bⱼ</mini>.
</description><examples><code>&gt;=((1, 2, 3), (1, 2, 3))</code><result>(1, 2, 3)</result><code>&gt;=((1, 2, 3), (1, 2))</code><result>(1, 2)</result><code>&gt;=((1, 2), (1, 2, 3))</code><result>nil</result><code>&gt;=((1, 2, 3), (1, 2, 4))</code><result>nil</result><code>&gt;=((1, 3, 2), (1, 2, 3))</code><result>(1, 2, 3)</result></examples></method><type name="tuple"><parents><parent type="function"/><parent type="sequence"/></parents><description>An immutable tuple of values.

<mini>(Tuple: tuple)(Arg₁,  ...,  Argₙ)</mini>
   Returns <mini>(Tuple[1](Arg₁,  ...,  Argₙ),  ...,  Tuple[k](Arg₁,  ...,  Argₙ))</mini>
</description><examples/></type><method category="tuple" name="[]" variadic="false"><return type="any|error"/><parameters><parameter name="Tuple" type="tuple"/><parameter name="Index" type="integer"/></parameters><description>Returns the <mini>Index</mini>-th element in <mini>Tuple</mini> or an error if <mini>Index</mini> is out of interval.
Indexing starts at <mini>1</mini>. Negative indices count from the end,  with <mini>-1</mini> returning the last element.
</description><examples/></method><constructor name="tuple"><return/><parameters><parameter name="Value₁" type="any"/><parameter name="" type="..."/><parameter name="Valueₙ" type="any"/></parameters><description>Returns a tuple of values <mini>Value₁,  ...,  Valueₙ</mini>.
</description><examples/></constructor></category><category name="time"><description>Provides time and date operations.
</description><method category="time" name="+" variadic="false"><return type="time"/><parameters><parameter name="Start" type="time"/><parameter name="Duration" type="number"/></parameters><description>Returns the time <mini>Duration</mini> seconds after <mini>Start</mini>.
</description><examples><code>time(&quot;2022-04-01 12:00:00&quot;) + 3600</code><result>2022-04-01T13:00:00</result></examples></method><method category="time" name="-" variadic="false"><return type="real"/><parameters><parameter name="End" type="time"/><parameter name="Start" type="time"/></parameters><description>Returns the time elasped betwen <mini>Start</mini> and <mini>End</mini> in seconds.
</description><examples><code>time(&quot;2022-04-01 12:00:00&quot;) - time(&quot;2022-04-01 11:00:00&quot;)</code><result>3600</result></examples></method><method category="time" name="-" variadic="false"><return type="time"/><parameters><parameter name="Start" type="time"/><parameter name="Duration" type="number"/></parameters><description>Returns the time <mini>Duration</mini> seconds before <mini>Start</mini>.
</description><examples><code>time(&quot;2022-04-01 12:00:00&quot;) - 3600</code><result>2022-04-01T11:00:00</result></examples></method><method category="time" name="::" variadic="false"><return type="time::zone|error"/><parameters><parameter name="Name" type="time::zone::type"/><parameter name="Arg₂" type="string"/></parameters><description>Returns the time zone identified by <mini>Name</mini> or an error if no time zone is found.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/><parameter name="Format" type="string"/></parameters><description>Formats <mini>Time</mini> as a local time according to the specified format.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/><parameter name="Format" type="string"/><parameter name="TimeZone" type="nil"/></parameters><description>Formats <mini>Time</mini> as a UTC time according to the specified format.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Appends the name of <mini>TimeZone</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/></parameters><description>Formats <mini>Time</mini> as a local time.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Formats <mini>Time</mini> as a time in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/><parameter name="Format" type="string"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Formats <mini>Time</mini> as a time in <mini>TimeZone</mini> according to the specified format.
</description><examples/></method><method category="time" name=":append" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Formats <mini>Time</mini> as a UTC time according to ISO 8601.
</description><examples/></method><method category="time" name=":day" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the date from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":day" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the date from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":day" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the date from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":hour" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the hour from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":hour" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the hour from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":hour" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the hour from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":minute" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the minute from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":minute" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the minute from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":minute" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the minute from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":month" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the month from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":month" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the month from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":month" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the month from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":nsec" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the nanoseconds component of <mini>Time</mini>.
</description><examples/></method><method category="time" name=":precision" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="time"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="time" name=":second" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the second from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":second" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the second from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":second" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the second from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":wday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the day of the week from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":wday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the day of the week from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":wday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the day of the week from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":with" variadic="true"><return type="time"/><parameters><parameter name="Time" type="time"/><parameter name="Component, Value" type="names"/></parameters><description>Returns <mini>Time</mini> with the the specified components updated.
</description><examples/></method><method category="time" name=":with" variadic="true"><return type="time"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/><parameter name="Component, Value" type="names"/></parameters><description>Returns <mini>Time</mini> with the the specified components updated in the specified time zone.
</description><examples/></method><method category="time" name=":with" variadic="true"><return type="time"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/><parameter name="Component, Value" type="names"/></parameters><description>Returns <mini>Time</mini> with the the specified components updated in UTC.
</description><examples/></method><method category="time" name=":yday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the number of days from the start of the year from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":yday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the number of days from the start of the year from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":yday" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the number of days from the start of the year from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name=":year" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the year from <mini>Time</mini> in <mini>TimeZone</mini>.
</description><examples/></method><method category="time" name=":year" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the year from <mini>Time</mini> in UTC.
</description><examples/></method><method category="time" name=":year" variadic="false"><return type="integer"/><parameters><parameter name="Time" type="time"/></parameters><description>Returns the year from <mini>Time</mini> in local time.
</description><examples/></method><method category="time" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="time"/><parameter name="B" type="time"/></parameters><description>Compares the times <mini>A</mini> and <mini>B</mini> and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> respectively.
</description><examples/></method><type name="time::day"><parents><parent type="enum::cyclic"/></parents><description>* <mini>::Monday</mini>
* <mini>::Tuesday</mini>
* <mini>::Wednesday</mini>
* <mini>::Thursday</mini>
* <mini>::Friday</mini>
* <mini>::Saturday</mini>
* <mini>::Sunday</mini>
</description><examples/></type><type name="time::month"><parents><parent type="enum::cyclic"/></parents><description>* <mini>::January</mini>
* <mini>::February</mini>
* <mini>::March</mini>
* <mini>::April</mini>
* <mini>::May</mini>
* <mini>::June</mini>
* <mini>::July</mini>
* <mini>::August</mini>
* <mini>::September</mini>
* <mini>::October</mini>
* <mini>::November</mini>
* <mini>::December</mini>
</description><examples/></type><type name="time"><parents/><description>An instant in time with nanosecond resolution.
</description><examples/></type><type name="time::zone"><parents/><description>A time zone.
</description><examples/></type><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the time specified by the provided components in UTC.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/></parameters><description>Returns the time specified by the provided components in the local time.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters/><description>Returns the current time.
</description><examples><code>time()</code><result>2025-09-21T10:39:14.287491</result></examples></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="String" type="string"/></parameters><description>Parses the <mini>String</mini> as a time according to ISO 8601.
</description><examples><code>time(&quot;2023-02-09T21:19:33.196413266&quot;)</code><result>2023-02-09T20:19:33.196413</result></examples></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="String" type="string"/><parameter name="Format" type="string"/><parameter name="TimeZone" type="nil"/></parameters><description>Parses the <mini>String</mini> as a time according to specified format. The time is assumed to be in UTC.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="String" type="string"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Parses the <mini>String</mini> as a time in the specified time zone.
</description><examples><code>time(&quot;2023-02-09T21:19:33.196413266&quot;, time::zone::&quot;America/Chicago&quot;)</code><result>2023-02-10T03:19:33.196413</result></examples></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="String" type="string"/><parameter name="Format" type="string"/></parameters><description>Parses the <mini>String</mini> as a time according to specified format. The time is assumed to be in local time.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/><parameter name="Hour" type="integer"/><parameter name="Minute" type="integer"/><parameter name="Second" type="integer"/></parameters><description>Returns the time specified by the provided components in the local time.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the time specified by the provided components in the specified time zone.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="String" type="string"/><parameter name="Format" type="string"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Parses the <mini>String</mini> as a time according to specified format in the specified time zone.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/><parameter name="Hour" type="integer"/><parameter name="Minute" type="integer"/><parameter name="Second" type="integer"/><parameter name="TimeZone" type="time::zone"/></parameters><description>Returns the time specified by the provided components in the specified time zone.
</description><examples/></constructor><constructor category="time" name="time" variadic="false"><return type="time"/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/><parameter name="Day" type="integer"/><parameter name="Hour" type="integer"/><parameter name="Minute" type="integer"/><parameter name="Second" type="integer"/><parameter name="TimeZone" type="nil"/></parameters><description>Returns the time specified by the provided components in UTC.
</description><examples/></constructor><function name="time::mdays"><return/><parameters><parameter name="Year" type="integer"/><parameter name="Month" type="integer"/></parameters><description/><examples/></function></category><category name="thread"><method category="thread" name=":broadcast" variadic="false"><return type="thread::condition"/><parameters><parameter name="Condition" type="thread::condition"/></parameters><description>Signals all threads waiting on <mini>Condition</mini>.
</description><examples/></method><method category="thread" name=":join" variadic="false"><return type="any"/><parameters><parameter name="Thread" type="thread"/></parameters><description>Waits until the thread <mini>Thread</mini> completes and returns its result.
</description><examples/></method><method category="thread" name=":lock" variadic="false"><return type="thread::mutex"/><parameters><parameter name="Mutex" type="thread::mutex"/></parameters><description>Locks <mini>Mutex</mini>.
</description><examples/></method><method category="thread" name=":protect" variadic="false"><return type="thread::protected"/><parameters><parameter name="Mutex" type="thread::mutex"/><parameter name="Value" type="any"/></parameters><description>Creates a thread-safe (protected) wrapper for <mini>Value</mini>.
</description><examples/></method><method category="thread" name=":recv" variadic="true"><return type="tuple[integer, any]"/><parameters><parameter name="Channel₁" type="thread::channel"/><parameter name="..., Channelₙ" type="thread::channel"/></parameters><description>Gets the next available message on any of <mini>Channel₁,  ...,  Channelₙ</mini>,  blocking if <mini>Channel</mini> is empty. Returns <mini>(Index,  Message)</mini> where <mini>Index = 1,  ...,  n</mini>.
</description><examples/></method><method category="thread" name=":send" variadic="false"><return type="thread::channel"/><parameters><parameter name="Channel" type="thread::channel"/><parameter name="Message" type="any"/></parameters><description>Adds <mini>Message</mini> to <mini>Channel</mini>. <mini>Message</mini> must be thread-safe.
Blocks if <mini>Channel</mini> is currently full.
</description><examples/></method><method category="thread" name=":signal" variadic="false"><return type="thread::condition"/><parameters><parameter name="Condition" type="thread::condition"/></parameters><description>Signals a single thread waiting on <mini>Condition</mini>.
</description><examples/></method><method category="thread" name=":thread" variadic="true"><return type="thread"/><parameters><parameter name="Args..." type="any"/><parameter name="Fn" type="function"/><parameter name="Arg₃" type="any"/></parameters><description>Creates a new thread and calls <mini>Fn(Args...)</mini> in the new thread.
All arguments must be thread-safe.
</description><examples/></method><method category="thread" name=":unlock" variadic="false"><return type="thread::mutex"/><parameters><parameter name="Mutex" type="thread::mutex"/></parameters><description>Unlocks <mini>Mutex</mini>.
</description><examples/></method><method category="thread" name=":use" variadic="true"><return type="any"/><parameters><parameter name="Protected₁" type="thread::protected"/><parameter name="..., Protectedₙ" type="thread::protected"/><parameter name="Function" type="function"/></parameters><description>Locks <mini>Protected₁:mutex</mini>,  then calls <mini>Function(Value₁,  ...,  Valueₙ)</mini> where <mini>Valueᵢ</mini> is the value protected by <mini>Protectedᵢ</mini>. All <mini>Protectedᵢ</mini> must be protected by the same <mini>thread::mutex</mini>.
</description><examples/></method><method category="thread" name=":wait" variadic="false"><return type="thread::condition"/><parameters><parameter name="Condition" type="thread::condition"/><parameter name="Mutex" type="thread::mutex"/></parameters><description>Waits for a signal on <mini>Condition</mini>,  using <mini>Mutex</mini> for synchronization.
</description><examples/></method><type name="thread::channel"><parents/><description>A channel for thread communication.
</description><examples/></type><type name="thread::condition"><parents/><description>A condition.
</description><examples/></type><type name="thread::mutex"><parents/><description>A mutex.
</description><examples/></type><type name="thread::port"><parents><parent type="function"/></parents><description/><examples/></type><type name="thread::protected"><parents/><description>A thread-safe (protected) wrapper for another value.
</description><examples/></type><type name="thread"><parents/><description>A thread.
</description><examples/></type><function name="mlthreadport"><return/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></function><method category="thread" name="thread" variadic="false"><return type=""/><parameters/><description/><examples/></method><constructor name="thread::channel"><return/><parameters><parameter name="Capacity" type="integer"/></parameters><description>Creates a new channel with capacity <mini>Capacity</mini>.
</description><examples/></constructor><constructor name="thread::condition"><return/><parameters/><description>Creates a new condition.
</description><examples/></constructor><constructor name="thread::mutex"><return/><parameters/><description>Creates a new mutex.
</description><examples/></constructor><function name="thread::sleep"><return/><parameters><parameter name="Duration" type="number"/></parameters><description>Causes the current thread to sleep for <mini>Duration</mini> microseconds.
</description><examples/></function></category><category name="tasks"><method category="tasks" name="*" variadic="false"><return type="task::set"/><parameters><parameter name="Task₁" type="task"/><parameter name="Task₂" type="task"/></parameters><description>Returns a <mini>task::set</mini> that completes when all of its sub tasks complete,  or any raises an error.
</description><examples/></method><method category="tasks" name="+" variadic="false"><return type="task::set"/><parameters><parameter name="Task₁" type="task"/><parameter name="Task₂" type="task"/></parameters><description>Returns a <mini>task::set</mini> that completes when any of its sub tasks complete,  or any raises an error.
</description><examples/></method><method category="tasks" name=":cancel" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="task::queue"/></parameters><description/><examples/></method><method category="tasks" name=":done" variadic="false"><return type="any|error"/><parameters><parameter name="Task" type="task"/><parameter name="Result" type="any"/></parameters><description>Completes <mini>Task</mini> with <mini>Result</mini>,  resuming any waiting code. Raises an error if <mini>Task</mini> is already complete.
</description><examples/></method><method category="tasks" name=":else" variadic="false"><return type="task"/><parameters><parameter name="Fn" type="function"/><parameter name="Else" type="function"/></parameters><description/><examples/></method><method category="tasks" name=":error" variadic="false"><return type="any|error"/><parameters><parameter name="Task" type="task"/><parameter name="Type" type="string"/><parameter name="Message" type="string"/></parameters><description>Completes <mini>Task</mini> with an <mini>error(Type,  Message)</mini>,  resuming any waiting code. Raises an error if <mini>Task</mini> is already complete.
</description><examples/></method><method category="tasks" name=":on" variadic="false"><return type="task"/><parameters><parameter name="Fn" type="function"/><parameter name="On" type="function"/></parameters><description/><examples/></method><method category="tasks" name=":then" variadic="false"><return type="task"/><parameters><parameter name="Fn" type="function"/><parameter name="Then" type="function"/><parameter name="Else" type="function"/></parameters><description/><examples/></method><method category="tasks" name=":then" variadic="false"><return type="task"/><parameters><parameter name="Fn" type="function"/><parameter name="Then" type="function"/></parameters><description>Equivalent to <mini>task(Fn,  call -&gt; Then)</mini>.
</description><examples/></method><method category="tasks" name=":wait" variadic="false"><return type="any|error"/><parameters><parameter name="Task" type="task"/></parameters><description>Waits until <mini>Task</mini> is completed and returns its result.
</description><examples/></method><method category="tasks" name=":wait" variadic="false"><return type="any|error"/><parameters><parameter name="Task" type="task"/><parameter name="Arg₂" type="real"/></parameters><description>Waits until <mini>Task</mini> is completed and returns its result.
</description><examples/></method><method category="tasks" name=":wait" variadic="false"><return type="any|error"/><parameters><parameter name="Tasks" type="task::list"/></parameters><description>Waits until all the tasks in <mini>Tasks</mini> are completed or any task returns an error.
</description><examples/></method><type name="task::queue"><parents><parent type="function"/></parents><description>A queue of tasks that can run a limited number of tasks at once.

<mini>fun (Queue: task::queue)(Arg₁,  ...,  Argₙ,  Fn): task</mini>
   Returns a new task that calls <mini>Fn(Arg₁,  ...,  Argₙ)</mini>. The task will be delayed if <mini>Queue</mini> has reached its limit.
</description><examples/></type><type name="task::set"><parents><parent type="task"/></parents><description>A task combining a set of sub tasks.
</description><examples/></type><type name="task"><parents><parent type="function"/></parents><description>A task representing a value that will eventually be completed.
</description><examples/></type><function name="buffered"><return/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Size" type="integer"/><parameter name="Fn" type="function"/></parameters><description>Returns the sequence <mini>(Kᵢ,  Fn(Kᵢ,  Vᵢ))</mini> where <mini>Kᵢ,  Vᵢ</mini> are the keys and values produced by <mini>Sequence</mini>. The calls to <mini>Fn</mini> are done in parallel,  with at most <mini>Size</mini> calls at a time. The original sequence order is preserved (using an internal buffer).
</description><examples><code>list(buffered(1 .. 10, 5, tuple))</code><result>[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]</result></examples></function><function name="diffused"><return/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Size" type="integer"/><parameter name="Fn" type="function"/></parameters><description>Returns the sequence <mini>(Kᵢ,  Fn(Kᵢ,  Vᵢ))</mini> where <mini>Kᵢ,  Vᵢ</mini> are the keys and values produced by <mini>Sequence</mini>. The calls to <mini>Fn</mini> are done in parallel,  with at most <mini>Size</mini> calls at a time. The original sequence order is not preserved.
</description><examples><code>list(diffused(1 .. 10, 5, tuple))</code><result>[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]</result></examples></function><function name="parallel"><return/><parameters><parameter name="Sequence" type="any"/><parameter name="Max?" type="integer"/><parameter name="Min?" type="integer"/><parameter name="Fn" type="function"/></parameters><description>Iterates through <mini>Sequence</mini> and calls <mini>Fn(Key,  Value)</mini> for each <mini>Key,  Value</mini> pair produced **without** waiting for the call to return.
The call to <mini>parallel</mini> returns when all calls to <mini>Fn</mini> return,  or an error occurs.
If <mini>Max</mini> is given,  at most <mini>Max</mini> calls to <mini>Fn</mini> will run at a time by pausing iteration through <mini>Sequence</mini>.
If <mini>Min</mini> is also given then iteration will be resumed only when the number of calls to <mini>Fn</mini> drops to <mini>Min</mini>.
</description><examples/></function><constructor category="tasks" name="task" variadic="false"><return type="task"/><parameters/><description>Returns a task. The task should eventually be completed with <mini>Task:done()</mini> or <mini>Task:error()</mini>.
</description><examples/></constructor><constructor category="tasks" name="task" variadic="false"><return type="task"/><parameters><parameter name="Arg₁..." type="any"/><parameter name="Argₙ" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns a task which calls <mini>Fn(Arg₁,  ...,  Argₙ)</mini>.
</description><examples/></constructor><constructor category="tasks" name="task::queue" variadic="false"><return type="task::queue"/><parameters><parameter name="MaxRunning" type="integer"/></parameters><description>Returns a new task queue which runs at most <mini>MaxRunning</mini> tasks at a time.
</description><examples/></constructor><constructor category="tasks" name="task::queue" variadic="false"><return type="task::queue"/><parameters><parameter name="MaxRunning" type="integer"/><parameter name="Callback" type="function"/></parameters><description>Returns a new task queue which runs at most <mini>MaxRunning</mini> tasks at a time.
</description><examples/></constructor></category><category name="table"><method category="table" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="table" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table::row"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="table" name=":AppendMethod" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="table"/></parameters><description/><examples/></method><method category="table" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="table::row"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="table" name=":capacity" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/></parameters><description/><examples/></method><method category="table" name=":columns" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/></parameters><description/><examples/></method><method category="table" name=":delete" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="table" name=":insert" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="list"/></parameters><description/><examples/></method><method category="table" name=":insert" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="names"/><parameter name="Arg₃" type="any"/></parameters><description/><examples/></method><method category="table" name=":insert" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="names"/></parameters><description/><examples/></method><method category="table" name=":insert" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="any"/></parameters><description/><examples/></method><method category="table" name=":length" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/></parameters><description/><examples/></method><method category="table" name=":offset" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/></parameters><description/><examples/></method><method category="table" name=":permute" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="permutation"/></parameters><description/><examples/></method><method category="table" name=":push" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="names"/></parameters><description/><examples/></method><method category="table" name=":push" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="list"/></parameters><description/><examples/></method><method category="table" name=":put" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="names"/></parameters><description/><examples/></method><method category="table" name=":put" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="list"/></parameters><description/><examples/></method><method category="table" name=":sort" variadic="false"><return type="Table"/><parameters><parameter name="Table" type="table"/><parameter name="By" type="function"/><parameter name="Order" type="function"/></parameters><description>Sorts <mini>Table</mini> in-place using <mini>Order(By(Rowᵢ),  By(Rowⱼ))</mini> as the comparison function (evaluating <mini>By(Rowᵢ)</mini> only once for each <mini>i</mini>).
</description><examples/></method><method category="table" name=":sort" variadic="false"><return type="Table"/><parameters><parameter name="Table" type="table"/><parameter name="Compare" type="function"/></parameters><description>Sorts <mini>Table</mini> in-place using <mini>Compare</mini> and returns it.
</description><examples/></method><type name="table::column"><parents/><description/><examples/></type><type name="table::row"><parents/><description/><examples/></type><type name="table"><parents><parent type="sequence"/></parents><description>A table is a set of named arrays. The arrays must have the same length.
</description><examples/></type><method category="table" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table::row"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="table" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="table" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="table"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="table" name="table" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="map"/></parameters><description/><examples/></method><method category="table" name="table" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="names"/><parameter name="Arg₂" type="type"/></parameters><description/><examples/></method><method category="table" name="table" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="names"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="table" name="table" variadic="false"><return type=""/><parameters/><description/><examples/></method></category><category name="struct"><method category="struct" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="instance"/></parameters><description/><examples/></method><method category="struct" name=":index" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="struct::getter"/></parameters><description/><examples/></method><type name="instance::field"><parents/><description/><examples/></type><type name="instance"><parents/><description/><examples/></type><type name="ref"><parents/><description/><examples/></type><type name="struct::getter::fast"><parents><parent type="function"/></parents><description/><examples/></type><type name="struct::getter"><parents><parent type="function"/></parents><description/><examples/></type><type name="struct"><parents><parent type="type"/></parents><description/><examples/></type><function name="mlstruct"><return/><parameters/><description/><examples/></function></category><category name="string"><description>Strings in Minilang can contain any sequence of bytes,  including <mini>0</mini> bytes.
Index and find methods however work on 
Every <mini>string</mini> is also an <mini>address</mini> so address methods can also be used to work at the byte level if necessary.

Indexing a string starts at <mini>1</mini>,  with the last character at <mini>String:length</mini>. Negative indices are counted form the end,  <mini>-1</mini> is the last character and <mini>-String:length</mini> is the first character.

When creating a substring,  the first index is inclusive and second index is exclusive. The index <mini>0</mini> refers to just beyond the last character and can be used to take a substring to the end of a string.
</description><method category="string" name="!=" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ != Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; != &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; != &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; != &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; != &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; != &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="string" name="!=" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ != Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; != r&quot;[A-Za-z0-9_]+&quot;</code><result>/[A-Za-z0-9_]+/</result><code>r&quot;[A-Za-z0-9_]+&quot; != r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result><code>r&quot;[0-9]+&quot; != r&quot;[0-9]+&quot;</code><result>nil</result></examples></method><method category="string" name="!?" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns <mini>String</mini> if it does not match <mini>Pattern</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;2022-03-08&quot; !? r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>nil</result><code>&quot;Not a date&quot; !? r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>&quot;Not a date&quot;</result></examples></method><method category="string" name="%" variadic="false"><return type="tuple[string]|nil"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Matches <mini>String</mini> with <mini>Pattern</mini> returning a tuple of the matched components,  or <mini>nil</mini> if the pattern does not match.
</description><examples><code>&quot;2022-03-08&quot; % r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>(2022-03-08, 2022, 03, 08)</result><code>&quot;Not a date&quot; % r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>nil</result></examples></method><method category="string" name="*" variadic="false"><return type="string"/><parameters><parameter name="N" type="integer"/><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> concatentated <mini>N</mini> times.
</description><examples><code>5 * &quot;abc&quot;</code><result>&quot;abcabcabcabcabc&quot;</result></examples></method><method category="string" name="*/" variadic="false"><return type="tuple[string,  string]"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Splits <mini>String</mini> at the last occurence of <mini>Pattern</mini> and returns the two substrings in a tuple.
</description><examples><code>&quot;2022/03/08&quot; */ r&quot;[/-]&quot;</code><result>(2022/03, 08)</result><code>&quot;2022-03-08&quot; */ r&quot;[/-]&quot;</code><result>(2022-03, 08)</result></examples></method><method category="string" name="*/" variadic="false"><return type="tuple[string,  string]"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="string"/></parameters><description>Splits <mini>String</mini> at the last occurence of <mini>Pattern</mini> and returns the two substrings in a tuple.
</description><examples><code>&quot;2022/03/08&quot; */ &quot;/&quot;</code><result>(2022/03, 08)</result></examples></method><method category="string" name="+" variadic="false"><return type="string"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Returns <mini>A</mini> and <mini>B</mini> concatentated.
</description><examples><code>&quot;Hello&quot; + &quot; &quot; + &quot;world&quot;</code><result>&quot;Hello world&quot;</result></examples></method><method category="string" name=".." variadic="false"><return type="string::interval"/><parameters><parameter name="Start" type="string"/><parameter name="Limit" type="string"/></parameters><description>Returns a interval from the first character of <mini>Start</mini> to the first character of <mini>Limit</mini> (inclusive).
</description><examples/></method><method category="string" name="/" variadic="false"><return type="list"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Index" type="integer"/></parameters><description>Returns a list of substrings from <mini>String</mini> by splitting around occurences of <mini>Pattern</mini>.
Only the <mini>Index</mini> subgroup matches are removed from the output substrings.
</description><examples><code>&quot;&lt;A&gt;-&lt;B&gt;-&lt;C&gt;&quot; / (r&quot;&gt;(-)&lt;&quot;, 1)</code><result>[&quot;&lt;A&gt;&quot;, &quot;&lt;B&gt;&quot;, &quot;&lt;C&gt;&quot;]</result></examples></method><method category="string" name="/" variadic="false"><return type="list"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="string"/></parameters><description>Returns a list of substrings from <mini>String</mini> by splitting around occurences of <mini>Pattern</mini>. Adjacent occurences of <mini>Pattern</mini> do not create empty strings.
</description><examples><code>&quot;The cat snored  as he slept&quot; / &quot; &quot;</code><result>[&quot;The&quot;, &quot;cat&quot;, &quot;snored&quot;, &quot;as&quot;, &quot;he&quot;, &quot;slept&quot;]</result><code>&quot;2022/03/08&quot; / &quot;/&quot;</code><result>[&quot;2022&quot;, &quot;03&quot;, &quot;08&quot;]</result></examples></method><method category="string" name="/" variadic="false"><return type="list"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns a list of substrings from <mini>String</mini> by splitting around occurences of <mini>Pattern</mini>.
If <mini>Pattern</mini> contains subgroups then only the subgroup matches are removed from the output substrings.
</description><examples><code>&quot;2022/03/08&quot; / r&quot;[/-]&quot;</code><result>[&quot;2022&quot;, &quot;03&quot;, &quot;08&quot;]</result><code>&quot;2022-03-08&quot; / r&quot;[/-]&quot;</code><result>[&quot;2022&quot;, &quot;03&quot;, &quot;08&quot;]</result></examples></method><method category="string" name="/*" variadic="false"><return type="tuple[string,  string]"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="string"/></parameters><description>Splits <mini>String</mini> at the first occurence of <mini>Pattern</mini> and returns the two substrings in a tuple.
</description><examples><code>&quot;2022/03/08&quot; /* &quot;/&quot;</code><result>(2022, 03/08)</result></examples></method><method category="string" name="/*" variadic="false"><return type="tuple[string,  string]"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Splits <mini>String</mini> at the first occurence of <mini>Pattern</mini> and returns the two substrings in a tuple.
</description><examples><code>&quot;2022/03/08&quot; /* r&quot;[/-]&quot;</code><result>(2022, 03/08)</result><code>&quot;2022-03-08&quot; /* r&quot;[/-]&quot;</code><result>(2022, 03-08)</result></examples></method><method category="string" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::properties"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="string" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="string" name=":after" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Delimiter" type="string"/></parameters><description>Returns the portion of <mini>String</mini> after the 1st occurence of <mini>Delimiter</mini>,  or <mini>nil</mini> if no occurence if found.
</description><examples><code>&quot;2022/03/08&quot;:after(&quot;/&quot;)</code><result>&quot;03/08&quot;</result></examples></method><method category="string" name=":after" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Delimiter" type="string"/><parameter name="N" type="integer"/></parameters><description>Returns the portion of <mini>String</mini> after the <mini>N</mini>-th occurence of <mini>Delimiter</mini>,  or <mini>nil</mini> if no <mini>N</mini>-th occurence if found.
If <mini>N &lt; 0</mini> then occurences are counted from the end of <mini>String</mini>.
</description><examples><code>&quot;2022/03/08&quot;:after(&quot;/&quot;, 2)</code><result>&quot;08&quot;</result></examples></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="string::table"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="rational"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="string::property::value"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="decimal"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="function"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="string"/></parameters><description/><examples/></method><method category="string" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="regex"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="string" name=":before" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Delimiter" type="string"/></parameters><description>Returns the portion of <mini>String</mini> before the 1st occurence of <mini>Delimiter</mini>,  or <mini>nil</mini> if no occurence if found.
</description><examples><code>&quot;2022/03/08&quot;:before(&quot;/&quot;)</code><result>&quot;2022&quot;</result></examples></method><method category="string" name=":before" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Delimiter" type="string"/><parameter name="N" type="integer"/></parameters><description>Returns the portion of <mini>String</mini> before the <mini>N</mini>-th occurence of <mini>Delimiter</mini>,  or <mini>nil</mini> if no <mini>N</mini>-th occurence if found.
If <mini>N &lt; 0</mini> then occurences are counted from the end of <mini>String</mini>.
</description><examples><code>&quot;2022/03/08&quot;:before(&quot;/&quot;, 2)</code><result>&quot;2022/03&quot;</result></examples></method><method category="string" name=":char" variadic="false"><return type="string"/><parameters><parameter name="Codepoint" type="integer"/></parameters><description>Returns a UTF-8 string containing the character with unicode codepoint <mini>Codepoint</mini>.
</description><examples/></method><method category="string" name=":cname" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string"/></parameters><description/><examples/></method><method category="string" name=":code" variadic="false"><return type="integer"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the unicode codepoint of the first UTF-8 character of <mini>String</mini>.
</description><examples><code>&quot;A&quot;:code</code><result>65</result><code>&quot;😀️&quot;:code</code><result>128512</result></examples></method><method category="string" name=":const" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="buffer"/></parameters><description/><examples/></method><method category="string" name=":contains" variadic="false"><return type="string|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/></parameters><description>Returns the <mini>Haystack</mini> if it contains <mini>Pattern</mini> or <mini>nil</mini> otherwise.
</description><examples><code>&quot;The cat snored as he slept&quot;:contains(&quot;cat&quot;)</code><result>&quot;The cat snored as he slept&quot;</result><code>&quot;The cat snored as he slept&quot;:contains(&quot;dog&quot;)</code><result>nil</result></examples></method><method category="string" name=":contains" variadic="false"><return type="string|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns the <mini>Haystack</mini> if it contains <mini>Pattern</mini> or <mini>nil</mini> otherwise.
</description><examples><code>&quot;The cat snored as he slept&quot;:contains(r&quot;[a-z]{3}&quot;)</code><result>&quot;The cat snored as he slept&quot;</result><code>&quot;The cat snored as he slept&quot;:contains(r&quot;[0-9]+&quot;)</code><result>nil</result></examples></method><method category="string" name=":copy" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="buffer"/></parameters><description/><examples/></method><method category="string" name=":count" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::charset"/></parameters><description/><examples/></method><method category="string" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the number of UTF-8 characters in <mini>String</mini>. Use <mini>:size</mini> to get the number of bytes.
</description><examples><code>&quot;Hello world&quot;:count</code><result>11</result><code>&quot;Hello world&quot;:size</code><result>11</result><code>&quot;λ:😀 → 😺&quot;:count</code><result>7</result><code>&quot;λ:😀 → 😺&quot;:size</code><result>16</result></examples></method><method category="string" name=":ctype" variadic="false"><return type="string::ctype"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the unicode type of the first character of <mini>String</mini>.
</description><examples><code>map(&quot;To €2 á\n&quot; =&gt; (2, 2 -&gt; :ctype))</code><result>{&quot;T&quot; is Lu, &quot;o&quot; is Ll, &quot; &quot; is Zs, &quot;€&quot; is Sc, &quot;2&quot; is Nd, &quot;á&quot; is Ll, &quot;\n&quot; is Cc}</result></examples></method><method category="string" name=":describe" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::table"/></parameters><description/><examples/></method><method category="string" name=":ends" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Suffix" type="string"/></parameters><description>Returns <mini>String</mini> if it ends with <mini>Suffix</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello world&quot;:ends(&quot;world&quot;)</code><result>&quot;Hello world&quot;</result><code>&quot;Hello world&quot;:ends(&quot;cake&quot;)</code><result>nil</result></examples></method><method category="string" name=":escape" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> with white space,  quotes and backslashes replaced by escape sequences.
</description><examples><code>&quot;\t\&quot;Text\&quot;\r\n&quot;:escape</code><result>&quot;\\t\\\&quot;Text\\\&quot;\\r\\n&quot;</result></examples></method><method category="string" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/></parameters><description>Returns the index of the first occurence of <mini>Needle</mini> in <mini>Haystack</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find(&quot;cat&quot;)</code><result>5</result><code>&quot;The cat snored as he slept&quot;:find(&quot;dog&quot;)</code><result>nil</result></examples></method><method category="string" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/><parameter name="Start" type="integer"/></parameters><description>Returns the index of the first occurence of <mini>Needle</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find(&quot;s&quot;, 1)</code><result>9</result><code>&quot;The cat snored as he slept&quot;:find(&quot;s&quot;, 10)</code><result>17</result><code>&quot;The cat snored as he slept&quot;:find(&quot;s&quot;, -6)</code><result>22</result></examples></method><method category="string" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns the index of the first occurence of <mini>Pattern</mini> in <mini>Haystack</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find(r&quot;[a-z]{3}&quot;)</code><result>5</result><code>&quot;The cat snored as he slept&quot;:find(r&quot;[0-9]+&quot;)</code><result>nil</result></examples></method><method category="string" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Start" type="integer"/></parameters><description>Returns the index of the first occurence of <mini>Pattern</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find(r&quot;s[a-z]+&quot;, 1)</code><result>9</result><code>&quot;The cat snored as he slept&quot;:find(r&quot;s[a-z]+&quot;, 10)</code><result>22</result><code>&quot;The cat snored as he slept&quot;:find(r&quot;s[a-z]+&quot;, -6)</code><result>22</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/></parameters><description>Returns <mini>(Index,  Needle)</mini> where <mini>Index</mini> is the first occurence of <mini>Needle</mini> in <mini>Haystack</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(&quot;cat&quot;)</code><result>(5, cat)</result><code>&quot;The cat snored as he slept&quot;:find2(&quot;dog&quot;)</code><result>nil</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/><parameter name="Start" type="integer"/></parameters><description>Returns <mini>(Index,  Needle)</mini> where <mini>Index</mini> is the first occurence of <mini>Needle</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, 1)</code><result>(9, s)</result><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, 10)</code><result>(17, s)</result><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, -6)</code><result>(22, s)</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns <mini>(Index,  Match)</mini> where <mini>Index</mini> is the first occurence of <mini>Pattern</mini> in <mini>Haystack</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(r&quot;[a-z]{3}&quot;)</code><result>(5, cat)</result><code>&quot;The cat snored as he slept&quot;:find2(r&quot;[0-9]+&quot;)</code><result>nil</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Start" type="integer"/></parameters><description>Returns <mini>(Index,  Match)</mini> where <mini>Index</mini> is the first occurence of <mini>Pattern</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, 1)</code><result>(9, snored)</result><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, 10)</code><result>(22, slept)</result><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, -6)</code><result>(22, slept)</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Needle" type="string"/><parameter name="Start" type="tuple::integer::string"/></parameters><description>Returns <mini>(Index,  Needle)</mini> where <mini>Index</mini> is the first occurence of <mini>Needle</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, 1)</code><result>(9, s)</result><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, 10)</code><result>(17, s)</result><code>&quot;The cat snored as he slept&quot;:find2(&quot;s&quot;, -6)</code><result>(22, s)</result></examples></method><method category="string" name=":find2" variadic="false"><return type="tuple[integer, string]|nil"/><parameters><parameter name="Haystack" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Start" type="tuple::integer::string"/></parameters><description>Returns <mini>(Index,  Match)</mini> where <mini>Index</mini> is the first occurence of <mini>Pattern</mini> in <mini>Haystack</mini> at or after <mini>Start</mini>,  or <mini>nil</mini> if no occurence is found.
</description><examples><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, 1)</code><result>(9, snored)</result><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, 10)</code><result>(22, slept)</result><code>&quot;The cat snored as he slept&quot;:find2(r&quot;s[a-z]+&quot;, -6)</code><result>(22, slept)</result></examples></method><method category="string" name=":get" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/></parameters><description>Returns the contents of <mini>Buffer</mini> as a string and clears <mini>Buffer</mini>.
.. deprecated:: 2.5.0

   Use <mini>Buffer:rest</mini> instead.
</description><examples><code>let B := string::buffer()
B:write(&quot;Hello world&quot;)
B:get</code><result>&quot;Hello world&quot;</result><code>B:get</code><result>&quot;&quot;</result></examples></method><method category="string" name=":grow" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="sequence"/></parameters><description/><examples/></method><method category="string" name=":length" variadic="false"><return type="integer"/><parameters><parameter name="Buffer" type="string::buffer"/></parameters><description>Returns the number of bytes currently available in <mini>Buffer</mini>.
</description><examples><code>let B := string::buffer()
B:write(&quot;Hello world&quot;)
B:length</code><result>11</result></examples></method><method category="string" name=":length" variadic="false"><return type="integer"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the number of UTF-8 characters in <mini>String</mini>. Use <mini>:size</mini> to get the number of bytes.
</description><examples><code>&quot;Hello world&quot;:length</code><result>11</result><code>&quot;Hello world&quot;:size</code><result>11</result><code>&quot;λ:😀 → 😺&quot;:length</code><result>7</result><code>&quot;λ:😀 → 😺&quot;:size</code><result>16</result></examples></method><method category="string" name=":limit" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Length" type="integer"/></parameters><description>Returns the prefix of <mini>String</mini> limited to <mini>Length</mini>.
</description><examples><code>&quot;Hello world&quot;:limit(5)</code><result>&quot;Hello&quot;</result><code>&quot;Cake&quot;:limit(5)</code><result>&quot;Cake&quot;</result></examples></method><method category="string" name=":lower" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> with each character converted to lower case.
</description><examples><code>&quot;Hello World&quot;:lower</code><result>&quot;hello world&quot;</result></examples></method><method category="string" name=":ltrim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with characters in <mini>Chars</mini> removed from the start.
</description><examples><code>&quot; \t Hello \n&quot;:ltrim</code><result>&quot;Hello \n&quot;</result></examples></method><method category="string" name=":ltrim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Chars" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with characters in <mini>Chars</mini> removed from the start.
</description><examples><code>&quot; \t Hello \n&quot;:trim(&quot; \n&quot;)</code><result>&quot;\t Hello&quot;</result></examples></method><method category="string" name=":max" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property"/></parameters><description/><examples/></method><method category="string" name=":max" variadic="false"><return type="integer"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Returns <mini>max(A,  B)</mini>
</description><examples><code>&quot;Hello&quot;:max(&quot;World&quot;)</code><result>&quot;World&quot;</result><code>&quot;World&quot;:max(&quot;Hello&quot;)</code><result>&quot;World&quot;</result><code>&quot;abcd&quot;:max(&quot;abc&quot;)</code><result>&quot;abcd&quot;</result><code>&quot;abc&quot;:max(&quot;abcd&quot;)</code><result>&quot;abcd&quot;</result></examples></method><method category="string" name=":min" variadic="false"><return type="integer"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Returns <mini>min(A,  B)</mini>
</description><examples><code>&quot;Hello&quot;:min(&quot;World&quot;)</code><result>&quot;Hello&quot;</result><code>&quot;World&quot;:min(&quot;Hello&quot;)</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot;:min(&quot;abc&quot;)</code><result>&quot;abc&quot;</result><code>&quot;abc&quot;:min(&quot;abcd&quot;)</code><result>&quot;abc&quot;</result></examples></method><method category="string" name=":min" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property"/></parameters><description/><examples/></method><method category="string" name=":normalize" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Norm" type="string::norm"/></parameters><description>Returns a normalized copy of <mini>String</mini> using the normalizer specified by <mini>Norm</mini>.
</description><examples><code>let S := &quot;𝕥𝕖𝕩𝕥&quot;</code><result>&quot;𝕥𝕖𝕩𝕥&quot;</result><code>S:normalize(string::norm::NFD)</code><result>&quot;𝕥𝕖𝕩𝕥&quot;</result></examples></method><method category="string" name=":offset" variadic="false"><return type="integer"/><parameters><parameter name="String" type="string"/><parameter name="Index" type="integer"/></parameters><description>Returns the byte position of the <mini>Index</mini>-th character of <mini>String</mini>.
</description><examples><code>let S := &quot;λ:😀 → 😺&quot;
list(1 .. S:length, S:offset(_))</code><result>[0, 2, 3, 7, 8, 11, 12]</result></examples></method><method category="string" name=":pattern" variadic="false"><return type="string"/><parameters><parameter name="Regex" type="regex"/></parameters><description>Returns the pattern used to create <mini>Regex</mini>.
</description><examples><code>r&quot;[0-9]+&quot;:pattern</code><result>&quot;[0-9]+&quot;</result></examples></method><method category="string" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the number of UTF-8 characters in <mini>String</mini>. Use <mini>:size</mini> to get the number of bytes.
</description><examples><code>&quot;Hello world&quot;:count</code><result>11</result><code>&quot;Hello world&quot;:size</code><result>11</result><code>&quot;λ:😀 → 😺&quot;:count</code><result>7</result><code>&quot;λ:😀 → 😺&quot;:size</code><result>16</result></examples></method><method category="string" name=":put" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="buffer"/><parameter name="Arg₂" type="string::buffer"/></parameters><description/><examples/></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="I" type="integer"/><parameter name="J" type="integer"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with the <mini>String[I,  J]</mini> is replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace(1, 6, &quot;Goodbye&quot;)</code><result>&quot;Goodbye world&quot;</result><code>&quot;Hello world&quot;:replace(-6, 0, &quot;, how are you?&quot;)</code><result>&quot;Hello, how are you?&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="string"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with each occurence of <mini>Pattern</mini> replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace(&quot;l&quot;, &quot;bb&quot;)</code><result>&quot;Hebbbbo worbbd&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with each occurence of <mini>Pattern</mini> replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace(r&quot;l+&quot;, &quot;bb&quot;)</code><result>&quot;Hebbo worbbd&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Replacements" type="map"/></parameters><description>Each key in <mini>Replacements</mini> can be either a string or a regex. Each value in <mini>Replacements</mini> can be either a string or a function.
Returns a copy of <mini>String</mini> with each matching string or regex from <mini>Replacements</mini> replaced with the corresponding value. Functions are called with the matched string or regex subpatterns.
</description><examples><code>&quot;the dog snored as he slept&quot;:replace({
   r&quot; ([a-z])&quot; is fun(Match, A) &apos;-{A:upper}&apos;,
   &quot;nor&quot; is &quot;narl&quot;
})</code><result>&quot;the-Dog-Snarled-As-He-Slept&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Fn" type="function"/></parameters><description>Returns a copy of <mini>String</mini> with each occurence of <mini>Pattern</mini> replaced by <mini>Fn(Match,  Sub₁,  ...,  Subₙ)</mini> where <mini>Match</mini> is the actual matched text and <mini>Subᵢ</mini> are the matched subpatterns.
</description><examples><code>&quot;the cat snored as he slept&quot;:replace(r&quot; ([a-z])&quot;, fun(Match, A) &apos;-{A:upper}&apos;)</code><result>&quot;the-Cat-Snored-As-He-Slept&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="I" type="integer"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with the <mini>String[I]</mini> is replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace(6, &quot;_&quot;)</code><result>&quot;Hello_world&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="I" type="integer"/><parameter name="Fn" type="function"/></parameters><description>Returns a copy of <mini>String</mini> with the <mini>String[I]</mini> is replaced by <mini>Fn(String[I])</mini>.
</description><examples><code>&quot;hello world&quot;:replace(1, :upper)</code><result>&quot;Hello world&quot;</result></examples></method><method category="string" name=":replace" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="I" type="integer"/><parameter name="Fn" type="integer"/><parameter name="Arg₄" type="function"/></parameters><description>Returns a copy of <mini>String</mini> with the <mini>String[I,  J]</mini> is replaced by <mini>Fn(String[I,  J])</mini>.
</description><examples><code>&quot;hello world&quot;:replace(1, 6, :upper)</code><result>&quot;HELLO world&quot;</result></examples></method><method category="string" name=":replace2" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="string"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with each occurence of <mini>Pattern</mini> replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace2(&quot;l&quot;, &quot;bb&quot;)</code><result>(Hebbbbo worbbd, 3)</result></examples></method><method category="string" name=":replace2" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Replacements" type="map"/></parameters><description>Each key in <mini>Replacements</mini> can be either a string or a regex. Each value in <mini>Replacements</mini> can be either a string or a function.
Returns a copy of <mini>String</mini> with each matching string or regex from <mini>Replacements</mini> replaced with the corresponding value. Functions are called with the matched string or regex subpatterns.
</description><examples><code>&quot;the dog snored as he slept&quot;:replace2({
   r&quot; ([a-z])&quot; is fun(Match, A) &apos;-{A:upper}&apos;,
   &quot;nor&quot; is &quot;narl&quot;
})</code><result>(the-Dog-Snarled-As-He-Slept, 6)</result></examples></method><method category="string" name=":replace2" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/><parameter name="Replacement" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with each occurence of <mini>Pattern</mini> replaced by <mini>Replacement</mini>.
</description><examples><code>&quot;Hello world&quot;:replace2(r&quot;l+&quot;, &quot;bb&quot;)</code><result>(Hebbo worbbd, 2)</result></examples></method><method category="string" name=":rest" variadic="false"><return type="string"/><parameters><parameter name="Buffer" type="string::buffer"/></parameters><description>Returns the contents of <mini>Buffer</mini> as a string and clears <mini>Buffer</mini>.
</description><examples><code>let B := string::buffer()
B:write(&quot;Hello world&quot;)
B:rest</code><result>&quot;Hello world&quot;</result><code>B:rest</code><result>&quot;&quot;</result></examples></method><method category="string" name=":reverse" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns a string with the characters in <mini>String</mini> reversed.
</description><examples><code>&quot;Hello world&quot;:reverse</code><result>&quot;dlrow olleH&quot;</result></examples></method><method category="string" name=":rtrim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with characters in <mini>Chars</mini> removed from the end.
</description><examples><code>&quot; \t Hello \n&quot;:rtrim</code><result>&quot; \t Hello&quot;</result></examples></method><method category="string" name=":rtrim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Chars" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with characters in <mini>Chars</mini> removed from the end.
</description><examples><code>&quot; \t Hello \n&quot;:rtrim(&quot; \n&quot;)</code><result>&quot; \t Hello&quot;</result></examples></method><method category="string" name=":sha256" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></method><method category="string" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::table"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="integer"/><parameter name="Arg₄" type="string"/></parameters><description/><examples/></method><method category="string" name=":starts" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns <mini>String</mini> if it starts with <mini>Pattern</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello world&quot;:starts(r&quot;[A-Z]&quot;)</code><result>&quot;Hello world&quot;</result><code>&quot;Hello world&quot;:starts(r&quot;[0-9]&quot;)</code><result>nil</result></examples></method><method category="string" name=":starts" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Prefix" type="string"/></parameters><description>Returns <mini>String</mini> if it starts with <mini>Prefix</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello world&quot;:starts(&quot;Hello&quot;)</code><result>&quot;Hello world&quot;</result><code>&quot;Hello world&quot;:starts(&quot;cake&quot;)</code><result>nil</result></examples></method><method category="string" name=":title" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> with the first character and each character after whitespace converted to upper case and each other case converted to lower case.
</description><examples><code>&quot;hello world&quot;:title</code><result>&quot;Hello World&quot;</result><code>&quot;HELLO WORLD&quot;:title</code><result>&quot;Hello World&quot;</result></examples></method><method category="string" name=":trim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Chars" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with characters in <mini>Chars</mini> removed from both ends.
</description><examples><code>&quot; \t Hello \n&quot;:trim(&quot; \n&quot;)</code><result>&quot;\t Hello&quot;</result></examples></method><method category="string" name=":trim" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns a copy of <mini>String</mini> with whitespace removed from both ends.
</description><examples><code>&quot; \t Hello \n&quot;:trim</code><result>&quot;Hello&quot;</result></examples></method><method category="string" name=":unread" variadic="false"><return type="string::buffer"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Bytes" type="address"/></parameters><description>Inserts the contents of <mini>Bytes</mini> at the start of <mini>Buffer</mini>.
</description><examples/></method><method category="string" name=":upper" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>String</mini> with each character converted to upper case.
</description><examples><code>&quot;Hello World&quot;:upper</code><result>&quot;HELLO WORLD&quot;</result></examples></method><method category="string" name=":utf8" variadic="false"><return type="string"/><parameters><parameter name="Codepoint" type="integer"/></parameters><description>Returns a UTF-8 string containing the character with unicode codepoint <mini>Codepoint</mini>.
</description><examples/></method><method category="string" name=":utf8" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string"/></parameters><description/><examples/></method><method category="string" name=":write" variadic="true"><return type="integer"/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value₁, ..., Valueₙ" type="any"/></parameters><description>Writes each <mini>Valueᵢ</mini> in turn to <mini>Buffer</mini>.
</description><examples><code>let B := string::buffer()
B:write(&quot;1 + 1 = &quot;, 1 + 1)
B:rest</code><result>&quot;1 + 1 = 2&quot;</result></examples></method><method category="string" name="&lt;" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; &lt; r&quot;[A-Za-z0-9_]+&quot;</code><result>/[A-Za-z0-9_]+/</result><code>r&quot;[A-Za-z0-9_]+&quot; &lt; r&quot;[0-9]+&quot;</code><result>nil</result><code>r&quot;[0-9]+&quot; &lt; r&quot;[0-9]+&quot;</code><result>nil</result></examples></method><method category="string" name="&lt;" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &lt; &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; &lt; &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; &lt; &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; &lt; &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; &lt; &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="string" name="&lt;=" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; &lt;= r&quot;[A-Za-z0-9_]+&quot;</code><result>/[A-Za-z0-9_]+/</result><code>r&quot;[A-Za-z0-9_]+&quot; &lt;= r&quot;[0-9]+&quot;</code><result>nil</result><code>r&quot;[0-9]+&quot; &lt;= r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result></examples></method><method category="string" name="&lt;=" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &lt;= &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; &lt;= &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; &lt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; &lt;= &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; &lt;= &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="string" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="regex"/><parameter name="B" type="regex"/></parameters><description>Compares <mini>A</mini> and <mini>B</mini> lexicographically and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> respectively. Mainly for using regular expressions as keys in maps.
</description><examples><code>r&quot;[0-9]+&quot; &lt;&gt; r&quot;[A-Za-z0-9_]+&quot;</code><result>-1</result><code>r&quot;[A-Za-z0-9_]+&quot; &lt;&gt; r&quot;[0-9]+&quot;</code><result>1</result><code>r&quot;[0-9]+&quot; &lt;&gt; r&quot;[0-9]+&quot;</code><result>0</result></examples></method><method category="string" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Compares <mini>A</mini> and <mini>B</mini> lexicographically and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> respectively.
</description><examples><code>&quot;Hello&quot; &lt;&gt; &quot;World&quot;</code><result>-1</result><code>&quot;World&quot; &lt;&gt; &quot;Hello&quot;</code><result>1</result><code>&quot;Hello&quot; &lt;&gt; &quot;Hello&quot;</code><result>0</result><code>&quot;abcd&quot; &lt;&gt; &quot;abc&quot;</code><result>1</result><code>&quot;abc&quot; &lt;&gt; &quot;abcd&quot;</code><result>-1</result></examples></method><method category="string" name="=" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ = Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; = r&quot;[A-Za-z0-9_]+&quot;</code><result>nil</result><code>r&quot;[A-Za-z0-9_]+&quot; = r&quot;[0-9]+&quot;</code><result>nil</result><code>r&quot;[0-9]+&quot; = r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result></examples></method><method category="string" name="=" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ = Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; = &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; = &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; = &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; = &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; = &quot;abcd&quot;</code><result>nil</result></examples></method><method category="string" name="&gt;" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; &gt; r&quot;[A-Za-z0-9_]+&quot;</code><result>nil</result><code>r&quot;[A-Za-z0-9_]+&quot; &gt; r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result><code>r&quot;[0-9]+&quot; &gt; r&quot;[0-9]+&quot;</code><result>nil</result></examples></method><method category="string" name="&gt;" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &gt; &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; &gt; &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; &gt; &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; &gt; &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; &gt; &quot;abcd&quot;</code><result>nil</result></examples></method><method category="string" name="&gt;=" variadic="false"><return type="string|nil"/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &gt;= &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; &gt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; &gt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; &gt;= &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; &gt;= &quot;abcd&quot;</code><result>nil</result></examples></method><method category="string" name="&gt;=" variadic="false"><return type="regex|nil"/><parameters><parameter name="Arg₁" type="regex"/><parameter name="Arg₂" type="regex"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>r&quot;[0-9]+&quot; &gt;= r&quot;[A-Za-z0-9_]+&quot;</code><result>nil</result><code>r&quot;[A-Za-z0-9_]+&quot; &gt;= r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result><code>r&quot;[0-9]+&quot; &gt;= r&quot;[0-9]+&quot;</code><result>/[0-9]+/</result></examples></method><method category="string" name="?" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Pattern" type="regex"/></parameters><description>Returns <mini>String</mini> if it matches <mini>Pattern</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;2022-03-08&quot; ? r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>&quot;2022-03-08&quot;</result><code>&quot;Not a date&quot; ? r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</code><result>nil</result></examples></method><type name="byte::order"><parents><parent type="enum"/></parents><description>* <mini>::LittleEndian</mini>
* <mini>::BigEndian</mini>
</description><examples/></type><type name="regex"><parents><parent type="function"/></parents><description>A regular expression.
</description><examples/></type><type name="string::buffer"><parents><parent type="stream"/></parents><description>A string buffer that automatically grows and shrinks as required.
</description><examples/></type><type name="string::charset"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="string::interval"><parents><parent type="integer::interval"/></parents><description/><examples/></type><value name="MLStringProperties"><type name="string::properties"/><description/></value><type name="string::property"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="string"><parents><parent type="address"/><parent type="sequence"/></parents><description>A string of characters in UTF-8 encoding.
</description><examples/></type><type name="string::table"><parents/><description/><examples/></type><method category="string" name="[]" variadic="false"><return type="string"/><parameters><parameter name="String" type="string"/><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the substring of <mini>String</mini> corresponding to <mini>Interval</mini> inclusively.
</description><examples/></method><method category="string" name="[]" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Index" type="integer"/></parameters><description>Returns the substring of <mini>String</mini> of length 1 at <mini>Index</mini>.
</description><examples><code>let S := &quot;λ:😀 → 😺&quot;
map(-7 .. 7 =&gt; (2, 2 -&gt; S[_]))</code><result>{-7 is &quot;λ&quot;, -6 is &quot;:&quot;, -5 is &quot;😀&quot;, -4 is &quot; &quot;, -3 is &quot;→&quot;, -2 is &quot; &quot;, -1 is &quot;😺&quot;, 0, 1 is &quot;λ&quot;, 2 is &quot;:&quot;, 3 is &quot;😀&quot;, 4 is &quot; &quot;, 5 is &quot;→&quot;, 6 is &quot; &quot;, 7 is &quot;😺&quot;}</result></examples></method><method category="string" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="string" name="[]" variadic="false"><return type="string|nil"/><parameters><parameter name="String" type="string"/><parameter name="Start" type="integer"/><parameter name="End" type="integer"/></parameters><description>Returns the substring of <mini>String</mini> from <mini>Start</mini> to <mini>End - 1</mini> inclusively.
</description><examples/></method><method category="string" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::charset"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="string" name="[]" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><function name="mlstringbuffercount"><return/><parameters/><description/><examples/></function><function name="mlstringcheckcache"><return/><parameters/><description/><examples/></function><constructor name="regex"><return/><parameters><parameter name="String" type="string"/></parameters><description>Compiles <mini>String</mini> as a regular expression. Returns an error if <mini>String</mini> is not a valid regular expression.
</description><examples><code>regex(&quot;[0-9]+&quot;)</code><result>/[0-9]+/</result><code>regex(&quot;[0-9&quot;)</code><result>error(&quot;RegexError&quot;, &quot;Missing &apos;]&apos;&quot;)</result></examples></constructor><function name="regex::escape"><return/><parameters><parameter name="String" type="string"/></parameters><description>Escapes characters in <mini>String</mini> that are treated specially in regular expressions.
</description><examples><code>regex::escape(&quot;Word (?)\n&quot;)</code><result>&quot;Word \\(\\?\\)\\n&quot;</result></examples></function><constructor name="string"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns a representation of <mini>Value</mini> as a string.
</description><examples><code>string(100)</code><result>&quot;100&quot;</result><code>string(nil)</code><result>&quot;nil&quot;</result><code>string(&quot;Hello world!\n&quot;)</code><result>&quot;Hello world!\n&quot;</result><code>string([1, 2, 3])</code><result>&quot;[1, 2, 3]&quot;</result></examples></constructor><type name="string::buffer"><parents/><description>A string buffer that automatically grows and shrinks as required.
</description><examples/></type><constructor name="string::buffer"><return/><parameters/><description>Returns a new <mini>string::buffer</mini>
</description><examples/></constructor><type name="string::ctype"><parents><parent type="enum"/></parents><description>* <mini>::Cn</mini> - General Other Types
* <mini>::Lu</mini> - Uppercase Letter
* <mini>::Ll</mini> - Lowercase Letter
* <mini>::Lt</mini> - Titlecase Letter
* <mini>::Lm</mini> - Modifier Letter
* <mini>::Lo</mini> - Other Letter
* <mini>::Mn</mini> - Non Spacing Mark
* <mini>::Me</mini> - Enclosing Mark
* <mini>::Mc</mini> - Combining Spacing Mark
* <mini>::Nd</mini> - Decimal Digit Number
* <mini>::Nl</mini> - Letter Number
* <mini>::No</mini> - Other Number
* <mini>::Zs</mini> - Space Separator
* <mini>::Zl</mini> - Line Separator
* <mini>::Zp</mini> - Paragraph Separator
* <mini>::Cc</mini> - Control Char
* <mini>::Cf</mini> - Format Char
* <mini>::Co</mini> - Private Use Char
* <mini>::Cs</mini> - Surrogate
* <mini>::Pd</mini> - Dash Punctuation
* <mini>::Ps</mini> - Start Punctuation
* <mini>::Pe</mini> - End Punctuation
* <mini>::Pc</mini> - Connector Punctuation
* <mini>::Po</mini> - Other Punctuation
* <mini>::Sm</mini> - Math Symbol
* <mini>::Sc</mini> - Currency Symbol
* <mini>::Sk</mini> - Modifier Symbol
* <mini>::So</mini> - Other Symbol
* <mini>::Pi</mini> - Initial Punctuation
* <mini>::Pf</mini> - Final Punctuation
</description><examples/></type><function name="string::escape"><return/><parameters><parameter name="String" type="string"/></parameters><description>Escapes characters in <mini>String</mini>.
</description><examples><code>string::escape(&quot;\&apos;Hello\nworld!\&apos;&quot;)</code><result>&quot;\\\&apos;Hello\\nworld!\\\&apos;&quot;</result></examples></function><type name="string::norm"><parents><parent type="enum"/></parents><description>* <mini>::NFC</mini>
* <mini>::NFD</mini>
* <mini>::NFKC</mini>
* <mini>::NFKD</mini>
</description><examples/></type><function name="string::switch"><return/><parameters><parameter name="Cases..." type="string|regex"/></parameters><description>Implements <mini>switch</mini> for string values. Case values must be strings or regular expressions.
</description><examples><code>for Pet in [&quot;cat&quot;, &quot;dog&quot;, &quot;mouse&quot;, &quot;fox&quot;] do
   switch Pet: string
      case &quot;cat&quot; do
         print(&quot;Meow!\n&quot;)
      case &quot;dog&quot; do
         print(&quot;Woof!\n&quot;)
      case &quot;mouse&quot; do
         print(&quot;Squeak!\n&quot;)
      else
         print(&quot;???!&quot;)
      end
end</code><result>nil</result><output>Meow!
Woof!
Squeak!
???!</output></examples></function><method category="string" name="stringcharset" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::property::value"/></parameters><description/><examples/></method><method category="string" name="stringtable" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string"/></parameters><description/><examples/></method><method category="string" name="stringtable" variadic="false"><return type=""/><parameters/><description/><examples/></method><method category="string" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Returns the edit distance between <mini>A</mini> and <mini>B</mini>.
</description><examples><code>&quot;cake&quot; ~ &quot;cat&quot;</code><result>2</result><code>&quot;yell&quot; ~ &quot;hello&quot;</code><result>2</result><code>&quot;say&quot; ~ &quot;goodbye&quot;</code><result>6</result><code>&quot;goodbye&quot; ~ &quot;say&quot;</code><result>6</result><code>&quot;λ:😀 → Y&quot; ~ &quot;λ:X → 😺&quot;</code><result>2</result></examples></method><method category="string" name="~&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="string"/><parameter name="B" type="string"/></parameters><description>Returns an asymmetric edit distance from <mini>A</mini> to <mini>B</mini>.
</description><examples><code>&quot;cake&quot; ~&gt; &quot;cat&quot;</code><result>1</result><code>&quot;yell&quot; ~&gt; &quot;hello&quot;</code><result>2</result><code>&quot;say&quot; ~&gt; &quot;goodbye&quot;</code><result>6</result><code>&quot;goodbye&quot; ~&gt; &quot;say&quot;</code><result>3</result><code>&quot;λ:😀 → Y&quot; ~&gt; &quot;λ:X → 😺&quot;</code><result>4</result></examples></method></category><category name="address"><method category="address" name="!=" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> != the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; != &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; != &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; != &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; != &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; != &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="address" name="+" variadic="false"><return type="address"/><parameters><parameter name="Address" type="address"/><parameter name="Offset" type="integer"/></parameters><description>Returns the address at offset <mini>Offset</mini> from <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A + 4</code><result>&lt;9:6F20776F726C64210A&gt;</result></examples></method><method category="address" name="-" variadic="false"><return type="integer"/><parameters><parameter name="Address₁" type="address"/><parameter name="Address₂" type="address"/></parameters><description>Returns the offset from <mini>Address₂</mini> to <mini>Address₁</mini>,  provided <mini>Address₂</mini> is visible to <mini>Address₁</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)
let B := A + 4
B - A</code><result>4</result><code>address(&quot;world!\n&quot;) - A</code><result>error(&quot;ValueError&quot;, &quot;Addresses are not from same base&quot;)</result></examples></method><method category="address" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="address"/></parameters><description>Appends the contents of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="address" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="address"/><parameter name="Needle" type="address"/></parameters><description>Returns the offset of the first occurence of the bytes of <mini>Needle</mini> in <mini>Haystack</mini> or <mini>nil</mini> is no occurence is found.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:find(&quot;world&quot;)</code><result>6</result><code>A:find(&quot;other&quot;)</code><result>nil</result></examples></method><method category="address" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Haystack" type="address"/><parameter name="Needle" type="address"/><parameter name="Start" type="integer"/></parameters><description>Returns the offset of the first occurence of the bytes of <mini>Needle</mini> in <mini>Haystack</mini> or <mini>nil</mini> is no occurence is found.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:find(&quot;world&quot;)</code><result>6</result><code>A:find(&quot;other&quot;)</code><result>nil</result></examples></method><method category="address" name=":get16" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the signed 16-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get16</code><result>25928</result></examples></method><method category="address" name=":get16" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="byte::order"/></parameters><description>Returns the signed 16-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get16(address::LE)</code><result>25928</result><code>A:get16(address::BE)</code><result>18533</result></examples></method><method category="address" name=":get32" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the signed 32-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get32</code><result>1819043144</result></examples></method><method category="address" name=":get32" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="byte::order"/></parameters><description>Returns the signed 32-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get32(address::LE)</code><result>1819043144</result><code>A:get32(address::BE)</code><result>1214606444</result></examples></method><method category="address" name=":get64" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the signed 64-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get64</code><result>8031924123371070792</result></examples></method><method category="address" name=":get64" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="byte::order"/></parameters><description>Returns the signed 64-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get64(address::LE)</code><result>8031924123371070792</result><code>A:get64(address::BE)</code><result>5216694956355254127</result></examples></method><method category="address" name=":get8" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the signed 8-bit value at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:get8</code><result>72</result></examples></method><method category="address" name=":getf32" variadic="false"><return type="real"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the 32-bit floating point value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getf32</code><result>1.14313912243758e+27</result></examples></method><method category="address" name=":getf32" variadic="false"><return type="real"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="byte::order"/></parameters><description>Returns the 32-bit floating point value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getf32(address::LE)</code><result>1.14313912243758e+27</result><code>A:getf32(address::BE)</code><result>234929.6875</result></examples></method><method category="address" name=":getf64" variadic="false"><return type="real"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="byte::order"/></parameters><description>Returns the 64-bit floating point value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getf64(address::LE)</code><result>8.76577647882785e+228</result><code>A:getf64(address::BE)</code><result>5.83203948069194e+40</result></examples></method><method category="address" name=":getf64" variadic="false"><return type="real"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the 64-bit floating point value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getf64</code><result>8.76577647882785e+228</result></examples></method><method category="address" name=":gets" variadic="false"><return type="string"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the string consisting of the bytes at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:gets</code><result>&quot;Hello world!\n&quot;</result></examples></method><method category="address" name=":gets" variadic="false"><return type="string"/><parameters><parameter name="Address" type="address"/><parameter name="Size" type="integer"/></parameters><description>Returns the string consisting of the first <mini>Size</mini> bytes at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:gets(5)</code><result>&quot;Hello&quot;</result></examples></method><method category="address" name=":getu16" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="any"/></parameters><description>Returns the unsigned 16-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu16</code><result>25928</result></examples></method><method category="address" name=":getu16" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Arg₂" type="byte::order"/></parameters><description>Returns the unsigned 16-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu16(address::LE)</code><result>25928</result><code>A:getu16(address::BE)</code><result>18533</result></examples></method><method category="address" name=":getu32" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="any"/></parameters><description>Returns the unsigned 32-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu32</code><result>1819043144</result></examples></method><method category="address" name=":getu32" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Arg₂" type="byte::order"/></parameters><description>Returns the unsigned 32-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu32(address::LE)</code><result>1819043144</result><code>A:getu32(address::BE)</code><result>1214606444</result></examples></method><method category="address" name=":getu64" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Arg₂" type="byte::order"/></parameters><description>Returns the unsigned 64-bit value at <mini>Address</mini>. Uses <mini>Order</mini> byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu64(address::LE)</code><result>8031924123371070792</result><code>A:getu64(address::BE)</code><result>5216694956355254127</result></examples></method><method category="address" name=":getu64" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/><parameter name="Order" type="any"/></parameters><description>Returns the unsigned 64-bit value at <mini>Address</mini>. Uses the platform byte order.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu64</code><result>8031924123371070792</result></examples></method><method category="address" name=":getu8" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the unsigned 8-bit value at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:getu8</code><result>72</result></examples></method><method category="address" name=":length" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the number of bytes visible at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:length</code><result>13</result></examples></method><method category="address" name=":size" variadic="false"><return type="integer"/><parameters><parameter name="Address" type="address"/></parameters><description>Returns the number of bytes visible at <mini>Address</mini>.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A:size</code><result>13</result></examples></method><method category="address" name="&lt;" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> &lt; the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &lt; &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; &lt; &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; &lt; &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; &lt; &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; &lt; &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="address" name="&lt;=" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> &lt;= the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &lt;= &quot;World&quot;</code><result>&quot;World&quot;</result><code>&quot;World&quot; &lt;= &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; &lt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; &lt;= &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; &lt;= &quot;abcd&quot;</code><result>&quot;abcd&quot;</result></examples></method><method category="address" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="address"/><parameter name="B" type="address"/></parameters><description>Compares the bytes at <mini>A</mini> and <mini>B</mini> lexicographically and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> respectively.
</description><examples><code>&quot;Hello&quot; &lt;&gt; &quot;World&quot;</code><result>-1</result><code>&quot;World&quot; &lt;&gt; &quot;Hello&quot;</code><result>1</result><code>&quot;Hello&quot; &lt;&gt; &quot;Hello&quot;</code><result>0</result><code>&quot;abcd&quot; &lt;&gt; &quot;abc&quot;</code><result>1</result><code>&quot;abc&quot; &lt;&gt; &quot;abcd&quot;</code><result>-1</result></examples></method><method category="address" name="=" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> = the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; = &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; = &quot;Hello&quot;</code><result>nil</result><code>&quot;Hello&quot; = &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; = &quot;abc&quot;</code><result>nil</result><code>&quot;abc&quot; = &quot;abcd&quot;</code><result>nil</result></examples></method><method category="address" name="&gt;" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> &gt; the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &gt; &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; &gt; &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; &gt; &quot;Hello&quot;</code><result>nil</result><code>&quot;abcd&quot; &gt; &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; &gt; &quot;abcd&quot;</code><result>nil</result></examples></method><method category="address" name="&gt;=" variadic="false"><return type="address|nil"/><parameters><parameter name="Arg₁" type="address"/><parameter name="Arg₂" type="address"/></parameters><description>Returns <mini>Arg₂</mini> if the bytes at <mini>Arg₁</mini> &gt;= the bytes at <mini>Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>&quot;Hello&quot; &gt;= &quot;World&quot;</code><result>nil</result><code>&quot;World&quot; &gt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;Hello&quot; &gt;= &quot;Hello&quot;</code><result>&quot;Hello&quot;</result><code>&quot;abcd&quot; &gt;= &quot;abc&quot;</code><result>&quot;abc&quot;</result><code>&quot;abc&quot; &gt;= &quot;abcd&quot;</code><result>nil</result></examples></method><method category="address" name="@" variadic="false"><return type="address"/><parameters><parameter name="Address" type="address"/><parameter name="Offset" type="integer"/><parameter name="Length" type="integer"/></parameters><description>Returns the address at offset <mini>Offset</mini> from <mini>Address</mini> limited to <mini>Length</mini> bytes.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A @ (4, 4)</code><result>&lt;4:6F20776F&gt;</result></examples></method><method category="address" name="@" variadic="false"><return type="address"/><parameters><parameter name="Address" type="address"/><parameter name="Length" type="integer"/></parameters><description>Returns the same address as <mini>Address</mini>,  limited to <mini>Length</mini> bytes.
</description><examples><code>let A := address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result><code>A @ 5</code><result>&lt;5:48656C6C6F&gt;</result></examples></method><type name="address"><parents/><description>An address represents a read-only bounded section of memory.
</description><examples/></type><constructor category="address" name="address" variadic="false"><return type="address"/><parameters><parameter name="String" type="string"/></parameters><description>Returns an address view of <mini>String</mini>.
</description><examples><code>address(&quot;Hello world!\n&quot;)</code><result>&lt;13:48656C6C6F20776F726C64210A&gt;</result></examples></constructor></category><category name="buffer"><method category="buffer" name=":buffer" variadic="false"><return type="buffer"/><parameters><parameter name="Length" type="integer"/></parameters><description>Allocates a new buffer with <mini>Length</mini> bytes.
</description><examples><code>buffer(16)</code><result>&lt;16:00000000000000000000000000000000&gt;</result></examples></method><method category="buffer" name=":buffer" variadic="false"><return type="buffer"/><parameters><parameter name="Source" type="address"/></parameters><description>Allocates a new buffer with the same size and initial contents as <mini>Source</mini>.
</description><examples><code>buffer(&quot;Hello world&quot;)</code><result>&lt;11:48656C6C6F20776F726C64&gt;</result></examples></method><method category="buffer" name=":put" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="address"/></parameters><description>Puts the bytes of <mini>Value</mini> in <mini>Buffer</mini>.
</description><examples><code>buffer(10):put(&quot;Hello\0\0\0\0\0&quot;)</code><result>&lt;10:48656C6C6F0000000000&gt;</result></examples></method><method category="buffer" name=":put16" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 16-bit signed value. Uses the platform byte order.
</description><examples><code>buffer(2):put16(12345)</code><result>&lt;2:3930&gt;</result></examples></method><method category="buffer" name=":put16" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 16-bit signed value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(2):put16(12345, address::LE)</code><result>&lt;2:3930&gt;</result><code>buffer(2):put16(12345, address::BE)</code><result>&lt;2:3039&gt;</result></examples></method><method category="buffer" name=":put32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 32-bit signed value. Uses the platform byte order.
</description><examples><code>buffer(4):put32(12345)</code><result>&lt;4:39300000&gt;</result></examples></method><method category="buffer" name=":put32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 32-bit signed value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(4):put32(12345, address::LE)</code><result>&lt;4:39300000&gt;</result><code>buffer(4):put32(12345, address::BE)</code><result>&lt;4:00003039&gt;</result></examples></method><method category="buffer" name=":put64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 64-bit signed value. Uses the platform byte order.
</description><examples><code>buffer(8):put64(12345)</code><result>&lt;8:3930000000000000&gt;</result></examples></method><method category="buffer" name=":put64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 64-bit signed value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(8):put64(12345, address::LE)</code><result>&lt;8:3930000000000000&gt;</result><code>buffer(8):put64(12345, address::BE)</code><result>&lt;8:0000000000003039&gt;</result></examples></method><method category="buffer" name=":put8" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 8-bit signed value.
</description><examples><code>buffer(8):put8(64)</code><result>&lt;8:4000000000000000&gt;</result></examples></method><method category="buffer" name=":putf32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="real"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as a 32-bit floating point value. Uses the platform byte order.
</description><examples><code>buffer(4):putf32(1.23456789)</code><result>&lt;4:52069E3F&gt;</result></examples></method><method category="buffer" name=":putf32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="real"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as a 32-bit floating point value. Uses little endian byte order.
</description><examples><code>buffer(4):putf32(1.23456789, address::LE)</code><result>&lt;4:52069E3F&gt;</result><code>buffer(4):putf32(1.23456789, address::BE)</code><result>&lt;4:3F9E0652&gt;</result></examples></method><method category="buffer" name=":putf64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="real"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as a 64-bit floating point value. Uses the platform byte order.
</description><examples><code>buffer(8):putf64(1.23456789)</code><result>&lt;8:1BDE8342CAC0F33F&gt;</result></examples></method><method category="buffer" name=":putf64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="real"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as a 64-bit floating point value. Uses little endian byte order.
</description><examples><code>buffer(8):putf64(1.23456789, address::LE)</code><result>&lt;8:1BDE8342CAC0F33F&gt;</result><code>buffer(8):putf64(1.23456789, address::BE)</code><result>&lt;8:3FF3C0CA4283DE1B&gt;</result></examples></method><method category="buffer" name=":putu16" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 16-bit unsigned value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(2):putu16(12345, address::LE)</code><result>&lt;2:3930&gt;</result><code>buffer(2):putu16(12345, address::BE)</code><result>&lt;2:3039&gt;</result></examples></method><method category="buffer" name=":putu16" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 16-bit unsigned value. Uses the platform byte order.
</description><examples><code>buffer(2):putu16(12345)</code><result>&lt;2:3930&gt;</result></examples></method><method category="buffer" name=":putu32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 32-bit unsigned value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(4):putu32(12345, address::LE)</code><result>&lt;4:39300000&gt;</result><code>buffer(4):putu32(12345, address::BE)</code><result>&lt;4:00003039&gt;</result></examples></method><method category="buffer" name=":putu32" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 32-bit unsigned value. Uses the platform byte order.
</description><examples><code>buffer(4):putu32(12345)</code><result>&lt;4:39300000&gt;</result></examples></method><method category="buffer" name=":putu64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/><parameter name="Order" type="byte::order"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 64-bit unsigned value. Uses <mini>Order</mini> byte order.
</description><examples><code>buffer(8):putu64(12345, address::LE)</code><result>&lt;8:3930000000000000&gt;</result><code>buffer(8):putu64(12345, address::BE)</code><result>&lt;8:0000000000003039&gt;</result></examples></method><method category="buffer" name=":putu64" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 64-bit unsigned value. Uses the platform byte order.
</description><examples><code>buffer(8):putu64(12345)</code><result>&lt;8:3930000000000000&gt;</result></examples></method><method category="buffer" name=":putu8" variadic="false"><return type="buffer"/><parameters><parameter name="Buffer" type="buffer"/><parameter name="Value" type="integer"/></parameters><description>Puts <mini>Value</mini> in <mini>Buffer</mini> as an 8-bit unsigned value.
</description><examples><code>buffer(8):put8(64)</code><result>&lt;8:4000000000000000&gt;</result></examples></method><type name="buffer"><parents><parent type="address"/></parents><description>A buffer represents a writable bounded section of memory.
</description><examples/></type></category><category name="boolean"><method category="boolean" name="!=" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ != Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true != true</code><result>nil</result><code>true != false</code><result>false</result><code>false != true</code><result>true</result><code>false != false</code><result>nil</result></examples></method><method category="boolean" name="-" variadic="false"><return type="boolean"/><parameters><parameter name="Bool" type="boolean"/></parameters><description>Returns the logical inverse of <mini>Bool</mini>
</description><examples/></method><method category="boolean" name="/\" variadic="true"><return type="boolean"/><parameters><parameter name="Bool₁" type="boolean"/><parameter name="Bool₂" type="boolean"/></parameters><description>Returns the logical and of <mini>Bool₁</mini> and <mini>Bool₂</mini>.
</description><examples><code>true /\ true</code><result>true</result><code>true /\ false</code><result>false</result><code>false /\ true</code><result>false</result><code>false /\ false</code><result>false</result></examples></method><method category="boolean" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="boolean"/></parameters><description>Appends <mini>&quot;true&quot;</mini> or <mini>&quot;false&quot;</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="boolean" name="&lt;" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true &lt; true</code><result>nil</result><code>true &lt; false</code><result>nil</result><code>false &lt; true</code><result>true</result><code>false &lt; false</code><result>nil</result></examples></method><method category="boolean" name="&lt;=" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &lt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true &lt;= true</code><result>true</result><code>true &lt;= false</code><result>nil</result><code>false &lt;= true</code><result>true</result><code>false &lt;= false</code><result>false</result></examples></method><method category="boolean" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Bool₁" type="boolean"/><parameter name="Bool₂" type="boolean"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Bool₁</mini> is less than,  equal to or greater than <mini>Bool₂</mini>. <mini>true</mini> is considered greater than <mini>false</mini>.
</description><examples/></method><method category="boolean" name="=" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ == Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true = true</code><result>true</result><code>true = false</code><result>nil</result><code>false = true</code><result>nil</result><code>false = false</code><result>false</result></examples></method><method category="boolean" name="&gt;" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt; Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true &gt; true</code><result>nil</result><code>true &gt; false</code><result>false</result><code>false &gt; true</code><result>nil</result><code>false &gt; false</code><result>nil</result></examples></method><method category="boolean" name="&gt;&lt;" variadic="false"><return type="boolean"/><parameters><parameter name="Bool₁" type="boolean"/><parameter name="Bool₂" type="boolean"/></parameters><description>Returns the logical xor of <mini>Bool₁</mini> and <mini>Bool₂</mini>.
</description><examples><code>true &gt;&lt; true</code><result>false</result><code>true &gt;&lt; false</code><result>true</result><code>false &gt;&lt; true</code><result>true</result><code>false &gt;&lt; false</code><result>false</result></examples></method><method category="boolean" name="&gt;=" variadic="false"><return type="boolean|nil"/><parameters><parameter name="Arg₁" type="boolean"/><parameter name="Arg₂" type="boolean"/></parameters><description>Returns <mini>Arg₂</mini> if <mini>Arg₁ &gt;= Arg₂</mini> and <mini>nil</mini> otherwise.
</description><examples><code>true &gt;= true</code><result>true</result><code>true &gt;= false</code><result>false</result><code>false &gt;= true</code><result>nil</result><code>false &gt;= false</code><result>false</result></examples></method><type name="boolean"><parents/><description>A boolean value (either <mini>true</mini> or <mini>false</mini>).
</description><examples/></type><method category="boolean" name="\/" variadic="true"><return type="boolean"/><parameters><parameter name="Bool₁" type="boolean"/><parameter name="Bool₂" type="boolean"/></parameters><description>Returns the logical or of <mini>Bool₁</mini> and <mini>Bool₂</mini>.
</description><examples><code>true \/ true</code><result>true</result><code>true \/ false</code><result>true</result><code>false \/ true</code><result>true</result><code>false \/ false</code><result>false</result></examples></method><constructor category="boolean" name="boolean" variadic="false"><return type="boolean|error"/><parameters><parameter name="String" type="string"/></parameters><description>Returns <mini>true</mini> if <mini>String</mini> equals <mini>&quot;true&quot;</mini> (ignoring case).
Returns <mini>false</mini> if <mini>String</mini> equals <mini>&quot;false&quot;</mini> (ignoring case).
Otherwise returns an error.
</description><examples/></constructor><function name="boolean::random"><return/><parameters><parameter name="P?" type="number"/></parameters><description>Returns a random boolean that has probability <mini>P</mini> of being <mini>true</mini>. If omitted,  <mini>P</mini> defaults to <mini>0.5</mini>.
</description><examples/></function></category><category name="number"><method category="number" name="!=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="!=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="!=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="!=" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="!=" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="!|" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns <mini>Int₂</mini> if it is not divisible by <mini>Int₁</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="number" name="!|" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns <mini>Int₂</mini> if it is not divisible by <mini>Int₁</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="number" name="%" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns the remainder of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
Note: the result is calculated by rounding towards 0. In particular,  if <mini>Int₁</mini> is negative,  the result will be negative.
For a nonnegative remainder,  use <mini>Int₁ mod Int₂</mini>.
</description><examples/></method><method category="number" name="%" variadic="false"><return type="integer"/><parameters><parameter name="Real₁" type="real"/><parameter name="Real₂" type="real"/></parameters><description>Returns the remainder of <mini>Real₁</mini> divided by <mini>Real₂</mini>.
Note: the result is calculated by rounding towards 0. In particular,  if <mini>Real₁</mini> is negative,  the result will be negative.
For a nonnegative remainder,  use <mini>Real₁ mod Real₂</mini>.
</description><examples/></method><method category="number" name="%" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns the remainder of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
Note: the result is calculated by rounding towards 0. In particular,  if <mini>Int₁</mini> is negative,  the result will be negative.
For a nonnegative remainder,  use <mini>Int₁ mod Int₂</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer32"/><parameter name="Arg₂" type="integer64"/></parameters><description/><examples/></method><method category="number" name="*" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="real"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="complex"/></parameters><description>complex <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="complex"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="complex"/><parameters><parameter name="A" type="double"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="number" name="*" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/><parameter name="Arg₂" type="decimal"/></parameters><description/><examples/></method><method category="number" name="*" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="number" name="*" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/><parameter name="Arg₂" type="decimal"/></parameters><description/><examples/></method><method category="number" name="*" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer64"/><parameter name="Arg₂" type="integer32"/></parameters><description/><examples/></method><method category="number" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/><parameter name="Arg₂" type="decimal"/></parameters><description/><examples/></method><method category="number" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer64"/><parameter name="Arg₂" type="integer32"/></parameters><description/><examples/></method><method category="number" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer32"/><parameter name="Arg₂" type="integer64"/></parameters><description/><examples/></method><method category="number" name="+" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="real"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="complex"/></parameters><description>complex <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="complex"/><parameters><parameter name="A" type="double"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="+" variadic="false"><return type="complex"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="number" name="++" variadic="false"><return type="integer"/><parameters><parameter name="Int" type="integer"/></parameters><description>Returns <mini>Int + 1</mini>
</description><examples/></method><method category="number" name="++" variadic="false"><return type="real"/><parameters><parameter name="Real" type="double"/></parameters><description>Returns <mini>Real + 1</mini>
</description><examples/></method><method category="number" name="-" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="complex"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="complex"/><parameters><parameter name="A" type="double"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer32"/><parameter name="Arg₂" type="integer64"/></parameters><description/><examples/></method><method category="number" name="-" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer64"/><parameter name="Arg₂" type="integer32"/></parameters><description/><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/></parameters><description>Returns <mini>-A</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/><parameter name="Arg₂" type="decimal"/></parameters><description/><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="number" name="-" variadic="false"><return type="real"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="complex"/></parameters><description>complex <mini>A - B</mini>.
</description><examples/></method><method category="number" name="--" variadic="false"><return type="integer"/><parameters><parameter name="Int" type="integer"/></parameters><description>Returns <mini>Int - 1</mini>
</description><examples/></method><method category="number" name="--" variadic="false"><return type="real"/><parameters><parameter name="Real" type="double"/></parameters><description>Returns <mini>Real - 1</mini>
</description><examples/></method><method category="number" name="/" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer64"/><parameter name="Arg₂" type="integer32"/></parameters><description/><examples/></method><method category="number" name="/" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer32"/><parameter name="Arg₂" type="integer64"/></parameters><description/><examples/></method><method category="number" name="/" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="real"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="complex"/></parameters><description>complex <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="complex"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="complex"/><parameters><parameter name="A" type="double"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="number" name="/" variadic="false"><return type="integer|real"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns <mini>Int₁ / Int₂</mini> as an integer if the division is exact,  otherwise as a real.
</description><examples><code>let N := 10 / 2</code><result>5</result><code>type(N)</code><result>&lt;&lt;integer32&gt;&gt;</result><code>let R := 10 / 3</code><result>3.33333333333333</result><code>type(R)</code><result>&lt;&lt;double&gt;&gt;</result></examples></method><method category="number" name="/" variadic="false"><return type="integer|real"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns <mini>Int₁ / Int₂</mini> as an integer if the division is exact,  otherwise as a real.
</description><examples><code>let N := 10 / 2</code><result>5</result><code>type(N)</code><result>&lt;&lt;integer32&gt;&gt;</result><code>let R := 10 / 3</code><result>3.33333333333333</result><code>type(R)</code><result>&lt;&lt;double&gt;&gt;</result></examples></method><method category="number" name="/\" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns the bitwise and of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name="/\" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A /\ B</mini>.
</description><examples/></method><method category="number" name="/\" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns the bitwise and of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer32"/><parameter name="Base" type="integer"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>Base</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer64"/><parameter name="Base" type="integer"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>Base</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer"/><parameter name="Format" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> using <mini>Format</mini> as a (checked) <c>printf</c> format string.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer32"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>10</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer"/><parameter name="Format" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> using <mini>Format</mini> as a (checked) <c>printf</c> format string.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>10</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="double"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="double"/><parameter name="Format" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> using <mini>Format</mini> as a (checked) <c>printf</c> format string.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer"/><parameter name="Base" type="integer"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>Base</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="complex"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer64"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> in base <mini>10</mini>.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="complex"/><parameter name="Format" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> using <mini>Format</mini> as a (checked) <c>printf</c> format string for the real and imaginary components.
</description><examples/></method><method category="number" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer64"/><parameter name="Format" type="string"/></parameters><description>Appends <mini>Value</mini> to <mini>Buffer</mini> using <mini>Format</mini> as a (checked) <c>printf</c> format string.
</description><examples/></method><method category="number" name=":bsf" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/></parameters><description>Returns the index of the least significant 1-bit of <mini>A</mini>,  or <mini>0</mini> if <mini>A = 0</mini>.
</description><examples><code>16:bsf</code><result>5</result><code>10:bsf</code><result>2</result><code>0:bsf</code><result>0</result></examples></method><method category="number" name=":bsf" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/></parameters><description>Returns the index of the least significant 1-bit of <mini>A</mini>,  or <mini>0</mini> if <mini>A = 0</mini>.
</description><examples><code>16:bsf</code><result>5</result><code>10:bsf</code><result>2</result><code>0:bsf</code><result>0</result></examples></method><method category="number" name=":bsr" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/></parameters><description>Returns the index of the most significant 1-bit of <mini>A</mini>,  or <mini>0</mini> if <mini>A = 0</mini>.
</description><examples><code>16:bsr</code><result>5</result><code>10:bsr</code><result>4</result><code>0:bsr</code><result>0</result></examples></method><method category="number" name=":bsr" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/></parameters><description>Returns the index of the most significant 1-bit of <mini>A</mini>,  or <mini>0</mini> if <mini>A = 0</mini>.
</description><examples><code>16:bsr</code><result>5</result><code>10:bsr</code><result>4</result><code>0:bsr</code><result>0</result></examples></method><method category="number" name=":d" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="number" name=":dec" variadic="false"><return type="integer"/><parameters><parameter name="X" type="integer"/></parameters><description>Atomic equivalent to <mini>X := old - 1</mini>.
</description><examples/></method><method category="number" name=":dec" variadic="false"><return type="integer"/><parameters><parameter name="X" type="integer"/><parameter name="Y" type="integer"/></parameters><description>Atomic equivalent to <mini>X := old - Y</mini>.
</description><examples/></method><method category="number" name=":div" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns the quotient of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
The result is calculated by rounding down in all cases.
</description><examples/></method><method category="number" name=":div" variadic="false"><return type="integer"/><parameters><parameter name="Real₁" type="real"/><parameter name="Real₂" type="real"/></parameters><description>Returns the quotient of <mini>Real₁</mini> divided by <mini>Real₂</mini>.
The result is calculated by rounding down in all cases.
</description><examples/></method><method category="number" name=":div" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns the quotient of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
The result is calculated by rounding down in all cases.
</description><examples/></method><method category="number" name=":i" variadic="false"><return type="real"/><parameters><parameter name="Z" type="complex"/></parameters><description>Returns the imaginary component of <mini>Z</mini>.
</description><examples/></method><method category="number" name=":inc" variadic="false"><return type="integer"/><parameters><parameter name="X" type="integer"/></parameters><description>Atomic equivalent to <mini>X := old + 1</mini>.
</description><examples/></method><method category="number" name=":inc" variadic="false"><return type="integer"/><parameters><parameter name="X" type="integer"/><parameter name="Y" type="integer"/></parameters><description>Atomic equivalent to <mini>X := old + Y</mini>.
</description><examples/></method><method category="number" name=":isfinite" variadic="false"><return type="number|nil"/><parameters><parameter name="Number" type="number"/><parameter name="Arg₂" type="double"/></parameters><description>Returns <mini>Number</mini> if it is finite (neither |plusmn|\ |infin| nor </description><examples/></method><method category="number" name=":isnan" variadic="false"><return type="number|nil"/><parameters><parameter name="Number" type="number"/><parameter name="Arg₂" type="double"/></parameters><description>Returns <mini>Number</mini> if it is </description><examples/></method><method category="number" name=":max" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>max(A,  B)</mini>.
</description><examples/></method><method category="number" name=":max" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>max(A,  B)</mini>.
</description><examples/></method><method category="number" name=":max" variadic="false"><return type="real"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="double"/></parameters><description>Returns <mini>max(A,  B)</mini>.
</description><examples/></method><method category="number" name=":max" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>max(A,  B)</mini>.
</description><examples/></method><method category="number" name=":min" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>min(A,  B)</mini>.
</description><examples/></method><method category="number" name=":min" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>min(A,  B)</mini>.
</description><examples/></method><method category="number" name=":min" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>min(A,  B)</mini>.
</description><examples/></method><method category="number" name=":min" variadic="false"><return type="real"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="double"/></parameters><description>Returns <mini>min(A,  B)</mini>.
</description><examples/></method><method category="number" name=":mod" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns the remainder of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
Note: the result is calculated by rounding down in all cases. In particular,  the result is always nonnegative.
</description><examples/></method><method category="number" name=":mod" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="real"/><parameter name="Int₂" type="real"/></parameters><description>Returns the remainder of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
Note: the result is calculated by rounding down in all cases. In particular,  the result is always nonnegative.
</description><examples/></method><method category="number" name=":mod" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns the remainder of <mini>Int₁</mini> divided by <mini>Int₂</mini>.
Note: the result is calculated by rounding down in all cases. In particular,  the result is always nonnegative.
</description><examples/></method><method category="number" name=":popcount" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/></parameters><description>Returns the number of bits set in <mini>A</mini>.
</description><examples/></method><method category="number" name=":r" variadic="false"><return type="real"/><parameters><parameter name="Z" type="complex"/></parameters><description>Returns the real component of <mini>Z</mini>.
</description><examples/></method><method category="number" name=":scale" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/></parameters><description/><examples/></method><method category="number" name=":subsets" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer::range"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="number" name=":subsets" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer::interval"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="number" name=":unscaled" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/></parameters><description/><examples/></method><method category="number" name="&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A &lt;&lt; B</mini>.
</description><examples/></method><method category="number" name="&lt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;=" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;=" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A &lt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Real₁" type="double"/><parameter name="Real₂" type="double"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Real₁</mini> is less than,  equal to or greater than <mini>Real₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer64"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer64"/><parameter name="Int₂" type="integer64"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Real₁" type="double"/><parameter name="Int₂" type="integer"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Real₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Real₂" type="double"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Real₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer64"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini> depending on whether <mini>Int₁</mini> is less than,  equal to or greater than <mini>Int₂</mini>.
</description><examples/></method><method category="number" name="=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="=" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="=" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt; B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns the bitwise xor of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name="&gt;&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A &gt;&lt; B</mini>.
</description><examples/></method><method category="number" name="&gt;&lt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns the bitwise xor of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name="&gt;=" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;=" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>B</mini> if <mini>A &gt;= B</mini>,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="number" name="&gt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A &gt;&gt; B</mini>.
</description><examples/></method><type name="complex"><parents><parent type="number"/></parents><description/><examples/></type><type name="decimal"><parents><parent type="real"/></parents><description/><examples/></type><type name="double"><parents><parent type="real"/></parents><description/><examples/></type><type name="integer64"><parents><parent type="integer"/></parents><description>A 64-bit signed integer value.

<mini>fun (I: integer)(Arg₁,  ...,  Argₙ): any | nil</mini>
   Returns the <mini>I</mini>-th argument or <mini>nil</mini> if there is no <mini>I</mini>-th argument. Negative values of <mini>I</mini> are counted from the last argument.
   In particular,  <mini>0(...)</mini> always returns <mini>nil</mini> and <mini>1</mini> behaves as the identity function.
</description><examples><code>2(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code><result>&quot;b&quot;</result><code>-1(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code><result>&quot;c&quot;</result><code>4(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code><result>nil</result><code>0(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code><result>nil</result></examples></type><type name="integer"><parents><parent type="real"/><parent type="function"/></parents><description>Base type of integers.
</description><examples/></type><type name="number"><parents/><description>Base type for numbers.
</description><examples/></type><type name="real"><parents><parent type="complex"/></parents><description/><examples/></type><method category="number" name="\/" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns the bitwise or of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name="\/" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A \/ B</mini>.
</description><examples/></method><method category="number" name="\/" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns the bitwise or of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><method category="number" name="complex" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="real"/></parameters><description/><examples/></method><method category="number" name="complex" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="real"/><parameter name="Arg₂" type="real"/></parameters><description/><examples/></method><constructor category="number" name="complex" variadic="false"><return type="complex|error"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the complex number in <mini>String</mini> or an error if <mini>String</mini> does not contain a valid complex number.
</description><examples/></constructor><method category="number" name="decimal" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/></parameters><description/><examples/></method><method category="number" name="decimal" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="number" name="decimal" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="real"/></parameters><description/><examples/></method><constructor category="number" name="integer" variadic="false"><return type="integer"/><parameters><parameter name="Real" type="double"/></parameters><description>Converts <mini>Real</mini> to an integer (using default rounding).
</description><examples/></constructor><constructor category="number" name="integer" variadic="false"><return type="integer|error"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the base <mini>10</mini> integer in <mini>String</mini> or an error if <mini>String</mini> does not contain a valid integer.
</description><examples><code>integer(&quot;123&quot;)</code><result>123</result><code>integer(&quot;ABC&quot;)</code><result>error(&quot;ValueError&quot;, &quot;Error parsing integer&quot;)</result></examples></constructor><constructor category="number" name="integer" variadic="false"><return type="integer|error"/><parameters><parameter name="String" type="string"/><parameter name="Base" type="integer"/></parameters><description>Returns the base <mini>Base</mini> integer in <mini>String</mini> or an error if <mini>String</mini> does not contain a valid integer.
</description><examples/></constructor><function name="integer::random"><return/><parameters><parameter name="Min?" type="number"/><parameter name="Max?" type="number"/></parameters><description>Returns a random integer between <mini>Min</mini> and <mini>Max</mini> (where <mini>Max</mini> <math>\leq 2^{32} - 1</math>).
If omitted,  <mini>Min</mini> defaults to <mini>0</mini> and <mini>Max</mini> defaults to <math>2^{32} - 1</math>.
</description><examples/></function><function name="integer::random_cycle"><return/><parameters><parameter name="Max" type="integer"/></parameters><description>Returns a random cyclic permutation (no sub-cycles) of <mini>1,  ...,  Max</mini>.
</description><examples/></function><function name="integer::random_cycle"><return/><parameters><parameter name="Max" type="integer"/></parameters><description>Returns a random cyclic permutation (no sub-cycles) of <mini>1,  ...,  Max</mini>.
</description><examples/></function><function name="integer::random_permutation"><return/><parameters><parameter name="Max" type="integer"/></parameters><description>Returns a random permutation of <mini>1,  ...,  Max</mini>.
</description><examples/></function><function name="integer::random_permutation"><return/><parameters><parameter name="Max" type="integer"/></parameters><description>Returns a random permutation of <mini>1,  ...,  Max</mini>.
</description><examples/></function><method category="number" name="number" variadic="false"><return type="integer|real|complex|error"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the number in <mini>String</mini> or an error if <mini>String</mini> does not contain a valid number.
</description><examples/></method><method category="number" name="real" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/></parameters><description/><examples/></method><method category="number" name="real" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="complex"/></parameters><description/><examples/></method><constructor category="number" name="real" variadic="false"><return type="real|error"/><parameters><parameter name="String" type="string"/></parameters><description>Returns the real number in <mini>String</mini> or an error if <mini>String</mini> does not contain a valid real number.
</description><examples/></constructor><method category="number" name="real" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="decimal"/></parameters><description/><examples/></method><value name="real::Inf"><type name="real"/><description>Positive infinity.
</description></value><value name="real::NaN"><type name="real"/><description>Not a number.
</description></value><function name="real::random"><return/><parameters><parameter name="Min?" type="number"/><parameter name="Max?" type="number"/></parameters><description>Returns a random real between <mini>Min</mini> and <mini>Max</mini>.
If omitted,  <mini>Min</mini> defaults to <mini>0</mini> and <mini>Max</mini> defaults to <mini>1</mini>.
</description><examples/></function><method category="number" name="|" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer"/><parameter name="Int₂" type="integer"/></parameters><description>Returns <mini>Int₂</mini> if it is divisible by <mini>Int₁</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="number" name="|" variadic="false"><return type="integer"/><parameters><parameter name="Int₁" type="integer32"/><parameter name="Int₂" type="integer32"/></parameters><description>Returns <mini>Int₂</mini> if it is divisible by <mini>Int₁</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="complex"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="real"/><parameters><parameter name="A" type="real"/><parameter name="B" type="real"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/></parameters><description>Returns <mini>~A</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer64"/><parameter name="B" type="integer64"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/></parameters><description>Returns <mini>~A</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer32"/><parameter name="B" type="integer32"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="real"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="complex"/></parameters><description>complex <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="complex"/><parameters><parameter name="A" type="double"/><parameter name="B" type="complex"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/></parameters><description>Returns <mini>~A</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="complex"/><parameters><parameter name="A" type="complex"/></parameters><description>Returns <mini>~A</mini>.
</description><examples/></method><method category="number" name="~" variadic="false"><return type="real"/><parameters><parameter name="A" type="double"/><parameter name="B" type="double"/></parameters><description>Returns <mini>A ~ B</mini>.
</description><examples/></method></category><category name="interval"><method category="interval" name="!=" variadic="false"><return type="integer::interval|nil"/><parameters><parameter name="A" type="integer::interval"/><parameter name="B" type="integer::interval"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name="*" variadic="false"><return type="integer::interval"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Scale" type="integer"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name="*" variadic="false"><return type="integer::interval"/><parameters><parameter name="Scale" type="integer"/><parameter name="Interval" type="integer::interval"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name="+" variadic="false"><return type="integer::interval"/><parameters><parameter name="Shift" type="integer"/><parameter name="Interval" type="integer::interval"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name="+" variadic="false"><return type="integer::interval"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Shift" type="integer"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name="-" variadic="false"><return type="integer::interval"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Shift" type="integer"/></parameters><description>Returns a interval
</description><examples/></method><method category="interval" name=".." variadic="false"><return type="integer::range"/><parameters><parameter name="Start" type="integer"/><parameter name="Limit" type="integer"/><parameter name="Step" type="integer"/></parameters><description>Returns a range from <mini>Start</mini> to <mini>Limit</mini> (inclusive) with step <mini>Step</mini>.
</description><examples/></method><method category="interval" name=".." variadic="false"><return type="real::interval"/><parameters><parameter name="Start" type="number"/><parameter name="Limit" type="number"/></parameters><description/><examples/></method><method category="interval" name=".." variadic="false"><return type="integer::interval"/><parameters><parameter name="Start" type="integer"/><parameter name="Limit" type="integer"/></parameters><description>Returns a interval from <mini>Start</mini> to <mini>Limit</mini> (inclusive).
</description><examples/></method><method category="interval" name="..&lt;" variadic="false"><return type="integer::interval"/><parameters><parameter name="Start" type="integer"/><parameter name="Limit" type="integer"/></parameters><description>Returns a interval from <mini>Start</mini> to <mini>Limit</mini> (exclusive).
</description><examples/></method><method category="interval" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="string::interval"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="interval" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer::range"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="interval" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="integer::interval"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="interval" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="real::interval"/></parameters><description>Appends a representation of <mini>Value</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="interval" name=":between" variadic="false"><return type="X|nil"/><parameters><parameter name="X" type="integer"/><parameter name="Interval" type="real::interval"/></parameters><description/><examples/></method><method category="interval" name=":between" variadic="false"><return type="X|nil"/><parameters><parameter name="X" type="double"/><parameter name="Interval" type="real::interval"/></parameters><description/><examples/></method><method category="interval" name=":between" variadic="false"><return type="X|nil"/><parameters><parameter name="X" type="integer"/><parameter name="Interval" type="integer::interval"/></parameters><description/><examples/></method><method category="interval" name=":between" variadic="false"><return type="X|nil"/><parameters><parameter name="X" type="double"/><parameter name="Interval" type="integer::interval"/></parameters><description/><examples/></method><method category="interval" name=":bin" variadic="false"><return type="integer|nil"/><parameters><parameter name="Interval" type="integer::range"/><parameter name="Value" type="integer"/></parameters><description/><examples/></method><method category="interval" name=":bin" variadic="false"><return type="integer|nil"/><parameters><parameter name="Interval" type="integer::range"/><parameter name="Value" type="double"/></parameters><description/><examples/></method><method category="interval" name=":by" variadic="false"><return type="real::range"/><parameters><parameter name="Interval" type="real::interval"/><parameter name="Step" type="number"/></parameters><description/><examples/></method><method category="interval" name=":by" variadic="false"><return type="real::range"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Step" type="double"/></parameters><description/><examples/></method><method category="interval" name=":by" variadic="false"><return type="integer::range"/><parameters><parameter name="Start" type="integer"/><parameter name="Step" type="integer"/></parameters><description>Returns a unlimited range from <mini>Start</mini> in steps of <mini>Step</mini>.
</description><examples/></method><method category="interval" name=":by" variadic="false"><return type="integer::range"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Step" type="integer"/></parameters><description>Returns a range with the same limits as <mini>Interval</mini> but with step <mini>Step</mini>.
</description><examples/></method><method category="interval" name=":clamp" variadic="false"><return type="integer"/><parameters><parameter name="Value" type="integer"/><parameter name="Interval" type="integer::interval"/></parameters><description/><examples/></method><method category="interval" name=":clamp" variadic="false"><return type="integer"/><parameters><parameter name="Value" type="real"/><parameter name="Interval" type="integer::interval"/></parameters><description/><examples/></method><method category="interval" name=":clamp" variadic="false"><return type="real"/><parameters><parameter name="Value" type="integer"/><parameter name="Interval" type="real::interval"/></parameters><description/><examples/></method><method category="interval" name=":clamp" variadic="false"><return type="integer"/><parameters><parameter name="Value" type="real"/><parameter name="Interval" type="real::interval"/></parameters><description/><examples/></method><method category="interval" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the number of values in <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the number of values in <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":down" variadic="false"><return type="integer::range"/><parameters><parameter name="Start" type="integer"/></parameters><description>Returns an unlimited range from <mini>Start</mini>.
</description><examples/></method><method category="interval" name=":first" variadic="false"><return type="real"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the start of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":first" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the start of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":in" variadic="false"><return type="integer::range|real::range"/><parameters><parameter name="Interval" type="integer::interval"/><parameter name="Count" type="integer"/></parameters><description/><examples/></method><method category="interval" name=":in" variadic="false"><return type="real::range"/><parameters><parameter name="Interval" type="real::interval"/><parameter name="Count" type="integer"/></parameters><description/><examples/></method><method category="interval" name=":last" variadic="false"><return type="real"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the limit of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":last" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the limit of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":limit" variadic="false"><return type="real"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the limit of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":limit" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the limit of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the number of values in <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the number of values in <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":random" variadic="false"><return type="real"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description/><examples/></method><method category="interval" name=":random" variadic="false"><return type="string"/><parameters><parameter name="Interval" type="string::interval"/></parameters><description/><examples/></method><method category="interval" name=":random" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description/><examples/></method><method category="interval" name=":start" variadic="false"><return type="integer"/><parameters><parameter name="Interval" type="integer::interval"/></parameters><description>Returns the start of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":start" variadic="false"><return type="real"/><parameters><parameter name="Interval" type="real::interval"/></parameters><description>Returns the start of <mini>Interval</mini>.
</description><examples/></method><method category="interval" name=":up" variadic="false"><return type="integer::interval"/><parameters><parameter name="Start" type="integer"/></parameters><description>Returns an unlimited interval from <mini>Start</mini>.
</description><examples/></method><method category="interval" name=":up" variadic="false"><return type="integer::interval"/><parameters><parameter name="Start" type="integer"/><parameter name="Count" type="integer"/></parameters><description>Returns an interval from <mini>Start</mini> to <mini>Start + Count - 1</mini> (inclusive).
</description><examples/></method><method category="interval" name="=" variadic="false"><return type="integer::interval|nil"/><parameters><parameter name="A" type="integer::interval"/><parameter name="B" type="integer::interval"/></parameters><description>Returns a interval
</description><examples/></method><type name="integer::interval"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="integer::range"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="real::interval"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="real::range"><parents><parent type="sequence"/></parents><description/><examples/></type></category><category name="stream"><method category="stream" name=":close" variadic="false"><return type="nil"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Closes <mini>Stream</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":copy" variadic="false"><return type="integer"/><parameters><parameter name="Source" type="stream"/><parameter name="Destination" type="stream"/><parameter name="Count" type="integer"/></parameters><description>Copies upto <mini>Count</mini> bytes from <mini>Source</mini> to <mini>Destination</mini>.
</description><examples/></method><method category="stream" name=":copy" variadic="false"><return type="integer"/><parameters><parameter name="Source" type="stream"/><parameter name="Destination" type="stream"/></parameters><description>Copies the remaining bytes from <mini>Source</mini> to <mini>Destination</mini>.
</description><examples/></method><method category="stream" name=":flush" variadic="false"><return type=""/><parameters><parameter name="Stream" type="stream"/></parameters><description>Flushes <mini>Stream</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":flush" variadic="false"><return type=""/><parameters><parameter name="Stream" type="stream::buffered"/></parameters><description>Writes any bytes in the buffer.
</description><examples/></method><method category="stream" name=":parse" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="stream"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="stream" name=":read" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream::fd"/><parameter name="Dest" type="buffer"/></parameters><description>Reads from <mini>Stream</mini> into <mini>Dest</mini> returning the actual number of bytes read.
</description><examples/></method><method category="stream" name=":read" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini> upto <mini>Count</mini> characters. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":read" variadic="false"><return type="address|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini> upto <mini>Count</mini> characters. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":read" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream"/><parameter name="Buffer" type="buffer"/></parameters><description>Reads bytes from <mini>Stream</mini> into <mini>Buffer</mini> to <mini>Stream</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":read" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Equivalent to <mini>Stream:readi(SIZE_MAX,  &apos;\n&apos;)</mini>.
</description><examples/></method><method category="stream" name=":readi" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/><parameter name="Delimiters" type="string"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto and including any character in <mini>Delimiters</mini>. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readi" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Delimiters" type="string"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto and including any character in <mini>Delimiters</mini>. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readi" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/><parameter name="Delimiters" type="string"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto and including any character in <mini>Delimiters</mini> or <mini>Count</mini> characters,  whichever comes first. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readi" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Delimiters" type="string"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto and including any character in <mini>Delimiters</mini> or <mini>Count</mini> characters,  whichever comes first. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":reads" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini> upto <mini>Count</mini> characters. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readx" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/><parameter name="Delimiters" type="string"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto but excluding any character in <mini>Delimiters</mini> or <mini>Count</mini> characters,  whichever comes first. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readx" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Delimiters" type="string"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto but excluding any character in <mini>Delimiters</mini>. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readx" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Delimiters" type="string"/><parameter name="Count" type="integer"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto but excluding any character in <mini>Delimiters</mini> or <mini>Count</mini> characters,  whichever comes first. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":readx" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/><parameter name="Delimiters" type="string"/></parameters><description>Returns the next text from <mini>Stream</mini>,  upto but excluding any character in <mini>Delimiters</mini>. Returns <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":rest" variadic="false"><return type="Type|nil"/><parameters><parameter name="Stream" type="stream"/><parameter name="Type" type="type"/></parameters><description>Returns the remainder of <mini>Stream</mini> or <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":rest" variadic="false"><return type="string|nil"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Returns the remainder of <mini>Stream</mini> or <mini>nil</mini> if <mini>Stream</mini> is empty.
</description><examples/></method><method category="stream" name=":seek" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream"/><parameter name="Offset" type="integer"/><parameter name="Mode" type="stream::seek"/></parameters><description>Sets the position for the next read or write in <mini>Stream</mini> to <mini>Offset</mini> using <mini>Mode</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":tell" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Gets the position for the next read or write in <mini>Stream</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":write" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream"/><parameter name="Address" type="address"/></parameters><description>Writes the bytes at <mini>Address</mini> to <mini>Stream</mini>. This method should be overridden for streams defined in Minilang.
</description><examples/></method><method category="stream" name=":write" variadic="false"><return type="integer"/><parameters><parameter name="Stream" type="stream::fd"/><parameter name="Source" type="address"/></parameters><description>Writes from <mini>Source</mini> to <mini>Stream</mini> returning the actual number of bytes written.
</description><examples/></method><method category="stream" name=":write" variadic="true"><return type="integer"/><parameters><parameter name="Stream" type="stream"/><parameter name="Value₁, ..., Valueₙ" type="any"/></parameters><description>Writes each <mini>Valueᵢ</mini> in turn to <mini>Stream</mini>.
</description><examples/></method><type name="stream::buffered"><parents><parent type="stream"/></parents><description>A stream that buffers reads and writes from another stream.
</description><examples/></type><type name="stream::fd"><parents><parent type="stream"/></parents><description>A file-descriptor based stream.
</description><examples/></type><type name="stream::parser"><parents><parent type="function"/><parent type="sequence"/></parents><description/><examples/></type><type name="stream::seek"><parents><parent type="enum"/></parents><description>* <mini>::Set</mini>
* <mini>::Cur</mini>
* <mini>::End</mini>
</description><examples/></type><type name="stream"><parents/><description>Base type of readable and writable byte streams.
</description><examples/></type><constructor category="stream" name="stream::buffered" variadic="false"><return type="stream::buffered"/><parameters><parameter name="Stream" type="stream"/><parameter name="Size" type="integer"/></parameters><description>Returns a new stream that buffers reads and writes from <mini>Stream</mini>.
</description><examples/></constructor></category><category name="socket"><method category="socket" name=":accept" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::local"/></parameters><description/><examples/></method><method category="socket" name=":accept" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::inet"/></parameters><description/><examples/></method><method category="socket" name=":bind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::local"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="socket" name=":bind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::inet"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="socket" name=":bind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::inet"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="socket" name=":connect" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::inet"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="socket" name=":connect" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket::local"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="socket" name=":listen" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="socket"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><type name="socket::inet"><parents><parent type="socket"/></parents><description/><examples/></type><type name="socket::local"><parents><parent type="socket"/></parents><description/><examples/></type><type name="socket"><parents><parent type="stream::fd"/></parents><description/><examples/></type><type name="socket::type"><parents><parent type="enum"/></parents><description>* <mini>::Stream</mini>
* <mini>::DGram</mini>
* <mini>::Raw</mini>
</description><examples/></type><function name="mlsocketinet"><return/><parameters><parameter name="Arg₁" type="socket::type"/></parameters><description/><examples/></function><function name="mlsocketlocal"><return/><parameters><parameter name="Arg₁" type="socket::type"/></parameters><description/><examples/></function></category><category name="slice"><method category="slice" name="!=" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name=":afind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="function"/></parameters><description/><examples/></method><method category="slice" name=":afind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="function"/><parameter name="Arg₄" type="function"/></parameters><description/><examples/></method><method category="slice" name=":afinder" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/></parameters><description/><examples/></method><method category="slice" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="slice"/><parameter name="Arg₃" type="string"/></parameters><description/><examples/></method><method category="slice" name=":bfind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="slice" name=":bfind" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="function"/></parameters><description/><examples/></method><method category="slice" name=":capacity" variadic="false"><return type="integer"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the capacity of <mini>Slice</mini>
</description><examples><code>slice([1, 2, 3]):capacity</code><result>3</result></examples></method><method category="slice" name=":const" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":copy" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the length of <mini>Slice</mini>
</description><examples><code>slice([1, 2, 3]):count</code><result>3</result></examples></method><method category="slice" name=":cycle" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":delete" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="slice" name=":empty" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":filter" variadic="false"><return type="slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Slice</mini> for which <mini>Function(Value)</mini> returns <mini>nil</mini> and returns those values in a new list.
</description><examples><code>let L := slice([1, 2, 3, 4, 5, 6])
L:filter(2 | _)</code><result>[1, 3, 5]</result><code>L</code><result>[2, 4, 6]</result></examples></method><method category="slice" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="function"/></parameters><description/><examples/></method><method category="slice" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="slice" name=":first" variadic="false"><return type=""/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the first value in <mini>Slice</mini> or <mini>nil</mini> if <mini>Slice</mini> is empty.
</description><examples/></method><method category="slice" name=":first2" variadic="false"><return type=""/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the first index and value in <mini>Slice</mini> or <mini>nil</mini> if <mini>Slice</mini> is empty.
</description><examples/></method><method category="slice" name=":grow" variadic="true"><return type="slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Sequence" type="sequence"/></parameters><description>Pushes of all of the values produced by <mini>Sequence</mini> onto <mini>List</mini> and returns <mini>List</mini>.
</description><examples><code>let L := slice([1, 2, 3])
L:grow(4 .. 6)</code><result>[1, 2, 3, 4, 5, 6]</result></examples></method><method category="slice" name=":insert" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="any"/></parameters><description/><examples/></method><method category="slice" name=":last" variadic="false"><return type=""/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the last value in <mini>Slice</mini> or <mini>nil</mini> if <mini>Slice</mini> is empty.
</description><examples/></method><method category="slice" name=":last2" variadic="false"><return type=""/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the last index and value in <mini>Slice</mini> or <mini>nil</mini> if <mini>Slice</mini> is empty.
</description><examples/></method><method category="slice" name=":length" variadic="false"><return type="integer"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the length of <mini>Slice</mini>
</description><examples><code>slice([1, 2, 3]):length</code><result>3</result></examples></method><method category="slice" name=":offset" variadic="false"><return type="integer"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the offset of <mini>Slice</mini>
</description><examples><code>slice([1, 2, 3]):offset</code><result>0</result></examples></method><method category="slice" name=":order" variadic="false"><return type="permutation"/><parameters><parameter name="Slice" type="slice::mutable"/></parameters><description>Returns the ordering of the elements of <mini>Slice</mini> as a permutation,  index of first element,  index of second element,  ...,  index of last element,  when compared by <mini>&lt;=</mini>.
</description><examples><code>let S := slice([&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;])</code><result>[D, B, A, C]</result><code>S:order</code><result>&lt;3 2 4 1&gt;</result></examples></method><method category="slice" name=":order" variadic="false"><return type="permutation"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Compare" type="function"/></parameters><description>Returns the ordering of the elements of <mini>Slice</mini> as a permutation,  index of first element,  index of second element,  ...,  index of last element,  when compared by <mini>Compare</mini>.
</description><examples><code>let S := slice([&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;])</code><result>[D, B, A, C]</result><code>S:order(&gt;)</code><result>&lt;1 4 2 3&gt;</result></examples></method><method category="slice" name=":permutations" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":permute" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":permute" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="permutation"/></parameters><description/><examples/></method><method category="slice" name=":pop" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":pop" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="slice" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns the length of <mini>Slice</mini>
</description><examples><code>slice([1, 2, 3]):precount</code><result>3</result></examples></method><method category="slice" name=":pull" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="slice" name=":pull" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":push" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":put" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":random" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/></parameters><description/><examples/></method><method category="slice" name=":remove" variadic="false"><return type="slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Slice</mini> for which <mini>Function(Value)</mini> returns non-<mini>nil</mini> and returns those values in a new list.
</description><examples><code>let L := slice([1, 2, 3, 4, 5, 6])
L:remove(2 | _)</code><result>[2, 4, 6]</result><code>L</code><result>[1, 3, 5]</result></examples></method><method category="slice" name=":reverse" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":shuffle" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":sort" variadic="false"><return type="Slice"/><parameters><parameter name="Slice" type="slice"/><parameter name="Compare" type="method"/></parameters><description>Sorts <mini>Slice</mini> in-place using <mini>Compare</mini> and returns it.
</description><examples/></method><method category="slice" name=":sort" variadic="false"><return type="Slice"/><parameters><parameter name="Slice" type="slice"/><parameter name="Compare" type="function"/></parameters><description>Sorts <mini>Slice</mini> in-place using <mini>Compare</mini> and returns it.
</description><examples/></method><method category="slice" name=":sort" variadic="false"><return type="Slice"/><parameters><parameter name="Slice" type="slice"/><parameter name="Compare" type="any"/></parameters><description>Sorts <mini>Slice</mini> in-place using <mini>&lt;</mini> and returns it.
</description><examples/></method><method category="slice" name=":sort" variadic="false"><return type="Slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="By" type="function"/><parameter name="Order" type="function"/></parameters><description>Sorts <mini>Slice</mini> in-place using <mini>Order(By(Vᵢ),  By(Vⱼ))</mini> as the comparison function (evaluating <mini>By(Vᵢ)</mini> only once for each <mini>i</mini>).
</description><examples><code>let S := slice([&quot;The&quot;, &quot;capital&quot;, &quot;of&quot;, &quot;Ireland&quot;, &quot;is&quot;, &quot;Dublin&quot;])</code><result>[The, capital, of, Ireland, is, Dublin]</result><code>S:sort(:upper, &lt;)</code><result>[capital, Dublin, Ireland, is, of, The]</result></examples></method><method category="slice" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="slice" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice::mutable"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="integer"/><parameter name="Arg₄" type="slice::mutable"/></parameters><description/><examples/></method><method category="slice" name=":visit" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="&lt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="&lt;=" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="=" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><method category="slice" name="&gt;=" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="slice"/><parameter name="Arg₂" type="slice"/></parameters><description/><examples/></method><type name="slice::index"><parents/><description>An assignable reference to an index of a slice.
</description><examples/></type><type name="slice::iter"><parents/><description/><examples/></type><type name="slice::mutable::iter"><parents><parent type="slice::iter"/></parents><description/><examples/></type><type name="slice::mutable"><parents><parent type="slice"/></parents><description/><examples/></type><type name="slice::slice"><parents/><description>A sub-slice.
</description><examples/></type><type name="slice"><parents><parent type="sequence"/></parents><description>A slice of elements.
</description><examples/></type><method category="slice" name="[]" variadic="false"><return type="slice::slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Interval" type="integer::interval"/></parameters><description>Returns a slice of <mini>Slice</mini> starting at <mini>Interval:start</mini> and ending at <mini>Interval:limit</mini>,  both inclusive.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the slice,  with <mini>-1</mini> returning the last node.
</description><examples/></method><method category="slice" name="[]" variadic="false"><return type="slice::index|nil"/><parameters><parameter name="Slice" type="slice"/><parameter name="Index" type="integer"/></parameters><description>Returns the <mini>Index</mini>-th node in <mini>Slice</mini> or <mini>nil</mini> if <mini>Index</mini> is outside the interval of <mini>List</mini>.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the list,  with <mini>-1</mini> returning the last node.
</description><examples><code>let L := slice([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;])
L[3]</code><result>&quot;c&quot;</result><code>L[-2]</code><result>&quot;e&quot;</result><code>L[8]</code><result>nil</result></examples></method><method category="slice" name="[]" variadic="false"><return type="slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Indices" type="integer"/><parameter name="Arg₃" type="integer"/></parameters><description>Returns a slice containing the <mini>List[Indices[1]]</mini>,  <mini>List[Indices[2]]</mini>,  etc.
</description><examples/></method><method category="slice" name="[]" variadic="false"><return type="slice::slice"/><parameters><parameter name="Slice" type="slice::mutable"/><parameter name="Interval" type="integer::range"/></parameters><description>Returns a slice of <mini>Slice</mini> starting at <mini>Interval:start</mini> and ending at <mini>Interval:limit</mini>,  both inclusive.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the slice,  with <mini>-1</mini> returning the last node.
</description><examples/></method><method category="slice" name="[]" variadic="false"><return type="slice"/><parameters><parameter name="Slice" type="slice"/><parameter name="Indices" type="vector"/></parameters><description>Returns a list containing the <mini>List[Indices[1]]</mini>,  <mini>List[Indices[2]]</mini>,  etc.
</description><examples/></method><constructor category="slice" name="slice" variadic="false"><return type="slice"/><parameters/><description>Returns an empty slice.
</description><examples><code>slice()</code><result>[]</result></examples></constructor><constructor category="slice" name="slice" variadic="true"><return type="slice"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a list of all of the values produced by <mini>Sequence</mini>.
</description><examples><code>slice(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result></examples></constructor><constructor category="slice" name="slice" variadic="false"><return type="slice"/><parameters><parameter name="Tuple" type="tuple"/></parameters><description>Returns a slice containing the values in <mini>Tuple</mini>.
</description><examples><code>slice((1, 2, 3))</code><result>[1, 2, 3]</result></examples></constructor></category><category name="set"><method category="set" name="*" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set containing the values of <mini>Set₁</mini> which are also in <mini>Set₂</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A * B</code><result>{b, a}</result></examples></method><method category="set" name="+" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set combining the values of <mini>Set₁</mini> and <mini>Set₂</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A + B</code><result>{b, a, n, r, e, d}</result></examples></method><method category="set" name="/" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set containing the values of <mini>Set₁</mini> which are not in <mini>Set₂</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A / B</code><result>{n}</result></examples></method><method category="set" name="/\" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set containing the values of <mini>Set₁</mini> which are also in <mini>Set₂</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A /\ B</code><result>{b, a}</result></examples></method><method category="set" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Set" type="set"/></parameters><description>Appends a representation of <mini>Set</mini> to <mini>Buffer</mini> of the form <mini>&quot;[&quot; + repr(V₁) + &quot;,  &quot; + repr(V₂) + &quot;,  &quot; + ... + repr(Vₙ) + &quot;]&quot;</mini>,  where <mini>repr(Vᵢ)</mini> is a representation of the *i*-th element (using <mini>:append</mini>).
</description><examples><code>let B := string::buffer()
B:append(set(1 .. 4))
B:rest</code><result>&quot;{1, 2, 3, 4}&quot;</result></examples></method><method category="set" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Set" type="set"/><parameter name="Sep" type="string"/></parameters><description>Appends a representation of <mini>Set</mini> to <mini>Buffer</mini> of the form <mini>repr(V₁) + Sep + repr(V₂) + Sep + ... + repr(Vₙ)</mini>,  where <mini>repr(Vᵢ)</mini> is a representation of the *i*-th element (using <mini>:append</mini>).
</description><examples><code>let B := string::buffer()
B:append(set(1 .. 4), &quot; - &quot;)
B:rest</code><result>&quot;1 - 2 - 3 - 4&quot;</result></examples></method><method category="set" name=":const" variadic="false"><return type="set"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Set" type="set"/></parameters><description>Returns a new set contains copies of the elements of <mini>Set</mini> created using <mini>Visitor</mini>.
</description><examples/></method><method category="set" name=":copy" variadic="false"><return type="set"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Set" type="set"/></parameters><description>Returns a new set contains copies of the elements of <mini>Set</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="set" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the number of values in <mini>Set</mini>.
</description><examples><code>set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]):count</code><result>3</result></examples></method><method category="set" name=":delete" variadic="false"><return type="some|nil"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Value" type="any"/></parameters><description>Removes <mini>Value</mini> from <mini>Set</mini> and returns it if found,  otherwise <mini>nil</mini>.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S:delete(&quot;A&quot;)</code><result>some</result><code>S:delete(&quot;D&quot;)</code><result>nil</result><code>S</code><result>{B, C}</result></examples></method><method category="set" name=":empty" variadic="false"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/></parameters><description>Deletes all values from <mini>Set</mini> and returns it.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])</code><result>{A, B, C}</result><code>S:empty</code><result>{}</result></examples></method><method category="set" name=":filter" variadic="false"><return type="map"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Set</mini> for which <mini>Function(Value)</mini> returns <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let S := set(1 .. 20)
S:filter(2 | _)</code><result>{1 is &lt;set::node&gt;, 3 is 3, 5 is 5, 7 is 7, 9 is 9, 11 is 11, 13 is 13, 15 is 15, 17 is 17, 19 is 19}</result><code>S</code><result>{2, 4, 6, 8, 10, 12, 14, 16, 18, 20}</result></examples></method><method category="set" name=":first" variadic="false"><return type=""/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the first value in <mini>Set</mini> or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples/></method><method category="set" name=":first2" variadic="false"><return type=""/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the first value in <mini>Set</mini> or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples/></method><method category="set" name=":from" variadic="false"><return type="sequence|nil"/><parameters><parameter name="Set" type="set"/><parameter name="Value" type="any"/></parameters><description>Returns the subset of <mini>Set</mini> after <mini>Value</mini> as a sequence.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;])
set(S:from(&quot;C&quot;))</code><result>{C, D, E}</result><code>set(S:from(&quot;F&quot;))</code><result>{}</result></examples></method><method category="set" name=":grow" variadic="true"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Sequence" type="sequence"/></parameters><description>Adds of all the values produced by <mini>Sequence</mini> to <mini>Set</mini> and returns <mini>Set</mini>.
</description><examples><code>set(&quot;cake&quot;):grow(&quot;banana&quot;)</code><result>{c, a, k, e, b, n}</result></examples></method><method category="set" name=":in" variadic="false"><return type="any|nil"/><parameters><parameter name="Value" type="any"/><parameter name="Set" type="set"/></parameters><description>Returns <mini>Key</mini> if it is in <mini>Set</mini>,  otherwise return <mini>nil</mini>.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
&quot;A&quot; in S</code><result>&quot;A&quot;</result><code>&quot;D&quot; in S</code><result>nil</result></examples></method><method category="set" name=":insert" variadic="false"><return type="some|nil"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Value" type="any"/></parameters><description>Inserts <mini>Value</mini> into <mini>Set</mini>.
Returns the previous value associated with <mini>Key</mini> if any,  otherwise <mini>nil</mini>.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S:insert(&quot;A&quot;)</code><result>some</result><code>S:insert(&quot;D&quot;)</code><result>nil</result><code>S</code><result>{A, B, C, D}</result></examples></method><method category="set" name=":last" variadic="false"><return type=""/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the last value in <mini>Set</mini> or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples/></method><method category="set" name=":last2" variadic="false"><return type=""/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the last value in <mini>Set</mini> or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples/></method><method category="set" name=":missing" variadic="false"><return type="some|nil"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Value" type="any"/></parameters><description>If <mini>Value</mini> is present in <mini>Set</mini> then returns <mini>nil</mini>. Otherwise inserts <mini>Value</mini> into <mini>Set</mini> and returns <mini>some</mini>.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S:missing(&quot;A&quot;)</code><result>nil</result><code>S:missing(&quot;D&quot;)</code><result>some</result><code>S</code><result>{A, B, C, D}</result></examples></method><method category="set" name=":order" variadic="false"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Order" type="set::order"/></parameters><description>Sets the ordering
</description><examples/></method><method category="set" name=":order" variadic="false"><return type="set::order"/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the current ordering of <mini>Set</mini>.
</description><examples/></method><method category="set" name=":pop" variadic="false"><return type="any|nil"/><parameters><parameter name="Set" type="set::mutable"/></parameters><description>Deletes the first value from <mini>Set</mini> according to its iteration order. Returns the deleted value,  or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let S1 := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S1:pop</code><result>&quot;c&quot;</result><code>S1</code><result>{a, k, e}</result><code>
:&gt; LRU order
let S2 := set(&quot;cake&quot;):order(set::order::LRU)</code><result>{c, a, k, e}</result><code>S2[&quot;a&quot;]; S2[&quot;e&quot;]; S2[&quot;c&quot;]; S2[&quot;k&quot;]
S2:pop</code><result>&quot;a&quot;</result><code>S2</code><result>{e, c, k}</result><code>
:&gt; MRU order
let S3 := set(&quot;cake&quot;):order(set::order::MRU)</code><result>{c, a, k, e}</result><code>S3[&quot;a&quot;]; S3[&quot;e&quot;]; S3[&quot;c&quot;]; S3[&quot;k&quot;]
S3:pop</code><result>&quot;k&quot;</result><code>S3</code><result>{c, e, a}</result></examples></method><method category="set" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the number of values in <mini>Set</mini>.
</description><examples><code>set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]):count</code><result>3</result></examples></method><method category="set" name=":pull" variadic="false"><return type="any|nil"/><parameters><parameter name="Set" type="set::mutable"/></parameters><description>Deletes the last value from <mini>Set</mini> according to its iteration order. Returns the deleted value,  or <mini>nil</mini> if <mini>Set</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let S1 := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S1:pull</code><result>&quot;e&quot;</result><code>S1</code><result>{c, a, k}</result><code>
:&gt; LRU order
let S2 := set(&quot;cake&quot;):order(set::order::LRU)</code><result>{c, a, k, e}</result><code>S2[&quot;a&quot;]; S2[&quot;e&quot;]; S2[&quot;c&quot;]; S2[&quot;k&quot;]
S2:pull</code><result>&quot;k&quot;</result><code>S2</code><result>{a, e, c}</result><code>
:&gt; MRU order
let S3 := set(&quot;cake&quot;):order(set::order::MRU)</code><result>{c, a, k, e}</result><code>S3[&quot;a&quot;]; S3[&quot;e&quot;]; S3[&quot;c&quot;]; S3[&quot;k&quot;]
S3:pull</code><result>&quot;a&quot;</result><code>S3</code><result>{k, c, e}</result></examples></method><method category="set" name=":push" variadic="true"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Value" type="any"/></parameters><description>Inserts each <mini>Value</mini> into <mini>Set</mini> at the start.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S:push(&quot;A&quot;)</code><result>{A, B, C}</result><code>S:push(&quot;D&quot;)</code><result>{D, A, B, C}</result><code>S:push(&quot;E&quot;, &quot;B&quot;)</code><result>{B, E, D, A, C}</result><code>S</code><result>{B, E, D, A, C}</result></examples></method><method category="set" name=":put" variadic="true"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Value" type="any"/></parameters><description>Inserts each <mini>Value</mini> into <mini>Set</mini> at the end.
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S:put(&quot;A&quot;)</code><result>{B, C, A}</result><code>S:put(&quot;D&quot;)</code><result>{B, C, A, D}</result><code>S:put(&quot;E&quot;, &quot;B&quot;)</code><result>{C, A, D, E, B}</result><code>S</code><result>{C, A, D, E, B}</result></examples></method><method category="set" name=":random" variadic="false"><return type="any"/><parameters><parameter name="List" type="set"/></parameters><description>Returns a random (assignable) node from <mini>Set</mini>.
</description><examples><code>let S := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S:random</code><result>&quot;e&quot;</result><code>S:random</code><result>&quot;e&quot;</result></examples></method><method category="set" name=":remove" variadic="false"><return type="map"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Set</mini> for which <mini>Function(Value)</mini> doesn&apos;t return <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let S := set(1 .. 20)
S:remove(2 | _)</code><result>{2 is &lt;set::node&gt;, 4 is 4, 6 is 6, 8 is 8, 10 is 10, 12 is 12, 14 is 14, 16 is 16, 18 is 18, 20 is 20}</result><code>S</code><result>{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}</result></examples></method><method category="set" name=":reverse" variadic="false"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/></parameters><description>Reverses the iteration order of <mini>Set</mini> in-place and returns it.
</description><examples><code>let S := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S:reverse</code><result>{e, k, a, c}</result></examples></method><method category="set" name=":size" variadic="false"><return type="integer"/><parameters><parameter name="Set" type="set"/></parameters><description>Returns the number of values in <mini>Set</mini>.
</description><examples><code>set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]):size</code><result>3</result></examples></method><method category="set" name=":sort" variadic="false"><return type="Set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Cmp" type="function"/></parameters><description>Sorts the values (changes the iteration order) of <mini>Set</mini> using <mini>Cmp(Valueᵢ,  Valueⱼ)</mini> and returns <mini>Set</mini>
</description><examples><code>let S := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S:sort(&gt;)</code><result>{k, e, c, a}</result></examples></method><method category="set" name=":sort" variadic="false"><return type="Set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Cmp" type="method"/></parameters><description>Sorts the values (changes the iteration order) of <mini>Set</mini> using <mini>Cmp(Valueᵢ,  Valueⱼ)</mini> and returns <mini>Set</mini>
</description><examples><code>let S := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S:sort(&gt;)</code><result>{k, e, c, a}</result></examples></method><method category="set" name=":sort" variadic="false"><return type="Set"/><parameters><parameter name="Set" type="set::mutable"/></parameters><description>Sorts the values (changes the iteration order) of <mini>Set</mini> using <mini>Valueᵢ &lt; Valueⱼ</mini> and returns <mini>Set</mini>.
</description><examples><code>let S := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>S:sort</code><result>{a, c, e, k}</result></examples></method><method category="set" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set::mutable"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="set" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="integer"/><parameter name="Arg₄" type="set::mutable"/></parameters><description/><examples/></method><method category="set" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="set" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="set::mutable"/></parameters><description/><examples/></method><method category="set" name=":subsets" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set"/></parameters><description/><examples/></method><method category="set" name=":subsets" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="set"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="set" name=":take" variadic="false"><return type="set"/><parameters><parameter name="Set" type="set::mutable"/><parameter name="Source" type="set::mutable"/></parameters><description>Inserts the values from <mini>Source</mini> into <mini>Set</mini>,  leaving <mini>Source</mini> empty.
</description><examples><code>let A := set(&quot;cat&quot;)</code><result>{c, a, t}</result><code>let B := set(&quot;cake&quot;)</code><result>{c, a, k, e}</result><code>A:take(B)</code><result>{c, a, t, k, e}</result><code>A</code><result>{c, a, t, k, e}</result><code>B</code><result>{}</result></examples></method><method category="set" name=":visit" variadic="false"><return type="set"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="Set" type="set"/></parameters><description>Returns a new set contains copies of the elements of <mini>Set</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="set" name="&lt;" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a <mini>Set₂</mini> if <mini>Set₁</mini> is a strict subset of <mini>Set₂</mini>,  otherwise returns <mini>nil</mini>.
</description><examples><code>let A := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>let B := set(&quot;ban&quot;)</code><result>{b, a, n}</result><code>let C := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>let D := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>B &lt; A</code><result>{b, a, n, d}</result><code>C &lt; A</code><result>nil</result><code>D &lt; A</code><result>nil</result></examples></method><method category="set" name="&lt;=" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a <mini>Set₂</mini> if <mini>Set₁</mini> is a subset of <mini>Set₂</mini>,  otherwise returns <mini>nil</mini>.
</description><examples><code>let A := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>let B := set(&quot;ban&quot;)</code><result>{b, a, n}</result><code>let C := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>let D := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>B &lt;= A</code><result>{b, a, n, d}</result><code>C &lt;= A</code><result>nil</result><code>D &lt;= A</code><result>{b, a, n, d}</result></examples></method><method category="set" name="&lt;=&gt;" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a tuple of <mini>(Set₁ / Set₂,  Set₁ * Set₂,  Set₂ / Set₁)</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A &lt;=&gt; B</code><result>({n}, {b, a}, {r, e, d})</result></examples></method><method category="set" name="&gt;" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a <mini>Set₂</mini> if <mini>Set₁</mini> is a strict superset of <mini>Set₂</mini>,  otherwise returns <mini>nil</mini>.
</description><examples><code>let A := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>let B := set(&quot;ban&quot;)</code><result>{b, a, n}</result><code>let C := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>let D := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>A &gt; B</code><result>{b, a, n}</result><code>A &gt; C</code><result>nil</result><code>A &gt; D</code><result>nil</result></examples></method><method category="set" name="&gt;&lt;" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set containing the values of <mini>Set₁</mini> and <mini>Set₂</mini> that are not in both.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A &gt;&lt; B</code><result>{n, r, e, d}</result></examples></method><method category="set" name="&gt;=" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a <mini>Set₂</mini> if <mini>Set₁</mini> is a superset of <mini>Set₂</mini>,  otherwise returns <mini>nil</mini>.
</description><examples><code>let A := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>let B := set(&quot;ban&quot;)</code><result>{b, a, n}</result><code>let C := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>let D := set(&quot;bandana&quot;)</code><result>{b, a, n, d}</result><code>A &gt;= B</code><result>{b, a, n}</result><code>A &gt;= C</code><result>nil</result><code>A &gt;= D</code><result>{b, a, n, d}</result></examples></method><type name="set::mutable"><parents><parent type="set"/></parents><description/><examples/></type><type name="set::order"><parents><parent type="enum"/></parents><description>* <mini>::Insert</mini> - default ordering; inserted values are put at end, no reordering on access.
* <mini>::LRU</mini> - inserted values are put at start, accessed values are moved to start.
* <mini>::MRU</mini> - inserted values are put at end, accessed values are moved to end.
* <mini>::Ascending</mini> - inserted values are kept in ascending order, no reordering on access.
* <mini>::Descending</mini> - inserted values are kept in descending order, no reordering on access.
</description><examples/></type><type name="set"><parents><parent type="sequence"/></parents><description>A set of values.
Values can be of any type supporting hashing and comparison.
By default,  iterating over a set generates the values in the order they were inserted,  however this ordering can be changed.
</description><examples/></type><method category="set" name="[]" variadic="false"><return type="some|nil"/><parameters><parameter name="Set" type="set"/><parameter name="Value" type="any"/></parameters><description>Returns <mini>Value</mini> if it is in <mini>Set</mini>,  otherwise returns <mini>nil</mini>..
</description><examples><code>let S := set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])
S[&quot;A&quot;]</code><result>&quot;A&quot;</result><code>S[&quot;D&quot;]</code><result>nil</result><code>S</code><result>{A, B, C}</result></examples></method><method category="set" name="\/" variadic="false"><return type="set"/><parameters><parameter name="Set₁" type="set"/><parameter name="Set₂" type="set"/></parameters><description>Returns a new set combining the values of <mini>Set₁</mini> and <mini>Set₂</mini>.
</description><examples><code>let A := set(&quot;banana&quot;)</code><result>{b, a, n}</result><code>let B := set(&quot;bread&quot;)</code><result>{b, r, e, a, d}</result><code>A \/ B</code><result>{b, a, n, r, e, d}</result></examples></method><constructor category="set" name="set" variadic="true"><return type="set"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a set of all the values produced by <mini>Sequence</mini>.
</description><examples><code>set(&quot;cake&quot;)</code><result>{c, a, k, e}</result></examples></constructor><constructor category="set" name="set" variadic="false"><return type="set"/><parameters/><description>Returns a new set.
</description><examples><code>set()</code><result>{}</result></examples></constructor></category><category name="function"><method category="function" name="!" variadic="false"><return type="any"/><parameters><parameter name="Function" type="function"/><parameter name="Tuple" type="tuple"/></parameters><description>Calls <mini>Function</mini> with the values in <mini>Tuple</mini> as positional arguments.
</description><examples/></method><method category="function" name="!" variadic="false"><return type="any"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="list"/></parameters><description>Calls <mini>Function</mini> with the values in <mini>List</mini> as positional arguments.
</description><examples/></method><method category="function" name="!" variadic="false"><return type="any"/><parameters><parameter name="Function" type="function"/><parameter name="Map" type="map"/></parameters><description>Calls <mini>Function</mini> with the keys and values in <mini>Map</mini> as named arguments.
Returns an error if any of the keys in <mini>Map</mini> is not a string or method.
</description><examples/></method><method category="function" name="!" variadic="false"><return type="any"/><parameters><parameter name="Function" type="function"/><parameter name="Tuple" type="tuple"/><parameter name="Map" type="map"/></parameters><description>Calls <mini>Function</mini> with the values in <mini>Tuple</mini> as positional arguments and the keys and values in <mini>Map</mini> as named arguments.
Returns an error if any of the keys in <mini>Map</mini> is not a string or method.
</description><examples/></method><method category="function" name="!" variadic="false"><return type="any"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="list"/><parameter name="Map" type="map"/></parameters><description>Calls <mini>Function</mini> with the values in <mini>List</mini> as positional arguments and the keys and values in <mini>Map</mini> as named arguments.
Returns an error if any of the keys in <mini>Map</mini> is not a string or method.
</description><examples/></method><method category="function" name="!!" variadic="false"><return type="function::partial"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="list"/></parameters><description>
.. deprecated:: 2.7.0

   Use <mini>$!</mini> instead.

Returns a function equivalent to <mini>fun(Args...) Function(List[1],  List[2],  ...,  Args...)</mini>.
</description><examples/></method><method category="function" name="$" variadic="true"><return type="function::partial"/><parameters><parameter name="Function" type="function"/><parameter name="Values..." type="any"/></parameters><description>Returns a function equivalent to <mini>fun(Args...) Function(Values...,  Args...)</mini>.
</description><examples/></method><method category="function" name="$!" variadic="false"><return type="function::partial"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="list"/></parameters><description>Returns a function equivalent to <mini>fun(Args...) Function(List[1],  List[2],  ...,  Args...)</mini>.
</description><examples/></method><method category="function" name="$!" variadic="false"><return type="function::partial"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="map"/></parameters><description>Returns a function equivalent to <mini>fun(Args...) Function(List[1],  List[2],  ...,  Args...)</mini>.
</description><examples/></method><method category="function" name="$!" variadic="false"><return type="function::partial"/><parameters><parameter name="Function" type="function"/><parameter name="List" type="list"/><parameter name="Arg₃" type="map"/></parameters><description>Returns a function equivalent to <mini>fun(Args...) Function(List[1],  List[2],  ...,  Args...)</mini>.
</description><examples/></method><method category="function" name="-&gt;" variadic="false"><return type="chained"/><parameters><parameter name="Base" type="function"/><parameter name="Function" type="function"/></parameters><description>Returns a chained function equivalent to <mini>Function(Base(...))</mini>.
</description><examples><code>let F := :upper -&gt; (3 * _)
F(&quot;hello&quot;)</code><result>&quot;HELLOHELLOHELLO&quot;</result><code>F(&quot;cake&quot;)</code><result>&quot;CAKECAKECAKE&quot;</result></examples></method><method category="function" name="-&gt;!" variadic="false"><return type="function"/><parameters><parameter name="Base" type="function"/><parameter name="F" type="function"/></parameters><description>Returns a chained function equivalent to <mini>F ! Base(...)</mini>.
</description><examples><code>let F := list -&gt;! 3</code><result>&lt;chained&gt;</result><code>F(&quot;cat&quot;)</code><result>&quot;t&quot;</result></examples></method><method category="function" name="-&gt;?" variadic="false"><return type="function"/><parameters><parameter name="Base" type="function"/><parameter name="F" type="function"/></parameters><description>Returns a chained function equivalent to <mini>Base(...){F(it)}</mini>.
</description><examples><code>let F := 1 -&gt;? (2 | _) -&gt; (_ / 2)</code><result>&lt;chained&gt;</result><code>list(1 .. 10 -&gt; F)</code><result>[nil, 1, nil, 2, nil, 3, nil, 4, nil, 5]</result></examples></method><method category="function" name="/" variadic="false"><return type="function"/><parameters><parameter name="Function" type="function"/></parameters><description>Returns a function equivalent to <mini>fun(Args...) Function()</mini>.
</description><examples/></method><method category="function" name=":arity" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="function::partial"/></parameters><description/><examples/></method><method category="function" name=":set" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="function::partial"/></parameters><description/><examples/></method><method category="function" name=":source" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="function"/></parameters><description/><examples/></method><method category="function" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="function::partial"/><parameter name="Arg₂" type="function::partial"/></parameters><description/><examples/></method><method category="function" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="function::value"/><parameter name="Arg₂" type="function::value"/></parameters><description/><examples/></method><method category="function" name="=&gt;" variadic="false"><return type="chained"/><parameters><parameter name="Base" type="function"/><parameter name="Function" type="function"/></parameters><description>Returns a chained function equivalent to <mini>Function(Base(Arg₁),  Base(Arg₂),  ...)</mini>.
</description><examples><code>let F := :upper =&gt; +
F(&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;)</code><result>&quot;HELLO&quot;</result></examples></method><type name="function::partial"><parents><parent type="function"/><parent type="sequence"/></parents><description/><examples/></type><type name="function"><parents/><description>The base type of all functions.
</description><examples/></type><type name="function::value"><parents><parent type="function"/></parents><description/><examples/></type><method category="function" name="[]" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="function::partial"/></parameters><description/><examples/></method><function name="function::constant"><return/><parameters><parameter name="Value" type="any"/></parameters><description/><examples/></function><constructor name="function::partial"><return/><parameters><parameter name="Function" type="function"/><parameter name="Size" type="integer"/></parameters><description/><examples/></constructor><function name="function::variable"><return/><parameters><parameter name="Value" type="any"/></parameters><description/><examples/></function></category><category name="runtime"><method category="runtime" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="uninitialized"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="runtime" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="error::value"/></parameters><description/><examples/></method><method category="runtime" name=":error" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="channel"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="string"/></parameters><description/><examples/></method><method category="runtime" name=":raise" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="channel"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="any"/></parameters><description/><examples/></method><method category="runtime" name=":raise" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="channel"/><parameter name="Arg₂" type="error::value"/></parameters><description/><examples/></method><method category="runtime" name=":value" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="error::value"/></parameters><description/><examples/></method><type name="debugger"><parents/><description/><examples/></type><type name="resumable::state"><parents><parent type="state"/></parents><description/><examples/></type><type name="state"><parents><parent type="function"/></parents><description/><examples/></type><type name="uninitialized"><parents/><description>An uninitialized value. Used for forward declarations.
</description><examples/></type><function name="atomic"><return/><parameters><parameter name="Args..." type="any"/><parameter name="Fn" type="function"/></parameters><description>Calls <mini>Fn(Args)</mini> in a new context without a scheduler and returns the result.
</description><examples/></function><function name="backtrace"><return/><parameters/><description/><examples/></function><function name="break"><return/><parameters><parameter name="Condition?" type="any"/></parameters><description>If a debugger is present and <mini>Condition</mini> is omitted or not <mini>nil</mini> then triggers a breakpoint.
</description><examples/></function><function name="callcc"><return/><parameters/><description/><examples/></function><function name="calldc"><return/><parameters/><description/><examples/></function><function name="finalize"><return/><parameters><parameter name="Value" type="any"/><parameter name="Fn" type="function"/></parameters><description>Registers <mini>Fn</mini> as the finalizer for <mini>Value</mini>.
</description><examples/></function><function name="markcc"><return/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></function><function name="mlsleep"><return/><parameters><parameter name="Arg₁" type="real"/></parameters><description/><examples/></function><function name="swapcc"><return/><parameters><parameter name="Arg₁" type="state"/></parameters><description/><examples/></function><function name="trace"><return/><parameters/><description>Returns the call stack trace (source locations).
</description><examples/></function></category><category name="context"><type name="context"><parents><parent type="function"/></parents><description>A context key can be used to create context specific values.
If <mini>key</mini> is a context key,  then calling <mini>key()</mini> no arguments returns the value associated with the key in the current context,  or <mini>nil</mini> is no value is associated.
Calling <mini>key(Value,  Function)</mini> will invoke <mini>Function</mini> in a new context where <mini>key</mini> is associated with <mini>Value</mini>.
</description><examples/></type><constructor name="context"><return/><parameters/><description>Creates a new context specific key.
</description><examples/></constructor></category><category name="error"><method category="error" name=":message" variadic="false"><return type="string"/><parameters><parameter name="Error" type="error::value"/></parameters><description>Returns the message of <mini>Error</mini>.
</description><examples/></method><method category="error" name=":raise" variadic="false"><return type="error"/><parameters><parameter name="Error" type="error::value"/></parameters><description>Returns <mini>Error</mini> as an error (i.e. rethrows the error).
</description><examples/></method><method category="error" name=":trace" variadic="false"><return type="list"/><parameters><parameter name="Error" type="error::value"/></parameters><description>Returns the stack trace of <mini>Error</mini> as a list of tuples.
</description><examples/></method><method category="error" name=":type" variadic="false"><return type="string"/><parameters><parameter name="Error" type="error::value"/></parameters><description>Returns the type of <mini>Error</mini>.
</description><examples/></method><type name="error"><parents/><description>An error. Values of this type are not accessible from Minilang code since they are caught by the runtime. Each error contains an *error value* which contains the details of the error.
</description><examples/></type><type name="error::value"><parents/><description>An error value. Error values contain the details of an error but are not themselves errors (since errors are caught by the runtime).
</description><examples/></type><constructor name="error"><return/><parameters><parameter name="Type" type="string"/><parameter name="Message" type="string"/></parameters><description>Creates an error exception with type <mini>Type</mini> and message <mini>Message</mini>. Since this creates an exception,  it will trigger the current exception handler.
</description><examples/></constructor><function name="raise"><return/><parameters><parameter name="Type" type="string"/><parameter name="Value" type="any"/></parameters><description>Creates a general exception with type <mini>Type</mini> and value <mini>Value</mini>. Since this creates an exception,  it will trigger the current exception handler.
</description><examples/></function></category><category name="debugger"><method category="debugger" name=":breakpoint_clear" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="Source" type="string"/><parameter name="Line" type="integer"/></parameters><description>Clears any breakpoints from <mini>Source</mini> at line <mini>Line</mini>.
</description><examples/></method><method category="debugger" name=":breakpoint_set" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="Source" type="string"/><parameter name="Line" type="integer"/></parameters><description>Sets a breakpoint in <mini>Source</mini> at line <mini>Line</mini>.
</description><examples/></method><method category="debugger" name=":continue" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="State" type="state"/><parameter name="Value" type="any"/></parameters><description>Resume <mini>State</mini> with <mini>Value</mini> in the debugger.
</description><examples/></method><method category="debugger" name=":error_mode" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="Set" type="any"/></parameters><description>If <mini>Set</mini> is not <mini>nil</mini> then <mini>Debugger</mini> will stop on errors.
</description><examples/></method><method category="debugger" name=":locals" variadic="false"><return type="list[string]"/><parameters><parameter name="State" type="state"/></parameters><description>Returns the list of locals in <mini>State</mini>. Returns an empty list if <mini>State</mini> does not have any debugging information.
</description><examples/></method><method category="debugger" name=":source" variadic="false"><return type="tuple[string,  integer]"/><parameters><parameter name="State" type="state"/></parameters><description>Returns the source location for <mini>State</mini>.
</description><examples/></method><method category="debugger" name=":step_in" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="State" type="state"/><parameter name="Value" type="any"/></parameters><description>Resume <mini>State</mini> with <mini>Value</mini> in the debugger,  stopping after the next line.
</description><examples/></method><method category="debugger" name=":step_mode" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="Set" type="any"/></parameters><description>If <mini>Set</mini> is not <mini>nil</mini> then <mini>Debugger</mini> will stop on after each line.
</description><examples/></method><method category="debugger" name=":step_out" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="State" type="state"/><parameter name="Value" type="any"/></parameters><description>Resume <mini>State</mini> with <mini>Value</mini> in the debugger,  stopping at the end of the current function.
</description><examples/></method><method category="debugger" name=":step_over" variadic="false"><return type=""/><parameters><parameter name="Debugger" type="debugger"/><parameter name="State" type="state"/><parameter name="Value" type="any"/></parameters><description>Resume <mini>State</mini> with <mini>Value</mini> in the debugger,  stopping after the next line in the same function (i.e. stepping over function calls).
</description><examples/></method><method category="debugger" name=":trace" variadic="false"><return type="list[state]"/><parameters><parameter name="State" type="state"/></parameters><description>Returns the call trace from <mini>State</mini>,  excluding states that do not have debugging information.
</description><examples/></method><constructor name="debugger"><return/><parameters><parameter name="Function" type="any"/></parameters><description>Returns a new debugger for <mini>Function()</mini>.
</description><examples/></constructor></category><category name="semaphore"><method category="semaphore" name=":signal" variadic="false"><return type="integer"/><parameters><parameter name="Semaphore" type="semaphore"/></parameters><description>Increments the internal value in <mini>Semaphore</mini>,  resuming any waiters. Returns the new value.
</description><examples/></method><method category="semaphore" name=":value" variadic="false"><return type="integer"/><parameters><parameter name="Semaphore" type="semaphore"/></parameters><description>Returns the internal value in <mini>Semaphore</mini>.
</description><examples/></method><method category="semaphore" name=":wait" variadic="false"><return type="integer"/><parameters><parameter name="Semaphore" type="semaphore"/></parameters><description>Waits until the internal value in <mini>Semaphore</mini> is postive,  then decrements it and returns the new value.
</description><examples/></method><type name="semaphore"><parents/><description>A semaphore for synchronizing concurrent code.
</description><examples/></type><constructor name="semaphore"><return/><parameters><parameter name="Initial?" type="integer"/></parameters><description>Returns a new semaphore with initial value <mini>Initial</mini> or <mini>1</mini> if no initial value is specified.
</description><examples/></constructor></category><category name="condition"><method category="condition" name=":broadcast" variadic="false"><return type=""/><parameters><parameter name="Condition" type="condition"/></parameters><description>Signals <mini>Condition</mini>,  resuming all waiters.
</description><examples/></method><method category="condition" name=":signal" variadic="false"><return type=""/><parameters><parameter name="Condition" type="condition"/></parameters><description>Signals <mini>Condition</mini>,  resuming a single waiter.
</description><examples/></method><method category="condition" name=":wait" variadic="false"><return type="integer"/><parameters><parameter name="Condition" type="condition"/><parameter name="Semaphore" type="semaphore"/></parameters><description>Increments <mini>Semaphore</mini>,  waits until <mini>Condition</mini> is signalled,  then decrements <mini>Semaphore</mini> (waiting if necessary) and returns its value.
</description><examples/></method><type name="condition"><parents/><description>A condition for synchronizing concurrent code.
</description><examples/></type><constructor name="condition"><return/><parameters/><description>Returns a new condition.
</description><examples/></constructor></category><category name="rwlock"><method category="rwlock" name=":rdlock" variadic="false"><return type=""/><parameters><parameter name="Lock" type="rwlock"/></parameters><description>Locks <mini>Lock</mini> for reading,  waiting if there are any writers using or waiting to use <mini>Lock</mini>.
</description><examples/></method><method category="rwlock" name=":unlock" variadic="false"><return type=""/><parameters><parameter name="Lock" type="rwlock"/></parameters><description>Unlocks <mini>Lock</mini>,  resuming any waiting writers or readers (giving preference to writers).
</description><examples/></method><method category="rwlock" name=":wrlock" variadic="false"><return type=""/><parameters><parameter name="Lock" type="rwlock"/></parameters><description>Locks <mini>Lock</mini> for reading,  waiting if there are any readers or other writers using <mini>Lock</mini>.
</description><examples/></method><type name="rwlock"><parents/><description>A read-write lock for synchronizing concurrent code.
</description><examples/></type><constructor name="rwlock"><return/><parameters/><description>Returns a new read-write lock.
</description><examples/></constructor></category><category name="channel"><method category="channel" name=":close" variadic="true"><return type=""/><parameters><parameter name="Channel" type="channel"/><parameter name="Function" type="function"/></parameters><description/><examples/></method><method category="channel" name=":next" variadic="false"><return type="any"/><parameters><parameter name="Channel" type="channel"/></parameters><description/><examples/></method><method category="channel" name=":next" variadic="false"><return type="any"/><parameters><parameter name="Channel" type="channel"/><parameter name="Reply" type="any"/></parameters><description/><examples/></method><method category="channel" name=":open" variadic="false"><return type="channel|nil"/><parameters><parameter name="Channel" type="channel"/></parameters><description/><examples/></method><method category="channel" name=":send" variadic="false"><return type="any"/><parameters><parameter name="Channel" type="channel"/><parameter name="Message" type="any"/></parameters><description/><examples/></method><method category="channel" name=":start" variadic="true"><return type="any"/><parameters><parameter name="Channel" type="channel"/><parameter name="Function" type="function"/></parameters><description/><examples/></method><type name="channel"><parents/><description/><examples/></type><function name="channel"><return/><parameters/><description/><examples/></function></category><category name="pqueue"><method category="pqueue" name=":adjust" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Entry" type="pqueue::entry"/><parameter name="Priority" type="any"/></parameters><description>Changes the priority of <mini>Entry</mini> to <mini>Priority</mini>.
</description><examples/></method><method category="pqueue" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Queue" type="pqueue"/></parameters><description>Returns the number of entries in <mini>Queue</mini>.
</description><examples/></method><method category="pqueue" name=":entry" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Queue" type="pqueue"/><parameter name="Value" type="any"/><parameter name="Priority" type="any"/></parameters><description>Creates and returns a new entry with value <mini>Value</mini> and priority <mini>Priority</mini> without inserting it into <mini>Queue</mini>.
</description><examples/></method><method category="pqueue" name=":insert" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Queue" type="pqueue"/><parameter name="Value" type="any"/><parameter name="Priority" type="any"/></parameters><description>Creates and returns a new entry in <mini>Queue</mini> with value <mini>Value</mini> and priority <mini>Priority</mini>.
</description><examples/></method><method category="pqueue" name=":keep" variadic="false"><return type="pqueue::entry|nil"/><parameters><parameter name="Queue" type="pqueue"/><parameter name="Target" type="integer"/><parameter name="Value" type="any"/><parameter name="Priority" type="any"/></parameters><description>Creates and returns a new entry in <mini>Queue</mini> with value <mini>Value</mini> and priority <mini>Priority</mini> if either <mini>Queue</mini>
has fewer than <mini>Target</mini> entries or <mini>Priority</mini> is lower than the current highest priority entry in <mini>Queue</mini>
(removing the current highest priority entry in this case).

Returns the entry removed from <mini>Queue</mini> or <mini>nil</mini> if no entry was removed.
</description><examples/></method><method category="pqueue" name=":lower" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Entry" type="pqueue::entry"/><parameter name="Priority" type="any"/></parameters><description>Changes the priority of <mini>Entry</mini> to <mini>Priority</mini> only if its current priority is greater than <mini>Priority</mini>. <mini>Entry</mini> is added back into its queue if the priority changes.
</description><examples/></method><method category="pqueue" name=":next" variadic="false"><return type="pqueue::entry|nil"/><parameters><parameter name="Queue" type="pqueue"/></parameters><description>Removes and returns the highest priority entry in <mini>Queue</mini>,  or <mini>nil</mini> if <mini>Queue</mini> is empty.
</description><examples/></method><method category="pqueue" name=":peek" variadic="false"><return type="pqueue::entry|nil"/><parameters><parameter name="Queue" type="pqueue"/></parameters><description>Returns the highest priority entry in <mini>Queue</mini> without removing it,  or <mini>nil</mini> if <mini>Queue</mini> is empty.
</description><examples/></method><method category="pqueue" name=":priority" variadic="false"><return type="any"/><parameters><parameter name="Entry" type="pqueue::entry"/></parameters><description>Returns the priority associated with <mini>Entry</mini>.
</description><examples/></method><method category="pqueue" name=":queued" variadic="false"><return type="pqueue::entry|nil"/><parameters><parameter name="Entry" type="pqueue::entry"/></parameters><description>Returns <mini>Entry</mini> if it is currently in the priority queue,  otherwise returns <mini>nil</mini>.
</description><examples/></method><method category="pqueue" name=":raise" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Entry" type="pqueue::entry"/><parameter name="Priority" type="any"/></parameters><description>Changes the priority of <mini>Entry</mini> to <mini>Priority</mini> only if its current priority is less than <mini>Priority</mini>. <mini>Entry</mini> is added back into its queue if the priority changes.
</description><examples/></method><method category="pqueue" name=":remove" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Entry" type="pqueue::entry"/></parameters><description>Removes <mini>Entry</mini> from its priority queue.
</description><examples/></method><method category="pqueue" name=":requeue" variadic="false"><return type="pqueue::entry"/><parameters><parameter name="Entry" type="pqueue::entry"/></parameters><description>Adds <mini>Entry</mini> back into its priority queue if it is not currently in the queue.
</description><examples/></method><method category="pqueue" name=":value" variadic="false"><return type="any"/><parameters><parameter name="Entry" type="pqueue::entry"/></parameters><description>Returns the value associated with <mini>Entry</mini>.
</description><examples/></method><type name="pqueue::entry"><parents/><description>A entry in a priority queue.
</description><examples/></type><type name="pqueue"><parents><parent type="sequence"/></parents><description>A priority queue with values and associated priorities.
</description><examples/></type><constructor category="pqueue" name="pqueue" variadic="false"><return type="pqueue"/><parameters/><description>Returns a new priority queue using <mini>&gt;</mini> to compare priorities.
</description><examples/></constructor><constructor category="pqueue" name="pqueue" variadic="false"><return type="pqueue"/><parameters><parameter name="Greater" type="function"/></parameters><description>Returns a new priority queue using <mini>Greater</mini> to compare priorities.
</description><examples/></constructor></category><category name="polynomial"><method category="polynomial" name="!=" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>B</mini> if <mini>A != B</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="*" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A * B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="+" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A + B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="-" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A - B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="number"/><parameter name="B" type="polynomial::rational"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name="/" variadic="false"><return type="polynomial::rational"/><parameters><parameter name="A" type="polynomial::rational"/><parameter name="B" type="number"/></parameters><description>Returns <mini>A / B</mini>.
</description><examples/></method><method category="polynomial" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Poly" type="polynomial"/></parameters><description>Appends a representation of <mini>Poly</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="polynomial" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Poly" type="polynomial::rational"/></parameters><description>Appends a representation of <mini>Poly</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="polynomial" name=":coeff" variadic="false"><return type="number|polynomial"/><parameters><parameter name="Poly" type="polynomial"/><parameter name="Var" type="string"/><parameter name="Degree" type="integer"/></parameters><description>Returns the coefficient of <mini>Var ^ Degree</mini> in <mini>Poly</mini>.
</description><examples><code>let X := polynomial(&quot;x&quot;)
(X ^ 2 + (3 * X) + 2):coeff(&quot;x&quot;, 1)</code><result>3</result></examples></method><method category="polynomial" name=":d" variadic="false"><return type="number|polynomial"/><parameters><parameter name="Poly" type="polynomial"/><parameter name="Var" type="string"/></parameters><description>Returns the derivative of <mini>Poly</mini> w.r.t. <mini>Var</mini>.
</description><examples><code>let X := polynomial(&quot;x&quot;)
(X ^ 2 + (3 * X) + 2):d(&quot;x&quot;)</code><result>2x + 3</result></examples></method><method category="polynomial" name=":degree" variadic="false"><return type="integer"/><parameters><parameter name="Poly" type="polynomial"/><parameter name="Var" type="string"/></parameters><description>Returns the highest degree of <mini>Var</mini> in <mini>Poly</mini>.
</description><examples><code>let X := polynomial(&quot;x&quot;)
(X ^ 2 + (3 * X) + 2):degree(&quot;x&quot;)</code><result>2</result></examples></method><method category="polynomial" name=":red" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="polynomial"/><parameter name="Arg₂" type="polynomial"/></parameters><description/><examples/></method><method category="polynomial" name=":spol" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="polynomial"/><parameter name="Arg₂" type="polynomial"/></parameters><description/><examples/></method><method category="polynomial" name="=" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="polynomial"/></parameters><description>Returns <mini>B</mini> if <mini>A = B</mini> and <mini>nil</mini> otherwise.
</description><examples/></method><type name="polynomial::rational"><parents/><description/><examples/></type><type name="polynomial"><parents><parent type="function"/></parents><description>A polynomial with numeric (real or complex) coefficients.
Calling a polynomial with named arguments returns the result of substituting the named variables with the corresponding values.
</description><examples/></type><method category="polynomial" name="^" variadic="false"><return type="polynomial"/><parameters><parameter name="A" type="polynomial"/><parameter name="B" type="integer"/></parameters><description>Returns <mini>A ^ B</mini>.
</description><examples/></method><constructor category="polynomial" name="polynomial" variadic="false"><return type="polynomial"/><parameters><parameter name="Var" type="string"/></parameters><description>Returns the polynomial corresponding to the variable <mini>Var</mini>.
</description><examples><code>let X := polynomial(&quot;x&quot;), Y := polynomial(&quot;y&quot;)</code><result>y</result><code>let P := (X - Y) ^ 4</code><result>x⁴ - 4x³y + 6x²y² - 4xy³ + y⁴</result><code>P(y is 3)</code><result>x⁴ - 12x³ + 54x² - 108x + 81</result></examples></constructor><function name="polynomial::roots"><return/><parameters><parameter name="Coeffs" type="list"/></parameters><description>Returns the roots of the single variable polynomial <math>Coeff_{0} + Coeff_{1}x + Coeff_{2}x^{2} + ...</math>. If the degree is less than 5,  the relevant formula is used to calculate the roots,  otherwise the roots are estimated using an iterative process.
</description><examples><code>polynomial::roots([2, -3, 1])</code><result>[1, 2]</result></examples></function></category><category name="pi"><method category="pi" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="pi" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="pi" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="regex"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="pi" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="string"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="pi" name=":find" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="regex"/></parameters><description/><examples/></method><method category="pi" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="piece::table"/><parameter name="Arg₂" type="integer"/><parameter name="Arg₃" type="integer"/><parameter name="Arg₄" type="string"/></parameters><description/><examples/></method><type name="piece::table"><parents/><description/><examples/></type><method category="pi" name="piecetable" variadic="false"><return type=""/><parameters/><description/><examples/></method></category><category name="object"><method category="object" name="::" variadic="false"><return type="field"/><parameters><parameter name="Object" type="object"/><parameter name="Field" type="string"/></parameters><description>Retrieves the field <mini>Field</mini> from <mini>Object</mini>. Mainly intended for unpacking objects.
</description><examples/></method><method category="object" name=":MLMethodDefault" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="method"/><parameter name="Arg₂" type="field::modifier"/></parameters><description/><examples/></method><method category="object" name=":MLMethodDefault" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="method"/><parameter name="Arg₂" type="watched"/></parameters><description/><examples/></method><method category="object" name=":MLMethodDefault" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="method"/><parameter name="Arg₂" type="pseudo::object"/></parameters><description/><examples/></method><method category="object" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="object"/></parameters><description/><examples/></method><method category="object" name=":fields" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="class"/></parameters><description/><examples/></method><method category="object" name=":id" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="class"/></parameters><description/><examples/></method><method category="object" name=":register" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="pseudo::class"/></parameters><description/><examples/></method><type name="class"><parents><parent type="type"/></parents><description>Type of all object classes.
</description><examples/></type><type name="field::mutable"><parents><parent type="field"/></parents><description/><examples/></type><type name="field"><parents/><description/><examples/></type><type name="object"><parents/><description>Parent type of all object classes.
</description><examples/></type><type name="property"><parents/><description>A value with an associated setter function.
</description><examples/></type><type name="pseudo::class"><parents><parent type="class"/></parents><description/><examples/></type><constructor name="class"><return/><parameters><parameter name="Parents..." type="class"/><parameter name="Fields..." type="method"/><parameter name="Exports..." type="names"/></parameters><description>Returns a new class inheriting from <mini>Parents</mini>,  with fields <mini>Fields</mini> and exports <mini>Exports</mini>. The special exports <mini>::of</mini> and <mini>::init</mini> can be set to override the default conversion and initialization behaviour. The <mini>::new</mini> export will *always* be set to the original constructor for this class.
</description><examples/></constructor><constructor name="property"><return/><parameters><parameter name="Value" type="any"/><parameter name="Set" type="function"/></parameters><description>Returns a new property which dereferences to <mini>Value</mini>. Assigning to the property will call <mini>Set(NewValue)</mini>.
</description><examples/></constructor></category><category name="enum"><method category="enum" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="enum" name="+" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/><parameter name="Arg₂" type="enum::value"/></parameters><description/><examples/></method><method category="enum" name="-" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="enum" name=".." variadic="false"><return type="enum::interval"/><parameters><parameter name="Min" type="enum::value"/><parameter name="Max" type="enum::value"/></parameters><description>Returns a interval of enum values. <mini>Min</mini> and <mini>Max</mini> must belong to the same enumeration.
</description><examples><code>let day := enum(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;)</code><result>&lt;&lt;day&gt;&gt;</result><code>day::Mon .. day::Fri</code><result>&lt;enum-interval[day]&gt;</result></examples></method><method category="enum" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="enum::value"/></parameters><description/><examples/></method><method category="enum" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Enum" type="enum"/></parameters><description>Returns the size of the enumeration <mini>Enum</mini>.
</description><examples><code>let day := enum(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;)</code><result>&lt;&lt;day&gt;&gt;</result><code>day:count</code><result>7</result></examples></method><method category="enum" name=":next" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/></parameters><description/><examples/></method><method category="enum" name=":prev" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/></parameters><description/><examples/></method><method category="enum" name=":random" variadic="false"><return type="enum::value"/><parameters><parameter name="Enum" type="enum"/></parameters><description/><examples/></method><method category="enum" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/><parameter name="Arg₂" type="integer"/></parameters><description/><examples/></method><method category="enum" name="&lt;&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="integer"/><parameter name="Arg₂" type="enum::value"/></parameters><description/><examples/></method><type name="enum::interval"><parents><parent type="sequence"/></parents><description>A interval of enum values.
</description><examples/></type><type name="enum"><parents><parent type="type"/><parent type="sequence"/></parents><description>The base type of enumeration types.
</description><examples/></type><constructor category="enum" name="enum" variadic="true"><return type="enum"/><parameters><parameter name="Names..." type="string"/></parameters><description>Returns a new enumeration type.
</description><examples><code>let day := enum(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;)</code><result>&lt;&lt;day&gt;&gt;</result><code>day::Wed</code><result>Wed</result><code>day::Fri + 0</code><result>Fri</result></examples></constructor><constructor category="enum" name="enum" variadic="true"><return type="enum"/><parameters><parameter name="Name, Value" type="names"/></parameters><description>Returns a new enumeration type.
</description><examples><code>let colour := enum(Red is 10, Green is 20, Blue is 30)</code><result>&lt;&lt;colour&gt;&gt;</result><code>colour::Red</code><result>Red</result><code>list(colour, _ + 0)</code><result>[Red, Green, Blue]</result></examples></constructor><type name="enum::cyclic"><parents><parent type="enum"/></parents><description/><examples/></type><method category="enum" name="enum::cyclic" variadic="true"><return type="enum"/><parameters><parameter name="Name, Value" type="names"/></parameters><description>Returns a new enumeration type.
</description><examples><code>let colour := enum::cyclic(Red is 10, Green is 20, Blue is 30)</code><result>&lt;&lt;colour&gt;&gt;</result><code>colour::Red</code><result>Red</result><code>list(colour, _ + 0)</code><result>[Red, Green, Blue]</result></examples></method><method category="enum" name="enum::cyclic" variadic="true"><return type="enum"/><parameters><parameter name="Names..." type="string"/></parameters><description>Returns a new enumeration type.
</description><examples><code>let day := enum::cyclic(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;)</code><result>&lt;&lt;day&gt;&gt;</result><code>day::Wed</code><result>Wed</result><code>day::Fri + 0</code><result>Fri</result></examples></method><type name="enum::value"><parents><parent type="integer64"/></parents><description>An instance of an enumeration type.
</description><examples/></type><method category="enum" name="integer" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="enum::value"/></parameters><description/><examples/></method></category><category name="flags"><method category="flags" name="+" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the union of <mini>Flags₁</mini> and <mini>Flags₂</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode::Read + mode::Write</code><result>Write,Read</result></examples></method><method category="flags" name="-" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the difference of <mini>Flags₁</mini> and <mini>Flags₂</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode(&quot;Read&quot;, &quot;Write&quot;) - mode::Write</code><result>Read</result></examples></method><method category="flags" name="/" variadic="false"><return type="flags::spec"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description/><examples/></method><method category="flags" name="/" variadic="false"><return type="flags::spec"/><parameters><parameter name="Flags" type="flags::value"/></parameters><description/><examples/></method><method category="flags" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="flags::value"/></parameters><description/><examples/></method><method category="flags" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="flags::spec"/></parameters><description/><examples/></method><method category="flags" name=":in" variadic="false"><return type=""/><parameters><parameter name="Flags" type="flags::value"/><parameter name="Spec" type="flags::spec"/></parameters><description/><examples/></method><method category="flags" name="&lt;" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the <mini>Flags₂</mini> if it contains all of <mini>Flags₁</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode(&quot;Read&quot;, &quot;Write&quot;) &lt; mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>Write,Read,Execute</result><code>mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;) &lt; mode(&quot;Read&quot;, &quot;Write&quot;)</code><result>nil</result></examples></method><method category="flags" name="&lt;=" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the <mini>Flags₂</mini> if it contains all of <mini>Flags₁</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode(&quot;Read&quot;, &quot;Write&quot;) &lt;= mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>Write,Read,Execute</result><code>mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;) &lt;= mode(&quot;Read&quot;, &quot;Write&quot;)</code><result>nil</result></examples></method><method category="flags" name="&gt;" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the <mini>Flags₂</mini> if it is contained in <mini>Flags₁</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode(&quot;Read&quot;, &quot;Write&quot;) &gt; mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>nil</result><code>mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;) &gt; mode(&quot;Read&quot;, &quot;Write&quot;)</code><result>Write,Read</result></examples></method><method category="flags" name="&gt;=" variadic="false"><return type="flags::value"/><parameters><parameter name="Flags₁" type="flags::value"/><parameter name="Flags₂" type="flags::value"/></parameters><description>Returns the <mini>Flags₂</mini> if it is contained in <mini>Flags₁</mini>. <mini>Flags₁</mini> and <mini>Flags₂</mini> must have the same flags type.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode(&quot;Read&quot;, &quot;Write&quot;) &gt;= mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>nil</result><code>mode(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;) &gt;= mode(&quot;Read&quot;, &quot;Write&quot;)</code><result>Write,Read</result></examples></method><type name="flags"><parents><parent type="type"/></parents><description>The base type of flag types.
</description><examples/></type><constructor category="flags" name="flags" variadic="true"><return type="flags"/><parameters><parameter name="Name₁" type="string"/></parameters><description>Returns a new flags type,  where <mini>Nameᵢ</mini> has value <math>2^{i-1}</math>.
</description><examples><code>let mode := flags(&quot;Read&quot;, &quot;Write&quot;, &quot;Execute&quot;)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode::Read</code><result>Read</result><code>mode::Read + mode::Write</code><result>Write,Read</result></examples></constructor><constructor category="flags" name="flags" variadic="true"><return type="flags"/><parameters><parameter name="Name, Value" type="names"/></parameters><description>Returns a new flags type
Returns a new flags type,  where <mini>Nameᵢ</mini> has value <mini>Valueᵢ</mini>.
</description><examples><code>let mode := flags(Read is 1, Write is 4, Execute is 32)</code><result>&lt;&lt;mode&gt;&gt;</result><code>mode::Read</code><result>Read</result><code>mode::Read + mode::Write</code><result>Write,Read</result></examples></constructor><type name="flags::spec"><parents/><description>A pair of flag sets for including and excluding flags.
</description><examples/></type><type name="flags::value"><parents/><description>An instance of a flags type.
</description><examples/></type><method category="flags" name="list" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="flags::value"/></parameters><description/><examples/></method></category><category name="range"><method category="range" name="!=" variadic="false"><return type="integer::range|nil"/><parameters><parameter name="A" type="integer::range"/><parameter name="B" type="integer::range"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name="*" variadic="false"><return type="integer::range"/><parameters><parameter name="Range" type="integer::range"/><parameter name="Scale" type="integer"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name="*" variadic="false"><return type="integer::range"/><parameters><parameter name="Scale" type="integer"/><parameter name="Range" type="integer::range"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name="+" variadic="false"><return type="integer::range"/><parameters><parameter name="Range" type="integer::range"/><parameter name="Shift" type="integer"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name="+" variadic="false"><return type="integer::range"/><parameters><parameter name="Shift" type="integer"/><parameter name="Range" type="integer::range"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name="-" variadic="false"><return type="integer::range"/><parameters><parameter name="Range" type="integer::range"/><parameter name="Shift" type="integer"/></parameters><description>Returns a range
</description><examples/></method><method category="range" name=".." variadic="false"><return type="real::range"/><parameters><parameter name="Start" type="number"/><parameter name="Limit" type="number"/><parameter name="Arg₃" type="number"/></parameters><description/><examples/></method><method category="range" name=":bin" variadic="false"><return type="integer|nil"/><parameters><parameter name="Range" type="real::range"/><parameter name="Value" type="integer"/></parameters><description/><examples/></method><method category="range" name=":bin" variadic="false"><return type="integer|nil"/><parameters><parameter name="Range" type="real::range"/><parameter name="Value" type="double"/></parameters><description/><examples/></method><method category="range" name=":by" variadic="false"><return type="real::range"/><parameters><parameter name="Start" type="number"/><parameter name="Step" type="number"/></parameters><description/><examples/></method><method category="range" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the number of values in <mini>Range</mini>.
</description><examples/></method><method category="range" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the number of values in <mini>Range</mini>.
</description><examples/></method><method category="range" name=":down" variadic="false"><return type="integer::range"/><parameters><parameter name="Start" type="integer"/><parameter name="Count" type="integer"/></parameters><description>Returns a range from <mini>Start</mini> to <mini>Start - Count + 1</mini> (inclusive).
</description><examples/></method><method category="range" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="Range" type="integer::range"/><parameter name="X" type="integer"/></parameters><description/><examples/></method><method category="range" name=":first" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the start of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":first" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the start of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":last" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the limit of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":last" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the limit of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":limit" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the limit of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":limit" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the limit of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the number of values in <mini>Range</mini>.
</description><examples/></method><method category="range" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the number of values in <mini>Range</mini>.
</description><examples/></method><method category="range" name=":random" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description/><examples/></method><method category="range" name=":random" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description/><examples/></method><method category="range" name=":start" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the start of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":start" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the start of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":step" variadic="false"><return type="integer"/><parameters><parameter name="Range" type="integer::range"/></parameters><description>Returns the limit of <mini>Range</mini>.
</description><examples/></method><method category="range" name=":step" variadic="false"><return type="real"/><parameters><parameter name="Range" type="real::range"/></parameters><description>Returns the step of <mini>Range</mini>.
</description><examples/></method><method category="range" name="=" variadic="false"><return type="integer::range|nil"/><parameters><parameter name="A" type="integer::range"/><parameter name="B" type="integer::range"/></parameters><description>Returns a range
</description><examples/></method></category><category name="mmap"><method category="mmap" name=":unmap" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="mmap"/></parameters><description/><examples/></method><type name="mmap::buffer"><parents><parent type="mmap"/><parent type="buffer"/></parents><description/><examples/></type><type name="mmap"><parents><parent type="address"/></parents><description/><examples/></type><method category="mmap" name="mmap" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method></category><category name="minijs"><description>Provides a specialized encoding of Minilang values to and from JSON with support for complex or cyclic data structures.

* <json>null</json> |harr| <mini>nil</mini>
* <json>true</json> |harr| <mini>true</mini>
* <json>false</json> |harr| <mini>false</mini>
* *integer* |harr| <mini>integer</mini>
* *real* |harr| <mini>real</mini>
* *string* |harr| <mini>string</mini>
* </description><method category="minijs" name=":value" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="minijs"/></parameters><description/><examples/></method><type name="minijs"><parents/><description/><examples/></type><constructor name="minijs"><return/><parameters><parameter name="Value" type="any"/></parameters><description/><examples/></constructor><method category="minijs" name="minijs::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Json" type="any"/><parameter name="Externals" type="external::set"/></parameters><description/><examples/></method><method category="minijs" name="minijs::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Json" type="any"/></parameters><description/><examples/></method><method category="minijs" name="minijs::encode" variadic="false"><return type="any"/><parameters><parameter name="Value" type="any"/><parameter name="Externals" type="external::set"/></parameters><description/><examples/></method><method category="minijs" name="minijs::encode" variadic="false"><return type="any"/><parameters><parameter name="Value" type="any"/></parameters><description/><examples/></method></category><category name="method"><method category="method" name=":MLMethodDefault" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="method"/></parameters><description/><examples/></method><method category="method" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="method"/></parameters><description/><examples/></method><method category="method" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="method::anon"/></parameters><description/><examples/></method><method category="method" name=":list" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="method"/></parameters><description/><examples/></method><method category="method" name=":name" variadic="false"><return type="string"/><parameters><parameter name="Method" type="method"/></parameters><description>Returns the name of <mini>Method</mini>.
</description><examples/></method><type name="method::context"><parents/><description>A context for isolating method definitions.

<mini>(C: method::context)(Args: any,  ...,  Fn: function): any</mini>
    Calls <mini>Fn(Args)</mini> in a new context using <mini>C</mini> for method definitions.
</description><examples/></type><type name="method::isolated"><parents><parent type="function"/></parents><description/><examples/></type><type name="method"><parents><parent type="function"/></parents><description>A map of type signatures to functions. Each type signature consists of a number of types and a flag denoting whether the signature is variadic.

<mini>(M: method)(Arg₁,  ...,  Argₙ)</mini>
   Calls <mini>Fn(Arg₁,  ...,  Argₙ)</mini> where <mini>Fn</mini> is the function associated with the closest matching type signature defined in <mini>M</mini>.

   A type signature <mini>(Type₁,  ...,  Type/k,  Variadic)</mini> matches if <mini>type(Argᵢ) &lt; Typeᵢ</mini> for each <math>i = 1,  ...,  k</math> and either <math>n = k</math> or <math>n &lt; k</math> and <math>Variadic</math> is true.

   * A type signature is considered a closer match if its types are closer in terms of subtyping to the types of the arguments.
   * A type signature with the same number of types as arguments is considered a closer match than a matching variadic signature with fewer types.
</description><examples/></type><method category="method" name="[]" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="method"/></parameters><description/><examples/></method><constructor category="method" name="method" variadic="false"><return type="method"/><parameters/><description>Returns a new anonymous method.
</description><examples/></constructor><constructor category="method" name="method" variadic="false"><return type="method"/><parameters><parameter name="Name" type="string"/></parameters><description>Returns the method with name <mini>Name</mini>.
</description><examples/></constructor><constructor name="method::context"><return/><parameters/><description>Returns a new context for method definitions. The new context will inherit methods definitions from the current context.
</description><examples/></constructor><method category="method" name="method::define" variadic="true"><return type="Function"/><parameters><parameter name="Method" type="method"/><parameter name="Types..." type="type"/><parameter name="..?" type="any"/><parameter name="Function" type="function"/></parameters><description>Adds a new type signature and associated function to <mini>Method</mini>. If the last argument is <mini>..</mini> then the signature is variadic. Method definitions using <mini>meth</mini> are translated into calls to <mini>method::set</mini>.
</description><examples/></method><function name="method::isolate"><return/><parameters><parameter name="Args..." type="any"/><parameter name="Fn" type="function"/></parameters><description>Evaluates <mini>Fn(Args)</mini> in a new method context and returns the result.
</description><examples/></function><function name="method::list"><return/><parameters/><description/><examples/></function><function name="mlmethodisolated"><return/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></function></category><category name="math"><method category="math" name="!" variadic="false"><return type="integer"/><parameters><parameter name="N" type="integer"/></parameters><description>Returns the factorial of <mini>N</mini>.
</description><examples><code>!10</code><result>3628800</result></examples></method><method category="math" name="!" variadic="false"><return type="integer"/><parameters><parameter name="N" type="integer"/><parameter name="R" type="integer"/></parameters><description>Returns the number of ways of choosing <mini>R</mini> elements from <mini>N</mini>.
</description><examples/></method><method category="math" name="%" variadic="false"><return type="real"/><parameters><parameter name="X" type="real"/><parameter name="Y" type="real"/></parameters><description>Returns the remainder of <mini>X</mini> on division by <mini>Y</mini>.
</description><examples/></method><method category="math" name=":abs" variadic="false"><return type="real"/><parameters><parameter name="Z" type="complex"/></parameters><description>Returns the absolute value (magnitude) of <mini>Z</mini>.
</description><examples/></method><method category="math" name=":abs" variadic="false"><return type="integer"/><parameters><parameter name="N" type="integer"/></parameters><description>Returns the absolute value of <mini>N</mini>.
</description><examples/></method><method category="math" name=":arg" variadic="false"><return type="real"/><parameters><parameter name="R" type="real"/></parameters><description>Returns the complex argument of <mini>R</mini> (<mini>= 0</mini> for a real number).
</description><examples/></method><method category="math" name=":arg" variadic="false"><return type="real"/><parameters><parameter name="Z" type="complex"/></parameters><description>Returns the complex argument of <mini>Z</mini>.
</description><examples/></method><method category="math" name=":conj" variadic="false"><return type="real"/><parameters><parameter name="R" type="real"/></parameters><description>Returns the complex conjugate of <mini>R</mini> (<mini>= R</mini> for a real number).
</description><examples/></method><method category="math" name=":conj" variadic="false"><return type="real"/><parameters><parameter name="Z" type="complex"/></parameters><description>Returns the complex conjugate of <mini>Z</mini>.
</description><examples/></method><method category="math" name=":floor" variadic="false"><return type="integer"/><parameters><parameter name="N" type="integer"/></parameters><description>Returns the floor of <mini>N</mini> (<mini>= N</mini> for an integer).
</description><examples/></method><method category="math" name=":gcd" variadic="false"><return type="integer"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="integer"/></parameters><description>Returns the greatest common divisor of <mini>A</mini> and <mini>B</mini>.
</description><examples/></method><type name="random"><parents><parent type="function"/></parents><description/><examples/></type><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="real"/><parameter name="Y" type="real"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>let R := 2.3 ^ 1.5</code><result>3.48812270426371</result><code>type(R)</code><result>&lt;&lt;double&gt;&gt;</result><code>let C := -2.3 ^ 1.5</code><result>-6.40757745721465e-16 - 3.48812270426371i</result><code>type(C)</code><result>&lt;&lt;complex&gt;&gt;</result></examples></method><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="integer"/><parameter name="Y" type="integer"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>let N := 2 ^ 2</code><result>4</result><code>type(N)</code><result>&lt;&lt;integer32&gt;&gt;</result><code>let R := 2 ^ -1</code><result>0.5</result><code>type(R)</code><result>&lt;&lt;double&gt;&gt;</result></examples></method><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="complex"/><parameter name="Y" type="integer"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>(1 + 2i) ^ 2</code><result>-3 + 4i</result></examples></method><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="real"/><parameter name="Y" type="integer"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>2.3 ^ 2</code><result>5.29</result></examples></method><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="complex"/><parameter name="Y" type="number"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>(1 + 2i) ^ (2 + 3i)</code><result>-0.0151326724227227 - 0.179867483913335i</result></examples></method><method category="math" name="^" variadic="false"><return type="number"/><parameters><parameter name="X" type="number"/><parameter name="Y" type="complex"/></parameters><description>Returns <mini>X</mini> raised to the power of <mini>Y</mini>.
</description><examples><code>2.3 ^ (1 + 2i)</code><result>-0.218221674358723 + 2.28962427066977i</result></examples></method><method category="math" name="math::abs" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>abs(Arg₁)</mini>.
</description><examples><code>math::abs(1.2345)</code><result>1.2345</result><code>math::abs(-1.2345)</code><result>1.2345</result></examples></method><method category="math" name="math::acos" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>acos(Arg₁)</mini>.
</description><examples><code>math::acos(1.2345)</code><result>nan</result><code>math::acos(-1.2345)</code><result>nan</result></examples></method><method category="math" name="math::acos" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>acos(Arg₁)</mini>.
</description><examples><code>math::acos(1.2345 + 6.789i)</code><result>1.39274491905556 - 2.62959948793467i</result><code>math::acos(-1.2345 + 6.789i)</code><result>1.74884773453423 - 2.62959948793467i</result></examples></method><method category="math" name="math::acosh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>acosh(Arg₁)</mini>.
</description><examples><code>math::acosh(1.2345)</code><result>0.672113366870564</result><code>math::acosh(-1.2345)</code><result>-nan</result></examples></method><method category="math" name="math::acosh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>acosh(Arg₁)</mini>.
</description><examples><code>math::acosh(1.2345 + 6.789i)</code><result>2.62959948793467 + 1.39274491905556i</result><code>math::acosh(-1.2345 + 6.789i)</code><result>2.62959948793467 + 1.74884773453423i</result></examples></method><method category="math" name="math::asin" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>asin(Arg₁)</mini>.
</description><examples><code>math::asin(1.2345)</code><result>nan</result><code>math::asin(-1.2345)</code><result>nan</result></examples></method><method category="math" name="math::asin" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>asin(Arg₁)</mini>.
</description><examples><code>math::asin(1.2345 + 6.789i)</code><result>0.178051407739337 + 2.62959948793467i</result><code>math::asin(-1.2345 + 6.789i)</code><result>-0.178051407739337 + 2.62959948793467i</result></examples></method><method category="math" name="math::asinh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>asinh(Arg₁)</mini>.
</description><examples><code>math::asinh(1.2345)</code><result>1.03787350829816</result><code>math::asinh(-1.2345)</code><result>-1.03787350829816</result></examples></method><method category="math" name="math::asinh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>asinh(Arg₁)</mini>.
</description><examples><code>math::asinh(1.2345 + 6.789i)</code><result>2.61977023992049 + 1.38904733381322i</result><code>math::asinh(-1.2345 + 6.789i)</code><result>-2.61977023992049 + 1.38904733381322i</result></examples></method><method category="math" name="math::atan" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>atan(Arg₁)</mini>.
</description><examples><code>math::atan(1.2345 + 6.789i)</code><result>1.54433788133329 + 0.143460974564643i</result><code>math::atan(-1.2345 + 6.789i)</code><result>-1.54433788133329 + 0.143460974564643i</result></examples></method><method category="math" name="math::atan" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/><parameter name="Arg₂" type="real"/></parameters><description>Returns <mini>atan(Arg₂ / Arg₁)</mini>.
</description><examples/></method><method category="math" name="math::atan" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>atan(Arg₁)</mini>.
</description><examples><code>math::atan(1.2345)</code><result>0.88996059643618</result><code>math::atan(-1.2345)</code><result>-0.88996059643618</result></examples></method><method category="math" name="math::atanh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>atanh(Arg₁)</mini>.
</description><examples><code>math::atanh(1.2345)</code><result>-nan</result><code>math::atanh(-1.2345)</code><result>-nan</result></examples></method><method category="math" name="math::atanh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>atanh(Arg₁)</mini>.
</description><examples><code>math::atanh(1.2345 + 6.789i)</code><result>0.0254155192875644 + 1.42907622916881i</result><code>math::atanh(-1.2345 + 6.789i)</code><result>-0.0254155192875644 + 1.42907622916881i</result></examples></method><method category="math" name="math::cbrt" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>cbrt(Arg₁)</mini>.
</description><examples><code>math::cbrt(1.2345)</code><result>1.07274631515821</result><code>math::cbrt(-1.2345)</code><result>-1.07274631515821</result></examples></method><method category="math" name="math::ceil" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>ceil(Arg₁)</mini>.
</description><examples><code>math::ceil(1.2345)</code><result>2</result><code>math::ceil(-1.2345)</code><result>-1</result></examples></method><method category="math" name="math::cos" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>cos(Arg₁)</mini>.
</description><examples><code>math::cos(1.2345)</code><result>0.329993157678568</result><code>math::cos(-1.2345)</code><result>0.329993157678568</result></examples></method><method category="math" name="math::cos" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>cos(Arg₁)</mini>.
</description><examples><code>math::cos(1.2345 + 6.789i)</code><result>146.521288000429 - 419.139907811584i</result><code>math::cos(-1.2345 + 6.789i)</code><result>146.521288000429 + 419.139907811584i</result></examples></method><method category="math" name="math::cosh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>cosh(Arg₁)</mini>.
</description><examples><code>math::cosh(1.2345)</code><result>1.86381998863995</result><code>math::cosh(-1.2345)</code><result>1.86381998863995</result></examples></method><method category="math" name="math::cosh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>cosh(Arg₁)</mini>.
</description><examples><code>math::cosh(1.2345 + 6.789i)</code><result>1.63043250480246 + 0.762072763912413i</result><code>math::cosh(-1.2345 + 6.789i)</code><result>1.63043250480246 - 0.762072763912413i</result></examples></method><value name="math::e"><type name="real"/><description>Euler&apos;s constant.
</description></value><method category="math" name="math::erf" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>erf(Arg₁)</mini>.
</description><examples><code>math::erf(1.2345)</code><result>0.919162396413566</result><code>math::erf(-1.2345)</code><result>-0.919162396413566</result></examples></method><method category="math" name="math::erfc" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>erfc(Arg₁)</mini>.
</description><examples><code>math::erfc(1.2345)</code><result>0.0808376035864342</result><code>math::erfc(-1.2345)</code><result>1.91916239641357</result></examples></method><method category="math" name="math::exp" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>exp(Arg₁)</mini>.
</description><examples><code>math::exp(1.2345 + 6.789i)</code><result>3.00632132754822 + 1.66513134304082i</result><code>math::exp(-1.2345 + 6.789i)</code><result>0.254543682056692 + 0.140985815215994i</result></examples></method><method category="math" name="math::exp" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>exp(Arg₁)</mini>.
</description><examples><code>math::exp(1.2345)</code><result>3.43665976117046</result><code>math::exp(-1.2345)</code><result>0.290980216109441</result></examples></method><method category="math" name="math::expm1" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>expm1(Arg₁)</mini>.
</description><examples><code>math::expm1(1.2345)</code><result>2.43665976117046</result><code>math::expm1(-1.2345)</code><result>-0.709019783890559</result></examples></method><method category="math" name="math::floor" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>floor(Arg₁)</mini>.
</description><examples><code>math::floor(1.2345)</code><result>1</result><code>math::floor(-1.2345)</code><result>-2</result></examples></method><method category="math" name="math::hypot" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/><parameter name="Arg₂" type="real"/></parameters><description>Returns <mini>hypot(Arg₁,  Arg₂)</mini>.
</description><examples/></method><method category="math" name="math::lgamma" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>lgamma(Arg₁)</mini>.
</description><examples><code>math::lgamma(1.2345)</code><result>error(&quot;ModuleError&quot;, &quot;Symbol lgamma not exported from module math&quot;)</result><code>math::lgamma(-1.2345)</code><result>error(&quot;ModuleError&quot;, &quot;Symbol lgamma not exported from module math&quot;)</result></examples></method><method category="math" name="math::log" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>log(Arg₁)</mini>.
</description><examples><code>math::log(1.2345)</code><result>0.210666029803097</result><code>math::log(-1.2345)</code><result>0.210666029803097 + 3.14159265358979i</result></examples></method><method category="math" name="math::log" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>log(Arg₁)</mini>.
</description><examples><code>math::log(1.2345 + 6.789i)</code><result>1.93156878648542 + 1.39092338385419i</result><code>math::log(-1.2345 + 6.789i)</code><result>1.93156878648542 + 1.75066926973561i</result></examples></method><method category="math" name="math::log10" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>log10(Arg₁)</mini>.
</description><examples><code>math::log10(1.2345 + 6.789i)</code><result>0.838869665387177 + 0.604070350358072i</result><code>math::log10(-1.2345 + 6.789i)</code><result>0.838869665387177 + 0.76030600348377i</result></examples></method><method category="math" name="math::log10" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>log10(Arg₁)</mini>.
</description><examples><code>math::log10(1.2345)</code><result>0.091491094267951</result><code>math::log10(-1.2345)</code><result>0.091491094267951 + 1.36437635384184i</result></examples></method><method category="math" name="math::log1p" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>log1p(Arg₁)</mini>.
</description><examples><code>math::log1p(1.2345)</code><result>0.804017489391369</result><code>math::log1p(-1.2345)</code><result>-nan</result></examples></method><method category="math" name="math::logit" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>logit(Arg₁)</mini>.
</description><examples><code>math::logit(1.2345)</code><result>-nan</result><code>math::logit(-1.2345)</code><result>-nan</result></examples></method><value name="math::pi"><type name="real"/><description>Pi.
</description></value><method category="math" name="math::rem" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/><parameter name="Arg₂" type="real"/></parameters><description>Returns <mini>rem(Arg₁,  Arg₂)</mini>.
</description><examples/></method><method category="math" name="math::round" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>round(Arg₁)</mini>.
</description><examples><code>math::round(1.2345)</code><result>1</result><code>math::round(-1.2345)</code><result>-1</result></examples></method><method category="math" name="math::round" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/><parameter name="Arg₂" type="real"/></parameters><description>Returns <mini>round(Arg₁ * Arg₂) / Arg₂</mini>.
</description><examples><code>math::round(1.2345, 100)</code><result>1.23</result><code>math::round(-1.2345, 32)</code><result>-1.25</result></examples></method><method category="math" name="math::sin" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>sin(Arg₁)</mini>.
</description><examples><code>math::sin(1.2345 + 6.789i)</code><result>419.14097082583 + 146.520916397013i</result><code>math::sin(-1.2345 + 6.789i)</code><result>-419.14097082583 + 146.520916397013i</result></examples></method><method category="math" name="math::sin" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>sin(Arg₁)</mini>.
</description><examples><code>math::sin(1.2345)</code><result>0.943983323944511</result><code>math::sin(-1.2345)</code><result>-0.943983323944511</result></examples></method><method category="math" name="math::sinh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>sinh(Arg₁)</mini>.
</description><examples><code>math::sinh(1.2345 + 6.789i)</code><result>1.37588882274576 + 0.903058579128407i</result><code>math::sinh(-1.2345 + 6.789i)</code><result>-1.37588882274576 + 0.903058579128407i</result></examples></method><method category="math" name="math::sinh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>sinh(Arg₁)</mini>.
</description><examples><code>math::sinh(1.2345)</code><result>1.57283977253051</result><code>math::sinh(-1.2345)</code><result>-1.57283977253051</result></examples></method><method category="math" name="math::sqrt" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>sqrt(Arg₁)</mini>.
</description><examples><code>math::sqrt(1.2345 + 6.789i)</code><result>2.01678294499314 + 1.68312609367665i</result><code>math::sqrt(-1.2345 + 6.789i)</code><result>1.68312609367665 + 2.01678294499314i</result></examples></method><method category="math" name="math::sqrt" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>sqrt(Arg₁)</mini>.
</description><examples><code>math::sqrt(1.2345)</code><result>1.11108055513541</result><code>math::sqrt(-1.2345)</code><result>1.11108055513541i</result></examples></method><method category="math" name="math::sqrt" variadic="false"><return type="integer|real"/><parameters><parameter name="Arg₁" type="integer"/></parameters><description>Returns the square root of <mini>Arg₁</mini>.
</description><examples/></method><method category="math" name="math::square" variadic="false"><return type="integer"/><parameters><parameter name="N" type="integer"/></parameters><description>Returns <mini>N * N</mini>
</description><examples><code>math::square(10)</code><result>100</result></examples></method><method category="math" name="math::square" variadic="false"><return type="real"/><parameters><parameter name="R" type="real"/></parameters><description>Returns <mini>R * R</mini>
</description><examples><code>math::square(1.234)</code><result>1.522756</result></examples></method><method category="math" name="math::square" variadic="false"><return type="complex"/><parameters><parameter name="C" type="complex"/></parameters><description>Returns <mini>C * C</mini>
</description><examples><code>math::square(1 + 2i)</code><result>-3 + 4i</result></examples></method><method category="math" name="math::tan" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>tan(Arg₁)</mini>.
</description><examples><code>math::tan(1.2345 + 6.789i)</code><result>1.58008203338542e-06 + 1.0000019838211i</result><code>math::tan(-1.2345 + 6.789i)</code><result>-1.58008203338542e-06 + 1.0000019838211i</result></examples></method><method category="math" name="math::tan" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>tan(Arg₁)</mini>.
</description><examples><code>math::tan(1.2345)</code><result>2.86061483997194</result><code>math::tan(-1.2345)</code><result>-2.86061483997194</result></examples></method><method category="math" name="math::tanh" variadic="false"><return type="real"/><parameters><parameter name="Arg₁" type="real"/></parameters><description>Returns <mini>tanh(Arg₁)</mini>.
</description><examples><code>math::tanh(1.2345)</code><result>0.843879656896602</result><code>math::tanh(-1.2345)</code><result>-0.843879656896602</result></examples></method><method category="math" name="math::tanh" variadic="false"><return type="complex"/><parameters><parameter name="Arg₁" type="complex"/></parameters><description>Returns <mini>tanh(Arg₁)</mini>.
</description><examples><code>math::tanh(1.2345 + 6.789i)</code><result>0.905042091321087 + 0.130855248843389i</result><code>math::tanh(-1.2345 + 6.789i)</code><result>-0.905042091321087 + 0.130855248843389i</result></examples></method><function name="random::seed"><return/><parameters><parameter name="Arg₁" type="integer"/></parameters><description/><examples/></function></category><category name="map"><method category="map" name="*" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map containing the entries of <mini>Map₁</mini> which are also in <mini>Map₂</mini>. The values are chosen from <mini>Map₂</mini>.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A * B</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 4}</result></examples></method><method category="map" name="+" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map combining the entries of <mini>Map₁</mini> and <mini>Map₂</mini>.
If the same key is in both <mini>Map₁</mini> and <mini>Map₂</mini> then the corresponding value from <mini>Map₂</mini> is chosen.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A + B</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 4, &quot;n&quot; is 5, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;d&quot; is 5}</result></examples></method><method category="map" name="/" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map containing the entries of <mini>Map₁</mini> which are not in <mini>Map₂</mini>.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A / B</code><result>{&quot;n&quot; is 5}</result></examples></method><method category="map" name="/\" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map containing the entries of <mini>Map₁</mini> which are also in <mini>Map₂</mini>. The values are chosen from <mini>Map₂</mini>.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A /\ B</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 4}</result></examples></method><method category="map" name="::" variadic="false"><return type="map::node"/><parameters><parameter name="Map" type="map"/><parameter name="Key" type="string"/></parameters><description>Same as <mini>Map[Key]</mini>. This method allows maps to be used as modules.
</description><examples><code>let M := copy({&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}, :const)
M::A</code><result>1</result><code>M::D</code><result>nil</result></examples></method><method category="map" name="::" variadic="false"><return type="map::node"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="string"/></parameters><description>Same as <mini>Map[Key]</mini>. This method allows maps to be used as modules.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M::A</code><result>1</result><code>M::D</code><result>nil</result><code>M::A := 10</code><result>10</result><code>M::D := 20</code><result>20</result><code>M</code><result>{&quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 20}</result></examples></method><method category="map" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Map" type="map"/></parameters><description>Appends a representation of <mini>Map</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="map" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Map" type="map"/><parameter name="Sep" type="string"/><parameter name="Conn" type="string"/></parameters><description>Appends the entries of <mini>Map</mini> to <mini>Buffer</mini> with <mini>Conn</mini> between keys and values and <mini>Sep</mini> between entries.
</description><examples/></method><method category="map" name=":const" variadic="false"><return type="map::const"/><parameters><parameter name="Copy" type="visitor"/><parameter name="Map" type="map"/></parameters><description>Returns a new constant map containing copies of the keys and values of <mini>Map</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="map" name=":copy" variadic="false"><return type="map"/><parameters><parameter name="Copy" type="visitor"/><parameter name="Map" type="map"/></parameters><description>Returns a new map contains copies of the keys and values of <mini>Map</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="map" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the number of entries in <mini>Map</mini>.
</description><examples><code>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}:count</code><result>3</result></examples></method><method category="map" name=":delete" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/></parameters><description>Removes <mini>Key</mini> from <mini>Map</mini> and returns the corresponding value if any,  otherwise <mini>nil</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M:delete(&quot;A&quot;)</code><result>1</result><code>M:delete(&quot;D&quot;)</code><result>nil</result><code>M</code><result>{&quot;B&quot; is 2, &quot;C&quot; is 3}</result></examples></method><method category="map" name=":empty" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Deletes all keys and values from <mini>Map</mini> and returns it.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}</result><code>M:empty</code><result>{}</result></examples></method><method category="map" name=":exists" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Fn" type="function"/></parameters><description>If <mini>Key</mini> is present in <mini>Map</mini> then returns the corresponding value. Otherwise inserts <mini>Key</mini> into <mini>Map</mini> with value <mini>Fn(Key)</mini> and returns <mini>nil</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M:exists(&quot;A&quot;, fun(Key) Key:code)</code><result>1</result><code>M:exists(&quot;D&quot;, fun(Key) Key:code)</code><result>nil</result><code>M</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 68}</result></examples></method><method category="map" name=":filter" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Map</mini> for which <mini>Function(Value)</mini> returns <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let M := map(swap(&quot;abcdefghij&quot;))
M:filter(2 | _)</code><result>{&quot;a&quot; is 1, &quot;c&quot; is 3, &quot;e&quot; is 5, &quot;g&quot; is 7, &quot;i&quot; is 9}</result><code>M</code><result>{&quot;b&quot; is 2, &quot;d&quot; is 4, &quot;f&quot; is 6, &quot;h&quot; is 8, &quot;j&quot; is 10}</result></examples></method><method category="map" name=":filter2" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Map</mini> for which <mini>Function(Value)</mini> returns <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let M := map(swap(&quot;abcdefghij&quot;))
M:filter2(fun(K, V) K = &quot;c&quot; or V = 7)</code><result>{&quot;a&quot; is 1, &quot;b&quot; is 2, &quot;d&quot; is 4, &quot;e&quot; is 5, &quot;f&quot; is 6, &quot;h&quot; is 8, &quot;i&quot; is 9, &quot;j&quot; is 10}</result><code>M</code><result>{&quot;c&quot; is 3, &quot;g&quot; is 7}</result></examples></method><method category="map" name=":first" variadic="false"><return type=""/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the first value in <mini>Map</mini> or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples/></method><method category="map" name=":first2" variadic="false"><return type=""/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the first key and value in <mini>Map</mini> or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples/></method><method category="map" name=":from" variadic="false"><return type="sequence|nil"/><parameters><parameter name="Map" type="map"/><parameter name="Key" type="any"/></parameters><description>Returns the subset of <mini>Map</mini> after <mini>Key</mini> as a sequence.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 4, &quot;E&quot; is 5}
map(M:from(&quot;C&quot;))</code><result>{&quot;C&quot; is 3, &quot;D&quot; is 4, &quot;E&quot; is 5}</result><code>map(M:from(&quot;F&quot;))</code><result>{}</result></examples></method><method category="map" name=":grow" variadic="true"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Sequence" type="sequence"/></parameters><description>Adds of all the key and value pairs produced by <mini>Sequence</mini> to <mini>Map</mini> and returns <mini>Map</mini>.
</description><examples><code>map(&quot;cake&quot;):grow(&quot;banana&quot;)</code><result>{1 is &quot;b&quot;, 2 is &quot;a&quot;, 3 is &quot;n&quot;, 4 is &quot;a&quot;, 5 is &quot;n&quot;, 6 is &quot;a&quot;}</result></examples></method><method category="map" name=":grow" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="map::mutable"/><parameter name="Arg₂" type="names"/></parameters><description/><examples/></method><method category="map" name=":in" variadic="false"><return type="any|nil"/><parameters><parameter name="Key" type="any"/><parameter name="Map" type="map"/></parameters><description>Returns <mini>Key</mini> if it is in <mini>Map</mini>,  otherwise return <mini>nil</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
&quot;A&quot; in M</code><result>&quot;A&quot;</result><code>&quot;D&quot; in M</code><result>nil</result></examples></method><method category="map" name=":insert" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Value" type="any"/></parameters><description>Inserts <mini>Key</mini> into <mini>Map</mini> with corresponding value <mini>Value</mini>.
Returns the previous value associated with <mini>Key</mini> if any,  otherwise <mini>nil</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M:insert(&quot;A&quot;, 10)</code><result>1</result><code>M:insert(&quot;D&quot;, 20)</code><result>nil</result><code>M</code><result>{&quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 20}</result></examples></method><method category="map" name=":last" variadic="false"><return type=""/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the last value in <mini>Map</mini> or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples/></method><method category="map" name=":last2" variadic="false"><return type=""/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the last key and value in <mini>Map</mini> or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples/></method><method category="map" name=":missing" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Fn" type="function"/></parameters><description>If <mini>Key</mini> is present in <mini>Map</mini> then returns <mini>nil</mini>. Otherwise inserts <mini>Key</mini> into <mini>Map</mini> with value <mini>Fn(Key)</mini> and returns the new value.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M:missing(&quot;A&quot;, fun(Key) Key:code)</code><result>nil</result><code>M:missing(&quot;D&quot;, fun(Key) Key:code)</code><result>68</result><code>M</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 68}</result></examples></method><method category="map" name=":missing" variadic="false"><return type="some|nil"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/></parameters><description>If <mini>Key</mini> is present in <mini>Map</mini> then returns <mini>nil</mini>. Otherwise inserts <mini>Key</mini> into <mini>Map</mini> with value <mini>some</mini> and returns <mini>some</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M:missing(&quot;A&quot;)</code><result>nil</result><code>M:missing(&quot;D&quot;)</code><result>some</result><code>M</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot;}</result></examples></method><method category="map" name=":order" variadic="false"><return type="map::order"/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the current ordering of <mini>Map</mini>.
</description><examples/></method><method category="map" name=":order" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Order" type="map::order"/></parameters><description>Sets the ordering
</description><examples/></method><method category="map" name=":pop" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Deletes the first key-value pair from <mini>Map</mini> according to its iteration order. Returns the deleted value,  or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let M1 := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M1:pop</code><result>&quot;c&quot;</result><code>M1</code><result>{2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>
:&gt; LRU order
let M2 := map(&quot;cake&quot;):order(map::order::LRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M2[2]; M2[4]; M2[1]; M2[3]
M2:pop</code><result>&quot;a&quot;</result><code>M2</code><result>{4 is &quot;e&quot;, 1 is &quot;c&quot;, 3 is &quot;k&quot;}</result><code>
:&gt; MRU order
let M3 := map(&quot;cake&quot;):order(map::order::MRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M3[2]; M3[4]; M3[1]; M3[3]
M3:pop</code><result>&quot;k&quot;</result><code>M3</code><result>{1 is &quot;c&quot;, 4 is &quot;e&quot;, 2 is &quot;a&quot;}</result></examples></method><method category="map" name=":pop2" variadic="false"><return type="tuple[any, any]|nil"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Deletes the first key-value pair from <mini>Map</mini> according to its iteration order. Returns the deleted key-value pair,  or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let M1 := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M1:pop2</code><result>(1, c)</result><code>M1</code><result>{2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>
:&gt; LRU order
let M2 := map(&quot;cake&quot;):order(map::order::LRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M2[2]; M2[4]; M2[1]; M2[3]
M2:pop2</code><result>(2, a)</result><code>M2</code><result>{4 is &quot;e&quot;, 1 is &quot;c&quot;, 3 is &quot;k&quot;}</result><code>
:&gt; MRU order
let M3 := map(&quot;cake&quot;):order(map::order::MRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M3[2]; M3[4]; M3[1]; M3[3]
M3:pop2</code><result>(3, k)</result><code>M3</code><result>{1 is &quot;c&quot;, 4 is &quot;e&quot;, 2 is &quot;a&quot;}</result></examples></method><method category="map" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the number of entries in <mini>Map</mini>.
</description><examples><code>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}:count</code><result>3</result></examples></method><method category="map" name=":pull" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Deletes the last key-value pair from <mini>Map</mini> according to its iteration order. Returns the deleted value,  or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let M1 := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M1:pull</code><result>&quot;e&quot;</result><code>M1</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;}</result><code>
:&gt; LRU order
let M2 := map(&quot;cake&quot;):order(map::order::LRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M2[2]; M2[4]; M2[1]; M2[3]
M2:pull</code><result>&quot;k&quot;</result><code>M2</code><result>{2 is &quot;a&quot;, 4 is &quot;e&quot;, 1 is &quot;c&quot;}</result><code>
:&gt; MRU order
let M3 := map(&quot;cake&quot;):order(map::order::MRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M3[2]; M3[4]; M3[1]; M3[3]
M3:pull</code><result>&quot;a&quot;</result><code>M3</code><result>{3 is &quot;k&quot;, 1 is &quot;c&quot;, 4 is &quot;e&quot;}</result></examples></method><method category="map" name=":pull2" variadic="false"><return type="tuple[any, any]|nil"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Deletes the last key-value pair from <mini>Map</mini> according to its iteration order. Returns the deleted key-value pair,  or <mini>nil</mini> if <mini>Map</mini> is empty.
</description><examples><code>:&gt; Insertion order (default)
let M1 := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M1:pull2</code><result>(4, e)</result><code>M1</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;}</result><code>
:&gt; LRU order
let M2 := map(&quot;cake&quot;):order(map::order::LRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M2[2]; M2[4]; M2[1]; M2[3]
M2:pull2</code><result>(3, k)</result><code>M2</code><result>{2 is &quot;a&quot;, 4 is &quot;e&quot;, 1 is &quot;c&quot;}</result><code>
:&gt; MRU order
let M3 := map(&quot;cake&quot;):order(map::order::MRU)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M3[2]; M3[4]; M3[1]; M3[3]
M3:pull2</code><result>(2, a)</result><code>M3</code><result>{3 is &quot;k&quot;, 1 is &quot;c&quot;, 4 is &quot;e&quot;}</result></examples></method><method category="map" name=":push" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Value" type="any"/></parameters><description>Inserts <mini>Key</mini> into <mini>Map</mini> with corresponding value <mini>Value</mini>.
</description><examples><code>let M := {&quot;B&quot; is 2, &quot;C&quot; is 3, &quot;A&quot; is 1}:order(map::order::Descending)
M:push(&quot;A&quot;, 10)</code><result>{&quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3}</result><code>M:push(&quot;D&quot;, 20)</code><result>{&quot;D&quot; is 20, &quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3}</result><code>M</code><result>{&quot;D&quot; is 20, &quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3}</result></examples></method><method category="map" name=":put" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Value" type="any"/></parameters><description>Inserts <mini>Key</mini> into <mini>Map</mini> with corresponding value <mini>Value</mini>.
</description><examples><code>let M := {&quot;B&quot; is 2, &quot;C&quot; is 3, &quot;A&quot; is 1}:order(map::order::Descending)
M:put(&quot;A&quot;, 10)</code><result>{&quot;B&quot; is 2, &quot;C&quot; is 3, &quot;A&quot; is 10}</result><code>M:put(&quot;D&quot;, 20)</code><result>{&quot;B&quot; is 2, &quot;C&quot; is 3, &quot;A&quot; is 10, &quot;D&quot; is 20}</result><code>M</code><result>{&quot;B&quot; is 2, &quot;C&quot; is 3, &quot;A&quot; is 10, &quot;D&quot; is 20}</result></examples></method><method category="map" name=":random" variadic="false"><return type="any"/><parameters><parameter name="List" type="map"/></parameters><description>Returns a random (assignable) node from <mini>Map</mini>.
</description><examples><code>let M := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M:random</code><result>&quot;c&quot;</result><code>M:random</code><result>&quot;e&quot;</result></examples></method><method category="map" name=":remove" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Map</mini> for which <mini>Function(Value)</mini> doesn&apos;t return <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let M := map(swap(&quot;abcdefghij&quot;))
M:remove(2 | _)</code><result>{&quot;b&quot; is 2, &quot;d&quot; is 4, &quot;f&quot; is 6, &quot;h&quot; is 8, &quot;j&quot; is 10}</result><code>M</code><result>{&quot;a&quot; is 1, &quot;c&quot; is 3, &quot;e&quot; is 5, &quot;g&quot; is 7, &quot;i&quot; is 9}</result></examples></method><method category="map" name=":remove2" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>Map</mini> for which <mini>Function(Value)</mini> doesn&apos;t return <mini>nil</mini> and returns those values in a new map.
</description><examples><code>let M := map(swap(&quot;abcdefghij&quot;))
M:remove2(fun(K, V) K = &quot;c&quot; or V = 7)</code><result>{&quot;c&quot; is 3, &quot;g&quot; is 7}</result><code>M</code><result>{&quot;a&quot; is 1, &quot;b&quot; is 2, &quot;d&quot; is 4, &quot;e&quot; is 5, &quot;f&quot; is 6, &quot;h&quot; is 8, &quot;i&quot; is 9, &quot;j&quot; is 10}</result></examples></method><method category="map" name=":reverse" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Reverses the iteration order of <mini>Map</mini> in-place and returns it.
</description><examples><code>let M := map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result><code>M:reverse</code><result>{4 is &quot;e&quot;, 3 is &quot;k&quot;, 2 is &quot;a&quot;, 1 is &quot;c&quot;}</result></examples></method><method category="map" name=":size" variadic="false"><return type="integer"/><parameters><parameter name="Map" type="map"/></parameters><description>Returns the number of entries in <mini>Map</mini>.
</description><examples><code>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}:size</code><result>3</result></examples></method><method category="map" name=":sort" variadic="false"><return type="Map"/><parameters><parameter name="Map" type="map::mutable"/></parameters><description>Sorts the entries (changes the iteration order) of <mini>Map</mini> using <mini>Keyᵢ &lt; Keyⱼ</mini> and returns <mini>Map</mini>.
</description><examples><code>let M := map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>M:sort</code><result>{&quot;a&quot; is 2, &quot;c&quot; is 1, &quot;e&quot; is 4, &quot;k&quot; is 3}</result></examples></method><method category="map" name=":sort" variadic="false"><return type="Map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Cmp" type="method"/></parameters><description>Sorts the entries (changes the iteration order) of <mini>Map</mini> using <mini>Cmp(Keyᵢ,  Keyⱼ)</mini> and returns <mini>Map</mini>
</description><examples><code>let M := map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>M:sort(&gt;)</code><result>{&quot;k&quot; is 3, &quot;e&quot; is 4, &quot;c&quot; is 1, &quot;a&quot; is 2}</result></examples></method><method category="map" name=":sort" variadic="false"><return type="Map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Cmp" type="function"/></parameters><description>Sorts the entries (changes the iteration order) of <mini>Map</mini> using <mini>Cmp(Keyᵢ,  Keyⱼ)</mini> and returns <mini>Map</mini>
</description><examples><code>let M := map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>M:sort(&gt;)</code><result>{&quot;k&quot; is 3, &quot;e&quot; is 4, &quot;c&quot; is 1, &quot;a&quot; is 2}</result></examples></method><method category="map" name=":sort2" variadic="false"><return type="Map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Cmp" type="function"/></parameters><description>Sorts the entries (changes the iteration order) of <mini>Map</mini> using <mini>Cmp(Keyᵢ,  Keyⱼ,  Valueᵢ,  Valueⱼ)</mini> and returns <mini>Map</mini>
</description><examples><code>let M := map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>M:sort(fun(K1, K2, V1, V2) V1 &lt; V2)</code><result>{&quot;e&quot; is 4, &quot;k&quot; is 3, &quot;a&quot; is 2, &quot;c&quot; is 1}</result></examples></method><method category="map" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="map::mutable"/><parameter name="Arg₂" type="any"/></parameters><description/><examples/></method><method category="map" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="map::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="map" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="map::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="integer"/><parameter name="Arg₄" type="map::mutable"/></parameters><description/><examples/></method><method category="map" name=":splice" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="map::mutable"/><parameter name="Arg₂" type="any"/><parameter name="Arg₃" type="map::mutable"/></parameters><description/><examples/></method><method category="map" name=":take" variadic="false"><return type="map"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Source" type="map::mutable"/></parameters><description>Inserts the key-value pairs from <mini>Source</mini> into <mini>Map</mini>,  leaving <mini>Source</mini> empty.
</description><examples><code>let A := map(swap(&quot;cat&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;t&quot; is 3}</result><code>let B := map(swap(&quot;cake&quot;))</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>A:take(B)</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;t&quot; is 3, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>A</code><result>{&quot;c&quot; is 1, &quot;a&quot; is 2, &quot;t&quot; is 3, &quot;k&quot; is 3, &quot;e&quot; is 4}</result><code>B</code><result>{}</result></examples></method><method category="map" name=":visit" variadic="false"><return type="map"/><parameters><parameter name="Copy" type="visitor"/><parameter name="Map" type="map"/></parameters><description>Returns a new map contains copies of the keys and values of <mini>Map</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="map" name="&lt;=&gt;" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a tuple of <mini>(Map₁ / Map₂,  Map₁ * Map₂,  Map₂ / Map₁)</mini>.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A &lt;=&gt; B</code><result>({n is 5}, {b is 1, a is 6}, {r is 2, e is 3, d is 5})</result></examples></method><method category="map" name="&gt;&lt;" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map containing the entries of <mini>Map₁</mini> and <mini>Map₂</mini> that are not in both.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A &gt;&lt; B</code><result>{&quot;n&quot; is 5, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;d&quot; is 5}</result></examples></method><value name="MLAny"><type name="any"/><description/></value><type name="map::labeller"><parents><parent type="function"/><parent type="map"/></parents><description/><examples/></type><type name="map::mutable"><parents><parent type="map"/></parents><description/><examples/></type><type name="map::node::mutable"><parents/><description>A node in a <mini>map</mini>.
Dereferencing a <mini>map::node</mini> returns the corresponding value from the <mini>map</mini>.
Assigning to a <mini>map::node</mini> updates the corresponding value in the <mini>map</mini>.
</description><examples/></type><type name="map::node::mutable"><parents><parent type="map::node"/></parents><description>A node in a <mini>map</mini>.
Dereferencing a <mini>map::node</mini> returns the corresponding value from the <mini>map</mini>.
Assigning to a <mini>map::node</mini> updates the corresponding value in the <mini>map</mini>.
</description><examples/></type><type name="map::node"><parents/><description>A node in a <mini>map</mini>.
Dereferencing a <mini>map::node::const</mini> returns the corresponding value from the <mini>map</mini>.
</description><examples/></type><type name="map::order"><parents><parent type="enum"/></parents><description>* <mini>::Insert</mini> - default ordering; inserted pairs are put at end, no reordering on access.
* <mini>::LRU</mini> - inserted pairs are put at start, accessed pairs are moved to start.
* <mini>::MRU</mini> - inserted pairs are put at end, accessed pairs are moved to end.
* <mini>::Ascending</mini> - inserted pairs are kept in ascending key order, no reordering on access.
* <mini>::Descending</mini> - inserted pairs are kept in descending key order, no reordering on access.
</description><examples/></type><type name="map"><parents><parent type="sequence"/></parents><description>A map of key-value pairs.
Keys can be of any type supporting hashing and comparison.
By default,  iterating over a map generates the key-value pairs in the order they were inserted,  however this ordering can be changed.
</description><examples/></type><type name="map::template"><parents><parent type="function"/></parents><description/><examples/></type><method category="map" name="[]" variadic="false"><return type="map::node"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/><parameter name="Fn" type="function"/></parameters><description>Returns the node corresponding to <mini>Key</mini> in <mini>Map</mini>. If <mini>Key</mini> is not in <mini>Map</mini> then <mini>Fn(Key)</mini> is called and the result inserted into <mini>Map</mini>.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M[&quot;A&quot;, fun(Key) Key:code]</code><result>1</result><code>M[&quot;D&quot;, fun(Key) Key:code]</code><result>68</result><code>M</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 68}</result></examples></method><method category="map" name="[]" variadic="false"><return type="any|nil"/><parameters><parameter name="Map" type="map"/><parameter name="Key" type="any"/></parameters><description>Returns the value corresponding to <mini>Key</mini> in <mini>Map</mini>,  or <mini>nil</mini> if <mini>Key</mini> is not in <mini>Map</mini>.
</description><examples><code>let M := copy({&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}, :const)
M[&quot;A&quot;]</code><result>1</result><code>M[&quot;D&quot;]</code><result>nil</result></examples></method><method category="map" name="[]" variadic="false"><return type="map::node"/><parameters><parameter name="Map" type="map::mutable"/><parameter name="Key" type="any"/></parameters><description>Returns the node corresponding to <mini>Key</mini> in <mini>Map</mini>. If <mini>Key</mini> is not in <mini>Map</mini> then a new floating node is returned with value <mini>nil</mini>. This node will insert <mini>Key</mini> into <mini>Map</mini> if assigned.
</description><examples><code>let M := {&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}
M[&quot;A&quot;]</code><result>1</result><code>M[&quot;D&quot;]</code><result>nil</result><code>M[&quot;A&quot;] := 10</code><result>10</result><code>M[&quot;D&quot;] := 20</code><result>20</result><code>M</code><result>{&quot;A&quot; is 10, &quot;B&quot; is 2, &quot;C&quot; is 3, &quot;D&quot; is 20}</result></examples></method><method category="map" name="\/" variadic="false"><return type="map"/><parameters><parameter name="Map₁" type="map"/><parameter name="Map₂" type="map"/></parameters><description>Returns a new map combining the entries of <mini>Map₁</mini> and <mini>Map₂</mini>.
If the same key is in both <mini>Map₁</mini> and <mini>Map₂</mini> then the corresponding value from <mini>Map₂</mini> is chosen.
</description><examples><code>let A := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let B := map(swap(&quot;bread&quot;))</code><result>{&quot;b&quot; is 1, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;a&quot; is 4, &quot;d&quot; is 5}</result><code>A \/ B</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 4, &quot;n&quot; is 5, &quot;r&quot; is 2, &quot;e&quot; is 3, &quot;d&quot; is 5}</result></examples></method><constructor category="map" name="map" variadic="true"><return type="map"/><parameters><parameter name="Key, Value" type="names"/></parameters><description>Returns a new map with the specified keys and values.
</description><examples><code>map(A is 1, B is 2, C is 3)</code><result>{&quot;A&quot; is 1, &quot;B&quot; is 2, &quot;C&quot; is 3}</result></examples></constructor><constructor category="map" name="map" variadic="true"><return type="map"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a map of all the key and value pairs produced by <mini>Sequence</mini>.
</description><examples><code>map(&quot;cake&quot;)</code><result>{1 is &quot;c&quot;, 2 is &quot;a&quot;, 3 is &quot;k&quot;, 4 is &quot;e&quot;}</result></examples></constructor><constructor category="map" name="map" variadic="false"><return type="map"/><parameters/><description>Returns a new map.
</description><examples><code>map()</code><result>{}</result></examples></constructor><function name="map::by"><return/><parameters><parameter name="Sequence" type="any"/></parameters><description/><examples/></function><function name="map::join"><return/><parameters><parameter name="Map₁, ..." type="map"/><parameter name="Fn" type="function"/></parameters><description>Returns a new map containing the union of the keys of <mini>Mapᵢ</mini>,  and with values <mini>Fn(V₁,  ...,  Vₙ)</mini> where each <mini>Vᵢ</mini> comes from <mini>Mapᵢ</mini> (or <mini>nil</mini>).
</description><examples><code>let A := map(swap(&quot;apple&quot;))</code><result>{&quot;a&quot; is 1, &quot;p&quot; is 3, &quot;l&quot; is 4, &quot;e&quot; is 5}</result><code>let B := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let C := map(swap(&quot;pear&quot;))</code><result>{&quot;p&quot; is 1, &quot;e&quot; is 2, &quot;a&quot; is 3, &quot;r&quot; is 4}</result><code>map::join(A, B, C, tuple)</code><result>{&quot;a&quot; is (1, 6, 3), &quot;p&quot; is (3, nil, 1), &quot;l&quot; is (4, nil, nil), &quot;e&quot; is (5, nil, 2), &quot;b&quot; is (nil, 1, nil), &quot;n&quot; is (nil, 5, nil), &quot;r&quot; is (nil, nil, 4)}</result></examples></function><function name="map::join2"><return/><parameters><parameter name="Map₁, ..." type="map"/><parameter name="Fn" type="function"/></parameters><description>Returns a new map containing the union of the keys of <mini>Mapᵢ</mini>,  and with values <mini>Fn(K,  V₁,  ...,  Vₙ)</mini> where each <mini>Vᵢ</mini> comes from <mini>Mapᵢ</mini> (or <mini>nil</mini>).
</description><examples><code>let A := map(swap(&quot;apple&quot;))</code><result>{&quot;a&quot; is 1, &quot;p&quot; is 3, &quot;l&quot; is 4, &quot;e&quot; is 5}</result><code>let B := map(swap(&quot;banana&quot;))</code><result>{&quot;b&quot; is 1, &quot;a&quot; is 6, &quot;n&quot; is 5}</result><code>let C := map(swap(&quot;pear&quot;))</code><result>{&quot;p&quot; is 1, &quot;e&quot; is 2, &quot;a&quot; is 3, &quot;r&quot; is 4}</result><code>map::join2(A, B, C, tuple)</code><result>{&quot;a&quot; is (a, 1, 6, 3), &quot;p&quot; is (p, 3, nil, 1), &quot;l&quot; is (l, 4, nil, nil), &quot;e&quot; is (e, 5, nil, 2), &quot;b&quot; is (b, nil, 1, nil), &quot;n&quot; is (n, nil, 5, nil), &quot;r&quot; is (r, nil, nil, 4)}</result></examples></function><function name="map::reduce"><return/><parameters><parameter name="Sequence" type="sequence"/><parameter name="Reduce" type="function"/></parameters><description>Creates a new map,  <mini>Map</mini>,  then applies <mini>Map[Key] := Reduce(old,  Value)</mini> for each <mini>Key</mini>,  <mini>Value</mini> pair generated by <mini>Sequence</mini>,  finally returning <mini>Map</mini>.
</description><examples><code>map::reduce(swap(&quot;banana&quot;); L := [], I) L:put(I)</code><result>{&quot;b&quot; is [1], &quot;a&quot; is [2, 4, 6], &quot;n&quot; is [3, 5]}</result></examples></function><function name="mlmaplabeller"><return/><parameters/><description/><examples/></function><function name="mlmaptemplate"><return/><parameters/><description/><examples/></function></category><category name="logging"><method category="logging" name="::" variadic="false"><return type="logger::fn"/><parameters><parameter name="Logger" type="logger"/><parameter name="Level" type="string"/></parameters><description/><examples/></method><type name="log::macro"><parents><parent type="function"/></parents><description/><examples/></type><type name="logger"><parents/><description>A logger.
</description><examples/></type><constructor name="logger"><return/><parameters><parameter name="Category" type="string"/></parameters><description>Returns a new logger with levels <mini>::error</mini>,  <mini>::warn</mini>,  <mini>::info</mini> and <mini>::debug</mini>.
</description><examples/></constructor><function name="logger::level"><return/><parameters><parameter name="Level?" type="string"/></parameters><description>Gets or sets the logging level for default logging. Returns the log level.
</description><examples/></function></category><category name="list"><method category="list" name="!=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>A:size != B:size</mini> or <mini>Aᵢ != Bᵢ</mini> for some <mini>i</mini>.
</description><examples><code>!=([1, 2, 3], [1, 2, 3])</code><result>nil</result><code>!=([1, 2, 3], [1, 2])</code><result>[1, 2]</result><code>!=([1, 2], [1, 2, 3])</code><result>[1, 2, 3]</result><code>!=([1, 2, 3], [1, 2, 4])</code><result>[1, 2, 4]</result><code>!=([1, 3, 2], [1, 2, 3])</code><result>[1, 2, 3]</result></examples></method><method category="list" name="+" variadic="false"><return type="list"/><parameters><parameter name="List₁" type="list"/><parameter name="List₂" type="list"/></parameters><description>Returns a new list with the elements of <mini>List₁</mini> followed by the elements of <mini>List₂</mini>.
</description><examples/></method><method category="list" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="List" type="list"/><parameter name="Sep" type="string"/></parameters><description>Appends a representation of <mini>List</mini> to <mini>Buffer</mini> of the form <mini>repr(V₁) + Sep + repr(V₂) + Sep + ... + repr(Vₙ)</mini>,  where <mini>repr(Vᵢ)</mini> is a representation of the *i*-th element (using <mini>:append</mini>).
</description><examples><code>let B := string::buffer()
B:append([1, 2, 3, 4], &quot; - &quot;)
B:rest</code><result>&quot;1 - 2 - 3 - 4&quot;</result></examples></method><method category="list" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="List" type="list"/></parameters><description>Appends a representation of <mini>List</mini> to <mini>Buffer</mini> of the form <mini>&quot;[&quot; + repr(V₁) + &quot;,  &quot; + repr(V₂) + &quot;,  &quot; + ... + repr(Vₙ) + &quot;]&quot;</mini>,  where <mini>repr(Vᵢ)</mini> is a representation of the *i*-th element (using <mini>:append</mini>).
</description><examples><code>let B := string::buffer()
B:append([1, 2, 3, 4])
B:rest</code><result>&quot;[1, 2, 3, 4]&quot;</result></examples></method><method category="list" name=":bfind" variadic="false"><return type="tuple[integer, integer]"/><parameters><parameter name="List" type="list"/><parameter name="Value" type="any"/></parameters><description>Expects <mini>List</mini> is be already sorted according to <mini>&lt;&gt;</mini>. Returns <mini>(I,  J)</mini> where <mini>List[I] = Value &lt;= List[J]</mini>.
Note <mini>I</mini> can be <mini>nil</mini> and <mini>J</mini> can be <mini>List:length + 1</mini>.
</description><examples><code>let L := list(&quot;cake&quot;):sort</code><result>[&quot;a&quot;, &quot;c&quot;, &quot;e&quot;, &quot;k&quot;]</result><code>L:bfind(&quot;a&quot;)</code><result>(1, 1)</result><code>L:bfind(&quot;b&quot;)</code><result>(nil, 2)</result><code>L:bfind(&quot;c&quot;)</code><result>(2, 2)</result><code>L:bfind(&quot;z&quot;)</code><result>(nil, 5)</result></examples></method><method category="list" name=":bfind" variadic="false"><return type="tuple[integer, integer]"/><parameters><parameter name="List" type="list"/><parameter name="Value" type="any"/><parameter name="Compare" type="function"/></parameters><description>Expects <mini>List</mini> is be already sorted according to <mini>Compare</mini> (which should behave like <mini>&lt;&gt;</mini>). Returns <mini>(I,  J)</mini> where <mini>List[I] = Value &lt;= List[J]</mini>.
Note <mini>I</mini> can be <mini>nil</mini> and <mini>J</mini> can be <mini>List:length + 1</mini>.
</description><examples><code>let L := list(&quot;cake&quot;):sort</code><result>[&quot;a&quot;, &quot;c&quot;, &quot;e&quot;, &quot;k&quot;]</result><code>L:bfind(&quot;a&quot;, &lt;&gt;)</code><result>(1, 1)</result><code>L:bfind(&quot;b&quot;, &lt;&gt;)</code><result>(nil, 2)</result><code>L:bfind(&quot;c&quot;, &lt;&gt;)</code><result>(2, 2)</result><code>L:bfind(&quot;z&quot;, &lt;&gt;)</code><result>(nil, 5)</result></examples></method><method category="list" name=":const" variadic="false"><return type="list::const"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="List" type="list::mutable"/></parameters><description>Returns a new constant list containing copies of the elements of <mini>List</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="list" name=":copy" variadic="false"><return type="list"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="List" type="list"/></parameters><description>Returns a new list containing copies of the elements of <mini>List</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="list" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="List" type="list"/></parameters><description>Returns the length of <mini>List</mini>
</description><examples><code>[1, 2, 3]:count</code><result>3</result></examples></method><method category="list" name=":cycle" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Permutes <mini>List</mini> in place with no sub-cycles.
</description><examples/></method><method category="list" name=":delete" variadic="false"><return type="any|nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Index" type="integer"/></parameters><description>Removes and returns the <mini>Index</mini>-th value from <mini>List</mini>.
</description><examples><code>let L := list(&quot;cake&quot;)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:delete(2)</code><result>&quot;a&quot;</result><code>L:delete(-1)</code><result>&quot;e&quot;</result><code>L</code><result>[&quot;c&quot;, &quot;k&quot;]</result></examples></method><method category="list" name=":empty" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Removes all elements from <mini>List</mini> and returns it.
</description><examples/></method><method category="list" name=":filter" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>List</mini> for which <mini>Function(Value)</mini> returns <mini>nil</mini> and returns those values in a new list.
</description><examples><code>let L := [1, 2, 3, 4, 5, 6]
L:filter(2 | _)</code><result>[1, 3, 5]</result><code>L</code><result>[2, 4, 6]</result></examples></method><method category="list" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="List" type="list"/><parameter name="Value" type="any"/><parameter name="Compare" type="function"/></parameters><description>Returns the first position where <mini>Compare(Value,  List[Position])</mini> returns a non-nil value.
</description><examples><code>let L := list(&quot;cake&quot;)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:find(&quot;b&quot;, &lt;)</code><result>1</result><code>L:find(&quot;b&quot;, &gt;)</code><result>2</result></examples></method><method category="list" name=":find" variadic="false"><return type="integer|nil"/><parameters><parameter name="List" type="list"/><parameter name="Value" type="any"/></parameters><description>Returns the first position where <mini>List[Position] = Value</mini>.
</description><examples><code>let L := list(&quot;cake&quot;)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:find(&quot;a&quot;)</code><result>2</result><code>L:find(&quot;b&quot;)</code><result>nil</result></examples></method><method category="list" name=":first" variadic="false"><return type=""/><parameters><parameter name="List" type="list"/></parameters><description>Returns the first value in <mini>List</mini> or <mini>nil</mini> if <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":first2" variadic="false"><return type=""/><parameters><parameter name="List" type="list"/></parameters><description>Returns the first index and value in <mini>List</mini> or <mini>nil</mini> if <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":grow" variadic="true"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Sequence" type="sequence"/></parameters><description>Pushes of all of the values produced by <mini>Sequence</mini> onto <mini>List</mini> and returns <mini>List</mini>.
</description><examples><code>let L := [1, 2, 3]
L:grow(4 .. 6)</code><result>[1, 2, 3, 4, 5, 6]</result></examples></method><method category="list" name=":insert" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Index" type="integer"/><parameter name="Value" type="any"/></parameters><description>Inserts <mini>Value</mini> in the <mini>Index</mini>-th position in <mini>List</mini>.
</description><examples><code>let L := list(&quot;cake&quot;)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:insert(2, &quot;b&quot;)</code><result>[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:insert(-2, &quot;f&quot;)</code><result>[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;f&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L</code><result>[&quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;f&quot;, &quot;k&quot;, &quot;e&quot;]</result></examples></method><method category="list" name=":last" variadic="false"><return type=""/><parameters><parameter name="List" type="list"/></parameters><description>Returns the last value in <mini>List</mini> or <mini>nil</mini> if <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":last2" variadic="false"><return type=""/><parameters><parameter name="List" type="list"/></parameters><description>Returns the last index and value in <mini>List</mini> or <mini>nil</mini> if <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":length" variadic="false"><return type="integer"/><parameters><parameter name="List" type="list"/></parameters><description>Returns the length of <mini>List</mini>
</description><examples><code>[1, 2, 3]:length</code><result>3</result></examples></method><method category="list" name=":order" variadic="false"><return type="permutation"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Returns the ordering of the elements of <mini>List</mini> as a permutation,  index of first element,  index of second element,  ...,  index of last element,  when compared by <mini>&lt;=</mini>.
</description><examples><code>let L := [&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;]</code><result>[&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;]</result><code>L:order</code><result>&lt;3 2 4 1&gt;</result></examples></method><method category="list" name=":order" variadic="false"><return type="permutation"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Compare" type="function"/></parameters><description>Returns the ordering of the elements of <mini>List</mini> as a permutation,  index of first element,  index of second element,  ...,  index of last element,  when compared by <mini>Compare</mini>.
</description><examples><code>let L := [&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;]</code><result>[&quot;D&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;]</result><code>L:order(&gt;)</code><result>&lt;1 4 2 3&gt;</result></examples></method><method category="list" name=":permutations" variadic="false"><return type="sequence"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Returns a sequence of all permutations of <mini>List</mini>,  performed in-place.
</description><examples/></method><method category="list" name=":permute" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="list::mutable"/><parameter name="Arg₂" type="list"/></parameters><description/><examples/></method><method category="list" name=":permute" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>.. deprecated:: 2.7.0

   Use <mini>List:shuffle</mini> instead.

Permutes <mini>List</mini> in place.
</description><examples/></method><method category="list" name=":permute" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="list::mutable"/><parameter name="Arg₂" type="permutation"/></parameters><description/><examples/></method><method category="list" name=":pop" variadic="false"><return type="any|nil"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Removes and returns the first element of <mini>List</mini> or <mini>nil</mini> if the <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":pop" variadic="false"><return type="any|nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Fn" type="function"/></parameters><description>Removes and returns the first value where <mini>Fn(Value)</mini> is not <mini>nil</mini>.
</description><examples><code>let L := list(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result><code>L:pop(3 | _)</code><result>3</result><code>L</code><result>[1, 2, 4, 5, 6, 7, 8, 9, 10]</result></examples></method><method category="list" name=":precount" variadic="false"><return type="integer"/><parameters><parameter name="List" type="list"/></parameters><description>Returns the length of <mini>List</mini>
</description><examples><code>[1, 2, 3]:precount</code><result>3</result></examples></method><method category="list" name=":pull" variadic="false"><return type="any|nil"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Removes and returns the last element of <mini>List</mini> or <mini>nil</mini> if the <mini>List</mini> is empty.
</description><examples/></method><method category="list" name=":pull" variadic="false"><return type="any|nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Fn" type="function"/></parameters><description>Removes and returns the last value where <mini>Fn(Value)</mini> is not <mini>nil</mini>.
</description><examples><code>let L := list(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result><code>L:pull(3 | _)</code><result>9</result><code>L</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 10]</result></examples></method><method category="list" name=":push" variadic="true"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Values..." type="any"/></parameters><description>Pushes <mini>Values</mini> onto the start of <mini>List</mini> and returns <mini>List</mini>.
</description><examples/></method><method category="list" name=":put" variadic="true"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Values..." type="any"/></parameters><description>Pushes <mini>Values</mini> onto the end of <mini>List</mini> and returns <mini>List</mini>.
</description><examples/></method><method category="list" name=":random" variadic="false"><return type="any"/><parameters><parameter name="List" type="list"/></parameters><description>Returns a random (assignable) node from <mini>List</mini>.
</description><examples><code>let L := list(&quot;cake&quot;)</code><result>[&quot;c&quot;, &quot;a&quot;, &quot;k&quot;, &quot;e&quot;]</result><code>L:random</code><result>&quot;c&quot;</result><code>L:random</code><result>&quot;a&quot;</result></examples></method><method category="list" name=":remove" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Filter" type="function"/></parameters><description>Removes every <mini>Value</mini> from <mini>List</mini> for which <mini>Function(Value)</mini> doesn&apos;t return non-<mini>nil</mini> and returns those values in a new list.
</description><examples><code>let L := [1, 2, 3, 4, 5, 6]
L:remove(2 | _)</code><result>[2, 4, 6]</result><code>L</code><result>[1, 3, 5]</result></examples></method><method category="list" name=":reverse" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Reverses <mini>List</mini> in-place and returns it.
</description><examples/></method><method category="list" name=":shuffle" variadic="false"><return type="list"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Shuffles <mini>List</mini> in place.
</description><examples/></method><method category="list" name=":sort" variadic="false"><return type="List"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Compare" type="method"/></parameters><description>Sorts <mini>List</mini> in-place using <mini>Compare</mini> and returns it.
</description><examples/></method><method category="list" name=":sort" variadic="false"><return type="List"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Compare" type="function"/></parameters><description>Sorts <mini>List</mini> in-place using <mini>Compare</mini> and returns it.
</description><examples/></method><method category="list" name=":sort" variadic="false"><return type="List"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Sorts <mini>List</mini> in-place using <mini>&lt;=</mini> and returns it.
</description><examples/></method><method category="list" name=":sort" variadic="false"><return type="List"/><parameters><parameter name="List" type="list::mutable"/><parameter name="By" type="function"/><parameter name="Order" type="function"/></parameters><description>Sorts <mini>List</mini> in-place using <mini>Order(By(Vᵢ),  By(Vⱼ))</mini> as the comparison function (evaluating <mini>By(Vᵢ)</mini> only once for each <mini>i</mini>).
</description><examples><code>let L := [&quot;The&quot;, &quot;capital&quot;, &quot;of&quot;, &quot;Ireland&quot;, &quot;is&quot;, &quot;Dublin&quot;]</code><result>[&quot;The&quot;, &quot;capital&quot;, &quot;of&quot;, &quot;Ireland&quot;, &quot;is&quot;, &quot;Dublin&quot;]</result><code>L:sort(:upper, &lt;)</code><result>[&quot;capital&quot;, &quot;Dublin&quot;, &quot;Ireland&quot;, &quot;is&quot;, &quot;of&quot;, &quot;The&quot;]</result></examples></method><method category="list" name=":splice" variadic="false"><return type="list|nil"/><parameters><parameter name="List" type="list::mutable"/></parameters><description>Removes all elements from <mini>List</mini>. Returns the removed elements as a new list.
</description><examples/></method><method category="list" name=":splice" variadic="false"><return type="list|nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Index" type="integer"/><parameter name="Count" type="integer"/></parameters><description>Removes <mini>Count</mini> elements from <mini>List</mini> starting at <mini>Index</mini>. Returns the removed elements as a new list.
</description><examples/></method><method category="list" name=":splice" variadic="false"><return type="list|nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Index" type="integer"/><parameter name="Count" type="integer"/><parameter name="Source" type="list::mutable"/></parameters><description>Removes <mini>Count</mini> elements from <mini>List</mini> starting at <mini>Index</mini>,  then inserts the elements from <mini>Source</mini>,  leaving <mini>Source</mini> empty. Returns the removed elements as a new list.
</description><examples/></method><method category="list" name=":splice" variadic="false"><return type="nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Index" type="integer"/><parameter name="Source" type="list::mutable"/></parameters><description>Inserts the elements from <mini>Source</mini> into <mini>List</mini> starting at <mini>Index</mini>,  leaving <mini>Source</mini> empty.
</description><examples/></method><method category="list" name=":take" variadic="false"><return type="nil"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Source" type="list::mutable"/></parameters><description>Appends the elements from <mini>Source</mini> onto <mini>List</mini>,  leaving <mini>Source</mini> empty.
</description><examples/></method><method category="list" name=":visit" variadic="false"><return type="list"/><parameters><parameter name="Visitor" type="visitor"/><parameter name="List" type="list"/></parameters><description>Returns a new list containing copies of the elements of <mini>List</mini> created using <mini>Copy</mini>.
</description><examples/></method><method category="list" name="&lt;" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &lt; Bⱼ</mini>.
</description><examples><code>&lt;([1, 2, 3], [1, 2, 3])</code><result>nil</result><code>&lt;([1, 2, 3], [1, 2])</code><result>nil</result><code>&lt;([1, 2], [1, 2, 3])</code><result>[1, 2, 3]</result><code>&lt;([1, 2, 3], [1, 2, 4])</code><result>[1, 2, 4]</result><code>&lt;([1, 3, 2], [1, 2, 3])</code><result>nil</result></examples></method><method category="list" name="&lt;=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &lt;= Bⱼ</mini>.
</description><examples><code>&lt;=([1, 2, 3], [1, 2, 3])</code><result>[1, 2, 3]</result><code>&lt;=([1, 2, 3], [1, 2])</code><result>nil</result><code>&lt;=([1, 2], [1, 2, 3])</code><result>[1, 2, 3]</result><code>&lt;=([1, 2, 3], [1, 2, 4])</code><result>[1, 2, 4]</result><code>&lt;=([1, 3, 2], [1, 2, 3])</code><result>nil</result></examples></method><method category="list" name="=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>A:size = B:size</mini> and <mini>Aᵢ = Bᵢ</mini> for each <mini>i</mini>.
</description><examples><code>=([1, 2, 3], [1, 2, 3])</code><result>[1, 2, 3]</result><code>=([1, 2, 3], [1, 2])</code><result>nil</result><code>=([1, 2], [1, 2, 3])</code><result>nil</result><code>=([1, 2, 3], [1, 2, 4])</code><result>nil</result><code>=([1, 3, 2], [1, 2, 3])</code><result>nil</result></examples></method><method category="list" name="&gt;" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &gt; Bⱼ</mini>.
</description><examples><code>&gt;([1, 2, 3], [1, 2, 3])</code><result>nil</result><code>&gt;([1, 2, 3], [1, 2])</code><result>[1, 2]</result><code>&gt;([1, 2], [1, 2, 3])</code><result>nil</result><code>&gt;([1, 2, 3], [1, 2, 4])</code><result>nil</result><code>&gt;([1, 3, 2], [1, 2, 3])</code><result>[1, 2, 3]</result></examples></method><method category="list" name="&gt;=" variadic="false"><return type="B|nil"/><parameters><parameter name="A" type="list"/><parameter name="B" type="list"/></parameters><description>Returns <mini>B</mini> if <mini>Aᵢ = Bᵢ</mini> for each <mini>i = 1 .. j-1</mini> and <mini>Aⱼ &gt;= Bⱼ</mini>.
</description><examples><code>&gt;=([1, 2, 3], [1, 2, 3])</code><result>[1, 2, 3]</result><code>&gt;=([1, 2, 3], [1, 2])</code><result>[1, 2]</result><code>&gt;=([1, 2], [1, 2, 3])</code><result>nil</result><code>&gt;=([1, 2, 3], [1, 2, 4])</code><result>nil</result><code>&gt;=([1, 3, 2], [1, 2, 3])</code><result>[1, 2, 3]</result></examples></method><type name="list::mutable"><parents><parent type="list"/></parents><description/><examples/></type><type name="list::node::mutable"><parents><parent type="list::node"/></parents><description>A node in a <mini>list</mini>.
Dereferencing a <mini>list::node</mini> returns the corresponding value from the <mini>list</mini>.
Assigning to a <mini>list::node</mini> updates the corresponding value in the <mini>list</mini>.
</description><examples/></type><type name="list::node::mutable"><parents/><description>A node in a <mini>list</mini>.
Dereferencing a <mini>list::node</mini> returns the corresponding value from the <mini>list</mini>.
Assigning to a <mini>list::node</mini> updates the corresponding value in the <mini>list</mini>.
</description><examples/></type><type name="list::node"><parents/><description>A node in a <mini>list</mini>.
Dereferencing a <mini>list::node::const</mini> returns the corresponding value from the <mini>list</mini>.
</description><examples/></type><type name="list::slice"><parents/><description>A sub-list.
</description><examples/></type><type name="list"><parents><parent type="sequence"/></parents><description>A list of elements.
</description><examples/></type><method category="list" name="[]" variadic="false"><return type="list"/><parameters><parameter name="List" type="list"/><parameter name="Indices" type="vector"/></parameters><description>Returns a list containing the <mini>List[Indices[1]]</mini>,  <mini>List[Indices[2]]</mini>,  etc.
</description><examples/></method><method category="list" name="[]" variadic="false"><return type="list::slice"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Interval" type="integer::interval"/></parameters><description>Returns a slice of <mini>List</mini> starting at <mini>Interval:start</mini> and ending at <mini>Interval:limit</mini>,  both inclusive.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the list,  with <mini>-1</mini> returning the last node.
</description><examples/></method><method category="list" name="[]" variadic="false"><return type="list"/><parameters><parameter name="List" type="list"/><parameter name="Indices" type="list"/></parameters><description>Returns a list containing the <mini>List[Indices[1]]</mini>,  <mini>List[Indices[2]]</mini>,  etc.
</description><examples/></method><method category="list" name="[]" variadic="false"><return type="list::node|nil"/><parameters><parameter name="List" type="list"/><parameter name="Index" type="integer"/></parameters><description>Returns the <mini>Index</mini>-th node in <mini>List</mini> or <mini>nil</mini> if <mini>Index</mini> is outside the interval of <mini>List</mini>.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the list,  with <mini>-1</mini> returning the last node.
</description><examples><code>let L := [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]
L[3]</code><result>&quot;c&quot;</result><code>L[-2]</code><result>&quot;e&quot;</result><code>L[8]</code><result>nil</result></examples></method><method category="list" name="[]" variadic="false"><return type="list::slice"/><parameters><parameter name="List" type="list::mutable"/><parameter name="Interval" type="integer::range"/></parameters><description>Returns a slice of <mini>List</mini> starting at <mini>Interval:start</mini> and ending at <mini>Interval:limit</mini>,  both inclusive.
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the list,  with <mini>-1</mini> returning the last node.
</description><examples/></method><method category="list" name="[]" variadic="false"><return type="list::slice"/><parameters><parameter name="List" type="list::mutable"/><parameter name="From" type="integer"/><parameter name="To" type="integer"/></parameters><description>Returns a slice of <mini>List</mini> starting at <mini>From</mini> (inclusive) and ending at <mini>To</mini> (exclusive).
Indexing starts at <mini>1</mini>. Negative indices are counted from the end of the list,  with <mini>-1</mini> returning the last node.
</description><examples/></method><method category="list" name="list" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="names"/></parameters><description/><examples/></method><constructor category="list" name="list" variadic="false"><return type="list"/><parameters><parameter name="Tuple" type="tuple"/></parameters><description>Returns a list containing the values in <mini>Tuple</mini>.
</description><examples><code>list((1, 2, 3))</code><result>[1, 2, 3]</result></examples></constructor><constructor category="list" name="list" variadic="false"><return type="list"/><parameters/><description>Returns an empty list.
</description><examples><code>list()</code><result>[]</result></examples></constructor><constructor category="list" name="list" variadic="true"><return type="list"/><parameters><parameter name="Sequence" type="sequence"/></parameters><description>Returns a list of all of the values produced by <mini>Sequence</mini>.
</description><examples><code>list(1 .. 10)</code><result>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</result></examples></constructor></category><category name="library"><method category="library" name="::" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="module::dir"/><parameter name="Arg₂" type="string"/></parameters><description/><examples/></method><method category="library" name=":append" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="string::buffer"/><parameter name="Arg₂" type="importer"/></parameters><description/><examples/></method><type name="importer"><parents><parent type="function"/></parents><description/><examples/></type><type name="module::dir"><parents/><description/><examples/></type><function name="addpath"><return/><parameters><parameter name="Arg₁" type="string"/></parameters><description/><examples/></function><function name="getpath"><return/><parameters/><description/><examples/></function><function name="unload"><return/><parameters><parameter name="Path" type="string"/></parameters><description/><examples/></function></category><category name="json"><description>JSON values are mapped to Minilang as follows:

* <json>null</json> |harr| <mini>nil</mini>
* <json>true</json> |harr| <mini>true</mini>
* <json>false</json> |harr| <mini>false</mini>
* *integer* |harr| <mini>integer</mini>
* *real* |harr| <mini>real</mini>
* *string* |harr| <mini>string</mini>
* *array* |harr| <mini>list</mini>
* *object* |harr| <mini>map</mini>
</description><method category="json" name=":decode" variadic="false"><return type="any|error"/><parameters><parameter name="Json" type="json"/></parameters><description>Decodes the JSON string in <mini>Json</mini> into a Minilang value.
</description><examples/></method><method category="json" name=":value" variadic="false"><return type="any|error"/><parameters><parameter name="Json" type="json"/></parameters><description>Decodes the JSON string in <mini>Json</mini> into a Minilang value.
</description><examples/></method><type name="json"><parents><parent type="string"/></parents><description>Contains a JSON encoded value. Primarily used to distinguish strings containing JSON from other strings (e.g. for CBOR encoding).
</description><examples/></type><constructor name="json"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Encodes <mini>Value</mini> into JSON.
</description><examples/></constructor><method category="json" name="json::decode" variadic="false"><return type="any"/><parameters><parameter name="Json" type="address"/></parameters><description>Decodes <mini>Json</mini> into a Minilang value.
</description><examples/></method><method category="json" name="json::decode" variadic="false"><return type="any"/><parameters><parameter name="Stream" type="stream"/></parameters><description>Decodes the content of <mini>Json</mini> into a Minilang value.
</description><examples/></method><type name="json::decoder"><parents><parent type="stream"/></parents><description>A JSON decoder that can be written to as a stream and calls a user-supplied callback whenever a complete value is decoded.
</description><examples/></type><constructor category="json" name="json::decoder" variadic="false"><return type="json::decoder"/><parameters><parameter name="Callback" type="function"/></parameters><description>Returns a new JSON decoder that calls <mini>Callback(Value)</mini> whenever a complete JSON value is written to the decoder.
</description><examples/></constructor><constructor category="json" name="json::decoder" variadic="false"><return type="json::decoder"/><parameters><parameter name="Skip" type="string"/><parameter name="Callback" type="function"/></parameters><description>Returns a new JSON decoder that calls <mini>Callback(Value)</mini> whenever a complete JSON value is written to the decoder.
</description><examples/></constructor><method category="json" name="json::encode" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><method category="json" name="json::encode" variadic="false"><return type="string|error"/><parameters><parameter name="Value" type="any"/></parameters><description>Encodes <mini>Value</mini> into JSON,  raising an error if <mini>Value</mini> cannot be represented as JSON.
</description><examples/></method></category><category name="file"><method category="file" name=":atime" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="file::stat"/></parameters><description/><examples/></method><method category="file" name=":close" variadic="false"><return type=""/><parameters><parameter name="File" type="file"/></parameters><description>Closes <mini>File</mini>.
</description><examples/></method><method category="file" name=":close" variadic="false"><return type="integer"/><parameters><parameter name="File" type="popen"/></parameters><description>Waits for the subprocess to finish and returns the exit status.
</description><examples/></method><method category="file" name=":ctime" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="file::stat"/></parameters><description/><examples/></method><method category="file" name=":eof" variadic="false"><return type="File|nil"/><parameters><parameter name="File" type="file"/></parameters><description>Returns <mini>File</mini> if <mini>File</mini> is closed,  otherwise return <mini>nil</mini>.
</description><examples/></method><method category="file" name=":flush" variadic="false"><return type=""/><parameters><parameter name="File" type="file"/></parameters><description>Flushes any pending writes to <mini>File</mini>.
</description><examples/></method><method category="file" name=":mode" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="file::stat"/></parameters><description/><examples/></method><method category="file" name=":mtime" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="file::stat"/></parameters><description/><examples/></method><method category="file" name=":read" variadic="false"><return type="string"/><parameters><parameter name="Dir" type="dir"/></parameters><description/><examples/></method><method category="file" name=":size" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="file::stat"/></parameters><description/><examples/></method><type name="dir"><parents><parent type="sequence"/></parents><description/><examples/></type><type name="file::mode"><parents><parent type="enum"/></parents><description>* <mini>::DIR</mini>
* <mini>::CHR</mini>
* <mini>::BLK</mini>
* <mini>::REG</mini>
* <mini>::LNK</mini>
* <mini>::SOCK</mini>
* <mini>::FIFO</mini>
</description><examples/></type><type name="file"><parents><parent type="stream"/></parents><description>A file handle for reading / writing.
</description><examples/></type><type name="popen"><parents><parent type="file"/></parents><description>A file that reads or writes to a running subprocess.
</description><examples/></type><constructor name="dir"><return/><parameters><parameter name="Path" type="string"/></parameters><description/><examples/></constructor><function name="dir::create"><return/><parameters><parameter name="Path" type="string"/><parameter name="Mode" type="integer"/></parameters><description/><examples/></function><function name="dir::remove"><return/><parameters><parameter name="Path" type="string"/></parameters><description/><examples/></function><constructor name="file"><return/><parameters><parameter name="Path" type="string"/><parameter name="Mode" type="string"/></parameters><description>Opens the file at <mini>Path</mini> depending on <mini>Mode</mini>, 

* <mini>&quot;r&quot;</mini>: opens the file for reading, 
* <mini>&quot;w&quot;</mini>: opens the file for writing, 
* <mini>&quot;a&quot;</mini>: opens the file for appending.
</description><examples/></constructor><function name="file::exists"><return/><parameters><parameter name="Path" type="string"/></parameters><description/><examples/></function><function name="file::rename"><return/><parameters><parameter name="Old" type="string"/><parameter name="New" type="string"/></parameters><description>Renames the file <mini>Old</mini> to <mini>New</mini>.
</description><examples/></function><type name="file::stat"><parents/><description/><examples/></type><constructor name="file::stat"><return/><parameters><parameter name="Path" type="string"/></parameters><description/><examples/></constructor><function name="file::unlink"><return/><parameters><parameter name="Path" type="string"/></parameters><description>Removes the file at <mini>Path</mini>.
</description><examples/></function><constructor name="popen"><return/><parameters><parameter name="Command" type="string"/><parameter name="Mode" type="string"/></parameters><description>Executes <mini>Command</mini> with the shell and returns an open file to communicate with the subprocess depending on <mini>Mode</mini>, 

* <mini>&quot;r&quot;</mini>: opens the file for reading, 
* <mini>&quot;w&quot;</mini>: opens the file for writing.
</description><examples/></constructor></category><category name="compiler"><method category="compiler" name="$" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="expr"/></parameters><description/><examples/></method><method category="compiler" name=":clear" variadic="false"><return type="string"/><parameters><parameter name="Parser" type="parser"/></parameters><description/><examples/></method><method category="compiler" name=":command_def" variadic="false"><return type="any"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><method category="compiler" name=":command_let" variadic="false"><return type="any"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><method category="compiler" name=":command_var" variadic="false"><return type="variable"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/></parameters><description/><examples/></method><method category="compiler" name=":command_var" variadic="false"><return type="variable"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Type" type="type"/></parameters><description/><examples/></method><method category="compiler" name=":compile" variadic="false"><return type="any"/><parameters><parameter name="Parser" type="parser"/><parameter name="Compiler" type="compiler"/><parameter name="Parameters" type="list"/></parameters><description/><examples/></method><method category="compiler" name=":compile" variadic="false"><return type="any"/><parameters><parameter name="Parser" type="parser"/><parameter name="Compiler" type="compiler"/></parameters><description/><examples/></method><method category="compiler" name=":compile" variadic="false"><return type="any"/><parameters><parameter name="Expr" type="expr"/><parameter name="Compiler" type="compiler"/></parameters><description/><examples/></method><method category="compiler" name=":compile" variadic="false"><return type="any"/><parameters><parameter name="Expr" type="expr"/><parameter name="Compiler" type="compiler"/><parameter name="Arg₃" type="list"/></parameters><description/><examples/></method><method category="compiler" name=":def" variadic="false"><return type="any"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><method category="compiler" name=":end" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="expr"/></parameters><description/><examples/></method><method category="compiler" name=":escape" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/><parameter name="Callback" type="function"/></parameters><description/><examples/></method><method category="compiler" name=":evaluate" variadic="false"><return type="any"/><parameters><parameter name="Parser" type="parser"/><parameter name="Compiler" type="compiler"/></parameters><description/><examples/></method><method category="compiler" name=":input" variadic="false"><return type="compiler"/><parameters><parameter name="Parser" type="parser"/><parameter name="String" type="string"/></parameters><description/><examples/></method><method category="compiler" name=":input" variadic="false"><return type="compiler"/><parameters><parameter name="Parser" type="parser"/><parameter name="String" type="string"/><parameter name="Arg₃" type="integer"/></parameters><description/><examples/></method><method category="compiler" name=":let" variadic="false"><return type="any"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Value" type="any"/></parameters><description/><examples/></method><method category="compiler" name=":parse" variadic="false"><return type="expr"/><parameters><parameter name="Parser" type="parser"/></parameters><description/><examples/></method><method category="compiler" name=":permissive" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/><parameter name="Permissive" type="boolean"/></parameters><description/><examples/></method><method category="compiler" name=":reset" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/></parameters><description/><examples/></method><method category="compiler" name=":run" variadic="false"><return type="any"/><parameters><parameter name="Parser" type="parser"/><parameter name="Compiler" type="compiler"/></parameters><description/><examples/></method><method category="compiler" name=":source" variadic="false"><return type="tuple"/><parameters><parameter name="Parser" type="parser"/><parameter name="Source" type="string"/><parameter name="Line" type="integer"/></parameters><description/><examples/></method><method category="compiler" name=":source" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="expr"/></parameters><description/><examples/></method><method category="compiler" name=":special" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/><parameter name="Callback" type="function"/></parameters><description/><examples/></method><method category="compiler" name=":special" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/><parameter name="Callback" type="list"/></parameters><description/><examples/></method><method category="compiler" name=":start" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="expr"/></parameters><description/><examples/></method><method category="compiler" name=":var" variadic="false"><return type="variable"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/></parameters><description/><examples/></method><method category="compiler" name=":var" variadic="false"><return type="variable"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/><parameter name="Type" type="type"/></parameters><description/><examples/></method><method category="compiler" name=":vars" variadic="false"><return type="map"/><parameters><parameter name="Compiler" type="compiler"/></parameters><description/><examples/></method><method category="compiler" name=":warnings" variadic="false"><return type="parser"/><parameters><parameter name="Parser" type="parser"/></parameters><description/><examples/></method><type name="command::decl"><parents/><description/><examples/></type><type name="compilereoi"><parents/><description/><examples/></type><type name="compiler::function"><parents><parent type="state"/></parents><description/><examples/></type><type name="compiler"><parents><parent type="state"/></parents><description/><examples/></type><type name="function::inline"><parents><parent type="function"/></parents><description/><examples/></type><type name="global"><parents/><description/><examples/></type><type name="macro::subst"><parents><parent type="function"/></parents><description/><examples/></type><type name="parser"><parents/><description/><examples/></type><method category="compiler" name="[]" variadic="false"><return type="any"/><parameters><parameter name="Compiler" type="compiler"/><parameter name="Name" type="string"/></parameters><description/><examples/></method><constructor name="compiler"><return/><parameters><parameter name="Globals" type="function|map"/></parameters><description/><examples/></constructor><method category="compiler" name="compilereoi" variadic="false"><return type=""/><parameters/><description/><examples/></method><method category="compiler" name="compilereoi" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></method><function name="mlidentcachecheck"><return/><parameters/><description/><examples/></function><function name="mlxor"><return/><parameters/><description/><examples/></function><function name="not"><return/><parameters><parameter name="Arg₁" type="any"/></parameters><description/><examples/></function><constructor name="parser"><return/><parameters><parameter name="Read?" type="function"/></parameters><description/><examples/></constructor><function name="source"><return/><parameters/><description>Returns the caller source location. Evaluated at compile time if possible.
</description><examples/></function></category><category name="macro"><method category="macro" name=":add" variadic="true"><return type="blockbuilder"/><parameters><parameter name="Builder" type="expr::builder"/><parameter name="Expr..." type="expr"/></parameters><description>Adds the expression <mini>Expr</mini> to a block.
</description><examples/></method><method category="macro" name=":do" variadic="true"><return type="blockbuilder"/><parameters><parameter name="Builder" type="block::builder"/><parameter name="Exprᵢ..." type="expr"/></parameters><description>Adds each expression <mini>Exprᵢ</mini> to a block.
</description><examples/></method><method category="macro" name=":end" variadic="false"><return type="expr"/><parameters><parameter name="Builder" type="block::builder"/></parameters><description>Finishes a block and returns it as an expression.
</description><examples/></method><method category="macro" name=":end" variadic="false"><return type="expr"/><parameters><parameter name="Builder" type="expr::builder"/></parameters><description>Finishes a block and returns it as an expression.
</description><examples/></method><method category="macro" name=":let" variadic="false"><return type="blockbuilder"/><parameters><parameter name="Builder" type="block::builder"/><parameter name="Name" type="string"/><parameter name="Expr" type="expr"/></parameters><description>Adds a <mini>let</mini>-declaration to a block with initializer <mini>Expr</mini>.
</description><examples/></method><method category="macro" name=":scoped" variadic="true"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Name, Value" type="names"/></parameters><description>Returns a new expression which wraps <mini>Expr</mini> with the constant definitions from <mini>Names</mini> and <mini>Values</mini>.
</description><examples/></method><method category="macro" name=":scoped" variadic="false"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Definitions" type="map"/></parameters><description>Returns a new expression which wraps <mini>Expr</mini> with the constant definitions from <mini>Definitions</mini>.
</description><examples/></method><method category="macro" name=":scoped" variadic="false"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Module" type="module"/></parameters><description>Returns a new expression which wraps <mini>Expr</mini> with the exports from <mini>Module</mini>.
</description><examples/></method><method category="macro" name=":scoped" variadic="false"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Module" type="type"/></parameters><description>Returns a new expression which wraps <mini>Expr</mini> with the exports from <mini>Module</mini>.
</description><examples/></method><method category="macro" name=":subst" variadic="false"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Names" type="list"/><parameter name="Subs" type="list"/></parameters><description>Returns a new expression which substitutes macro references to <mini>:$Nameᵢ</mini> with the corresponding expressions <mini>Subᵢ</mini>.
</description><examples/></method><method category="macro" name=":subst" variadic="true"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Name, Sub" type="names"/></parameters><description>Returns a new expression which substitutes macro references to <mini>:$Nameᵢ</mini> with the corresponding expression <mini>Subᵢ</mini>.
</description><examples/></method><method category="macro" name=":subst" variadic="true"><return type="expr"/><parameters><parameter name="Expr" type="expr"/><parameter name="Subs" type="map"/></parameters><description>Returns a new expression which substitutes macro references to <mini>:$Nameᵢ</mini> with the corresponding expression <mini>Subᵢ</mini>.
</description><examples/></method><method category="macro" name=":var" variadic="false"><return type="blockbuilder"/><parameters><parameter name="Builder" type="block::builder"/><parameter name="Name" type="string"/></parameters><description>Adds a <mini>var</mini>-declaration to a block.
</description><examples/></method><method category="macro" name=":var" variadic="false"><return type="blockbuilder"/><parameters><parameter name="Builder" type="block::builder"/><parameter name="Name" type="string"/><parameter name="Expr" type="expr"/></parameters><description>Adds a <mini>var</mini>-declaration to a block with initializer <mini>Expr</mini>.
</description><examples/></method><type name="block::builder"><parents/><description>Utility object for building a block expression.
</description><examples/></type><type name="expr::builder"><parents/><description>Utility object for building a block expression.
</description><examples/></type><type name="expr"><parents/><description>An expression value used by the compiler to implement macros.
</description><examples/></type><type name="macro"><parents/><description>A macro.
</description><examples/></type><constructor name="macro"><return/><parameters><parameter name="Function" type="function"/></parameters><description>Returns a new macro which applies <mini>Function</mini> when compiled.
<mini>Function</mini> should have the following signature: <mini>Function(Expr₁: expr,  Expr₂: expr,  ...): expr</mini>.
</description><examples/></constructor><function name="macro::block"><return/><parameters/><description>Returns a new block builder.
</description><examples/></function><function name="macro::call"><return/><parameters/><description>Returns a new call builder.
</description><examples/></function><function name="macro::fun"><return/><parameters><parameter name="Params" type="map"/><parameter name="Arg₂" type="expr"/></parameters><description>Returns a new function expression.
</description><examples/></function><function name="macro::ident"><return/><parameters><parameter name="Name" type="string"/></parameters><description>Returns a new identifier expression.
</description><examples/></function><function name="macro::list"><return/><parameters/><description>Returns a new list builder.
</description><examples/></function><function name="macro::map"><return/><parameters/><description>Returns a new list builder.
</description><examples/></function><function name="macro::subst"><return/><parameters><parameter name="Expr" type="expr"/></parameters><description>Returns a new macro which substitutes its arguments into <mini>Expr</mini>.
</description><examples/></function><function name="macro::tuple"><return/><parameters/><description>Returns a new list builder.
</description><examples/></function><function name="macro::value"><return/><parameters><parameter name="Value" type="any"/></parameters><description>Returns a new value expression.
</description><examples/></function></category><category name="cbor"><method category="cbor" name="cbor::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Bytes" type="address"/></parameters><description>Decode <mini>Bytes</mini> into a Minilang value,  or return an error if <mini>Bytes</mini> contains invalid CBOR or cannot be decoded into a Minilang value.
</description><examples/></method><method category="cbor" name="cbor::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Bytes" type="address"/><parameter name="Globals" type="map"/></parameters><description>Decode <mini>Bytes</mini> into a Minilang value,  or return an error if <mini>Bytes</mini> contains invalid CBOR or cannot be decoded into a Minilang value.
</description><examples/></method><method category="cbor" name="cbor::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Bytes" type="address"/><parameter name="Externals" type="external::set"/></parameters><description>Decode <mini>Bytes</mini> into a Minilang value,  or return an error if <mini>Bytes</mini> contains invalid CBOR or cannot be decoded into a Minilang value.
</description><examples/></method><method category="cbor" name="cbor::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Stream" type="stream"/></parameters><description/><examples/></method><method category="cbor" name="cbor::decode" variadic="false"><return type="any|error"/><parameters><parameter name="Bytes" type="address"/><parameter name="Globals" type="function"/></parameters><description>Decode <mini>Bytes</mini> into a Minilang value,  or return an error if <mini>Bytes</mini> contains invalid CBOR or cannot be decoded into a Minilang value.
</description><examples/></method><type name="cbor::decoder"><parents><parent type="stream"/></parents><description>A CBOR decoder that can be written to as a stream and calls a user-supplied callback whenever a complete value is decoded.
</description><examples/></type><constructor name="cbor::decoder"><return/><parameters><parameter name="Callback" type="function"/></parameters><description>Returns a new CBOR decoder that calls <mini>Callback(Value)</mini> whenever a complete CBOR value is written to the decoder.
</description><examples/></constructor></category><category name="bytecode"><description>This is a mostly internal module,  subject to change.
</description><method category="bytecode" name=":append" variadic="false"><return type=""/><parameters><parameter name="Buffer" type="string::buffer"/><parameter name="Closure" type="closure"/></parameters><description>Appends a representation of <mini>Closure</mini> to <mini>Buffer</mini>.
</description><examples/></method><method category="bytecode" name=":info" variadic="false"><return type="map"/><parameters><parameter name="Closure" type="closure"/></parameters><description>Returns some information about <mini>Closure</mini>.
</description><examples/></method><method category="bytecode" name=":list" variadic="false"><return type="string"/><parameters><parameter name="Closure" type="closure"/></parameters><description>Returns a listing of the bytecode of <mini>Closure</mini>.
</description><examples/></method><method category="bytecode" name=":parameters" variadic="false"><return type="list"/><parameters><parameter name="Closure" type="closure"/></parameters><description>Returns the list of parameter names of <mini>Closure</mini>.
</description><examples/></method><method category="bytecode" name=":values" variadic="false"><return type="map"/><parameters><parameter name="Closure" type="closure"/></parameters><description>Returns some information about <mini>Closure</mini>.
</description><examples/></method><type name="closure::info"><parents/><description>Information about a closure.
</description><examples/></type><type name="closure"><parents><parent type="function"/><parent type="sequence"/></parents><description>A Minilang function.
</description><examples/></type><type name="variable"><parents/><description>A variable,  which can hold another value (returned when dereferenced) and assigned a new value.
Variables may optionally be typed,  assigning a value that is not an instance of the specified type (or a subtype) will raise an error.
</description><examples/></type><constructor name="closure"><return/><parameters><parameter name="Original" type="closure"/></parameters><description>Returns a copy of <mini>Closure</mini>.
</description><examples/></constructor><type name="continuation"><parents><parent type="state"/><parent type="sequence"/></parents><description>A bytecode function frame which can be resumed.
</description><examples/></type><constructor category="bytecode" name="variable" variadic="false"><return type="variable"/><parameters><parameter name="Value" type="any"/></parameters><description>Return a new untyped variable with current value <mini>Value</mini>.
</description><examples/></constructor><constructor category="bytecode" name="variable" variadic="false"><return type="variable"/><parameters/><description>Return a new untyped variable with current value <mini>nil</mini>.
</description><examples/></constructor><constructor category="bytecode" name="variable" variadic="false"><return type="variable"/><parameters><parameter name="Value" type="any"/><parameter name="Type" type="type"/></parameters><description>Return a new typed variable with type <mini>Type</mini> and current value <mini>Value</mini>.
</description><examples/></constructor></category><category name="base64"><function name="base64::decode"><return/><parameters><parameter name="String" type="address"/></parameters><description/><examples/></function><function name="base64::encode"><return/><parameters><parameter name="Address" type="address"/></parameters><description/><examples/></function></category><category name="base16"><function name="base16::decode"><return/><parameters><parameter name="String" type="address"/></parameters><description/><examples/></function><function name="base16::encode"><return/><parameters><parameter name="Address" type="address"/></parameters><description/><examples/></function></category><category name="ast"><method category="ast" name=":ast" variadic="false"><return type="ast::expr"/><parameters><parameter name="Expr" type="expr"/></parameters><description>Returns a tuple describing the expression <mini>Expr</mini>.
</description><examples/></method><type name="ast::names"><parents><parent type="list"/></parents><description/><examples/></type><type name="paramkind"><parents><parent type="enum"/></parents><description>* <mini>::Default</mini>
* <mini>::Extra</mini>
* <mini>::Named</mini>
* <mini>::ByRef</mini>
* <mini>::AsVar</mini>
</description><examples/></type><type name="ast::expr"><parents/><description>An expression

* <mini>:source(Value: ast::expr): string</mini>
* <mini>:startline(Value: ast::expr): integer</mini>
* <mini>:endline(Value: ast::expr): integer</mini>
</description><examples/></type><type name="ast::expr::and"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>and</mini> expression

</description><examples/></type><type name="ast::expr::args"><parents><parent type="ast::expr"/></parents><description>An <mini>args</mini> expression

</description><examples/></type><type name="ast::expr::assign"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>assign</mini> expression

</description><examples/></type><type name="ast::expr::blank"><parents><parent type="ast::expr"/></parents><description>A <mini>blank</mini> expression

</description><examples/></type><type name="ast::expr::block"><parents><parent type="ast::expr"/></parents><description>A <mini>block</mini> expression

* <mini>:vars(Value: ast::expr::block): list[ast::local]</mini>
* <mini>:lets(Value: ast::expr::block): list[ast::local]</mini>
* <mini>:defs(Value: ast::expr::block): list[ast::local]</mini>
* <mini>:child(Value: ast::expr::block): list[ast::expr]</mini>
* <mini>:catchbody(Value: ast::expr::block): list[ast::expr]</mini>
* <mini>:must(Value: ast::expr::block): list[ast::expr]</mini>
* <mini>:catchident(Value: ast::expr::block): string</mini>
* <mini>:numvars(Value: ast::expr::block): integer</mini>
* <mini>:numlets(Value: ast::expr::block): integer</mini>
* <mini>:numdefs(Value: ast::expr::block): integer</mini>
</description><examples/></type><type name="ast::expr::call"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>call</mini> expression

</description><examples/></type><type name="ast::expr::constcall"><parents><parent type="ast::expr::parentvalue"/></parents><description>A <mini>const</mini> <mini>call</mini> expression

</description><examples/></type><type name="ast::expr::debug"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>debug</mini> expression

</description><examples/></type><type name="ast::expr::def"><parents><parent type="ast::expr::local"/></parents><description>A <mini>def</mini> expression

</description><examples/></type><type name="ast::expr::default"><parents><parent type="ast::expr"/></parents><description>A <mini>default</mini> expression

* <mini>:child(Value: ast::expr::default): list[ast::expr]</mini>
* <mini>:index(Value: ast::expr::default): integer</mini>
* <mini>:flags(Value: ast::expr::default): integer</mini>
</description><examples/></type><type name="ast::expr::defin"><parents><parent type="ast::expr::local"/></parents><description>A <mini>def</mini> <mini>in</mini> expression

</description><examples/></type><type name="ast::expr::define"><parents><parent type="ast::expr::ident"/></parents><description>A <mini>define</mini> expression

</description><examples/></type><type name="ast::expr::defunpack"><parents><parent type="ast::expr::local"/></parents><description>A <mini>def</mini> <mini>unpack</mini> expression

</description><examples/></type><type name="ast::expr::delegate"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>delegate</mini> expression

</description><examples/></type><type name="ast::expr::each"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>each</mini> expression

</description><examples/></type><type name="ast::expr::exit"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>exit</mini> expression

</description><examples/></type><type name="ast::expr::for"><parents><parent type="ast::expr"/></parents><description>A <mini>for</mini> expression

* <mini>:key(Value: ast::expr::for): string</mini>
* <mini>:local(Value: ast::expr::for): list[ast::local]</mini>
* <mini>:sequence(Value: ast::expr::for): list[ast::expr]</mini>
* <mini>:body(Value: ast::expr::for): list[ast::expr]</mini>
* <mini>:name(Value: ast::expr::for): string</mini>
* <mini>:unpack(Value: ast::expr::for): integer</mini>
</description><examples/></type><type name="ast::expr::fun"><parents><parent type="ast::expr"/></parents><description>A <mini>fun</mini> expression

* <mini>:name(Value: ast::expr::fun): string</mini>
* <mini>:params(Value: ast::expr::fun): list[ast::param]</mini>
* <mini>:body(Value: ast::expr::fun): list[ast::expr]</mini>
* <mini>:returntype(Value: ast::expr::fun): list[ast::expr]</mini>
</description><examples/></type><type name="ast::expr::guard"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>guard</mini> expression

</description><examples/></type><type name="ast::expr::ident"><parents><parent type="ast::expr"/></parents><description>An <mini>ident</mini> expression

* <mini>:ident(Value: ast::expr::ident): string</mini>
</description><examples/></type><type name="ast::expr::if"><parents><parent type="ast::expr"/></parents><description>An <mini>if</mini> expression

* <mini>:cases(Value: ast::expr::if): list[ast::ifcase]</mini>
* <mini>:else(Value: ast::expr::if): list[ast::expr]</mini>
</description><examples/></type><type name="ast::expr::ifconfig"><parents><parent type="ast::expr"/></parents><description>An <mini>if</mini> <mini>config</mini> expression

* <mini>:child(Value: ast::expr::ifconfig): list[ast::expr]</mini>
* <mini>:config(Value: ast::expr::ifconfig): string</mini>
</description><examples/></type><type name="ast::expr::inline"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>inline</mini> expression

</description><examples/></type><type name="ast::expr::it"><parents><parent type="ast::expr"/></parents><description>An <mini>it</mini> expression

</description><examples/></type><type name="ast::expr::let"><parents><parent type="ast::expr::local"/></parents><description>A <mini>let</mini> expression

</description><examples/></type><type name="ast::expr::letin"><parents><parent type="ast::expr::local"/></parents><description>A <mini>let</mini> <mini>in</mini> expression

</description><examples/></type><type name="ast::expr::letunpack"><parents><parent type="ast::expr::local"/></parents><description>A <mini>let</mini> <mini>unpack</mini> expression

</description><examples/></type><type name="ast::expr::list"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>list</mini> expression

</description><examples/></type><type name="ast::expr::local"><parents><parent type="ast::expr"/></parents><description>A <mini>local</mini> expression

* <mini>:local(Value: ast::expr::local): list[ast::local]</mini>
* <mini>:child(Value: ast::expr::local): list[ast::expr]</mini>
* <mini>:count(Value: ast::expr::local): integer</mini>
</description><examples/></type><type name="ast::expr::loop"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>loop</mini> expression

</description><examples/></type><type name="ast::expr::map"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>map</mini> expression

</description><examples/></type><type name="ast::expr::next"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>next</mini> expression

</description><examples/></type><type name="ast::expr::nil"><parents><parent type="ast::expr"/></parents><description>A <mini>nil</mini> expression

</description><examples/></type><type name="ast::expr::not"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>not</mini> expression

</description><examples/></type><type name="ast::expr::old"><parents><parent type="ast::expr"/></parents><description>An <mini>old</mini> expression

</description><examples/></type><type name="ast::expr::or"><parents><parent type="ast::expr::parent"/></parents><description>An <mini>or</mini> expression

</description><examples/></type><type name="ast::expr::parent"><parents><parent type="ast::expr"/></parents><description>A <mini>parent</mini> expression

* <mini>:child(Value: ast::expr::parent): list[ast::expr]</mini>
* <mini>:name(Value: ast::expr::parent): string</mini>
</description><examples/></type><type name="ast::expr::parentvalue"><parents><parent type="ast::expr"/></parents><description>A <mini>parent</mini> <mini>value</mini> expression

* <mini>:child(Value: ast::expr::parentvalue): list[ast::expr]</mini>
* <mini>:value(Value: ast::expr::parentvalue): any</mini>
</description><examples/></type><type name="ast::expr::recur"><parents><parent type="ast::expr"/></parents><description>A <mini>recur</mini> expression

</description><examples/></type><type name="ast::expr::ref"><parents><parent type="ast::expr::local"/></parents><description>A <mini>ref</mini> expression

</description><examples/></type><type name="ast::expr::refin"><parents><parent type="ast::expr::local"/></parents><description>A <mini>ref</mini> <mini>in</mini> expression

</description><examples/></type><type name="ast::expr::refunpack"><parents><parent type="ast::expr::local"/></parents><description>A <mini>ref</mini> <mini>unpack</mini> expression

</description><examples/></type><type name="ast::expr::register"><parents><parent type="ast::expr"/></parents><description>A <mini>register</mini> expression

</description><examples/></type><type name="ast::expr::resolve"><parents><parent type="ast::expr::parentvalue"/></parents><description>A <mini>resolve</mini> expression

</description><examples/></type><type name="ast::expr::return"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>return</mini> expression

</description><examples/></type><type name="ast::expr::scoped"><parents><parent type="ast::expr"/></parents><description>A <mini>scoped</mini> expression

</description><examples/></type><type name="ast::expr::string"><parents><parent type="ast::expr"/></parents><description>A <mini>string</mini> expression

* <mini>:parts(Value: ast::expr::string): list[ast::stringpart]</mini>
</description><examples/></type><type name="ast::expr::subst"><parents><parent type="ast::expr"/></parents><description>A <mini>subst</mini> expression

</description><examples/></type><type name="ast::expr::suspend"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>suspend</mini> expression

</description><examples/></type><type name="ast::expr::switch"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>switch</mini> expression

</description><examples/></type><type name="ast::expr::tuple"><parents><parent type="ast::expr::parent"/></parents><description>A <mini>tuple</mini> expression

</description><examples/></type><type name="ast::expr::unknown"><parents><parent type="ast::expr"/></parents><description>An <mini>unknown</mini> expression

</description><examples/></type><type name="ast::expr::value"><parents><parent type="ast::expr"/></parents><description>A <mini>value</mini> expression

* <mini>:value(Value: ast::expr::value): any</mini>
</description><examples/></type><type name="ast::expr::var"><parents><parent type="ast::expr::local"/></parents><description>A <mini>var</mini> expression

</description><examples/></type><type name="ast::expr::varin"><parents><parent type="ast::expr::local"/></parents><description>A <mini>var</mini> <mini>in</mini> expression

</description><examples/></type><type name="ast::expr::vartype"><parents><parent type="ast::expr::local"/></parents><description>A <mini>var</mini> <mini>type</mini> expression

</description><examples/></type><type name="ast::expr::varunpack"><parents><parent type="ast::expr::local"/></parents><description>A <mini>var</mini> <mini>unpack</mini> expression

</description><examples/></type><type name="ast::expr::with"><parents><parent type="ast::expr::local"/></parents><description>A <mini>with</mini> expression

</description><examples/></type><type name="ast::ifcase"><parents/><description>An if case

* <mini>:condition(Value: ast::ifcase): list[ast::expr]</mini>
* <mini>:body(Value: ast::ifcase): list[ast::expr]</mini>
* <mini>:local(Value: ast::ifcase): list[ast::local]</mini>
* <mini>:token(Value: ast::ifcase): integer</mini>
</description><examples/></type><type name="ast::local"><parents/><description>A local

* <mini>:ident(Value: ast::local): string</mini>
* <mini>:line(Value: ast::local): integer</mini>
* <mini>:index(Value: ast::local): integer</mini>
</description><examples/></type><type name="ast::param"><parents/><description>A param

* <mini>:ident(Value: ast::param): string</mini>
* <mini>:line(Value: ast::param): integer</mini>
* <mini>:kind(Value: ast::param): ast::paramkind</mini>
</description><examples/></type><type name="ast::stringpart"><parents/><description>A string part

* <mini>:child(Value: ast::stringpart): list[ast::expr]</mini>
* <mini>:chars(Value: ast::stringpart): string</mini>
* <mini>:length(Value: ast::stringpart): integer</mini>
* <mini>:line(Value: ast::stringpart): integer</mini>
</description><examples/></type></category><category name="array"><method category="array" name="!=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Compare the degrees,  dimensions and entries of <mini>A</mini> and <mini>B</mini> and returns <mini>nil</mini> if they match and <mini>B</mini> otherwise.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ != B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A != Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ != B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A != Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ != B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A != Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ != B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="!==" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A != Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="$" variadic="false"><return type="array"/><parameters><parameter name="List" type="list"/></parameters><description>Returns an array with the contents of <mini>List</mini>.
</description><examples/></method><method category="array" name="$" variadic="false"><return type="array"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns an array with the contents of <mini>List</mini>.
</description><examples/></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ * B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A * 2</code><result>&lt;&lt;2 4&gt; &lt;6 8&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A * Bᵥ</mini>.
</description><examples><code>let B := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 * B</code><result>&lt;&lt;2 4&gt; &lt;6 8&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::integer"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ * B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A * 2</code><result>&lt;&lt;2 4&gt; &lt;6 8&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::real"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ * B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A * 2.5</code><result>&lt;&lt;2.5 5&gt; &lt;7.5 10&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array::real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A * Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 * A</code><result>&lt;&lt;2.5 5&gt; &lt;7.5 10&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::complex"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ * B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A * (1 + 1i)</code><result>&lt;&lt;1 + 1i 2 + 2i&gt; &lt;3 + 3i 4 + 4i&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array::complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A * Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>(1 + 1i) * A</code><result>&lt;&lt;1 + 1i 2 + 2i&gt; &lt;3 + 3i 4 + 4i&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A * B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A * B</code><result>&lt;&lt;7 16 27&gt; &lt;40 55 72&gt;&gt;</result><code>B * A</code><result>&lt;&lt;7 16 27&gt; &lt;40 55 72&gt;&gt;</result><code>A * C</code><result>&lt;&lt;5 20 45&gt; &lt;20 50 90&gt;&gt;</result><code>C * A</code><result>&lt;&lt;5 20 45&gt; &lt;20 50 90&gt;&gt;</result><code>B * C</code><result>&lt;&lt;35 80 135&gt; &lt;50 110 180&gt;&gt;</result><code>C * B</code><result>&lt;&lt;35 80 135&gt; &lt;50 110 180&gt;&gt;</result></examples></method><method category="array" name="*" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array::integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A * Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 * A</code><result>&lt;&lt;2 4&gt; &lt;6 8&gt;&gt;</result></examples></method><method category="array" name="**" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns an array with <mini>Aᵢ * Bⱼ</mini> for each pair of elements of <mini>A</mini> and <mini>B</mini>. The result will have shape <mini>A:shape + B:shape</mini>.

</description><examples><code>let A := array([1, 8, 3])</code><result>&lt;1 8 3&gt;</result><code>let B := array([[7, 2], [4, 11]])</code><result>&lt;&lt;7 2&gt; &lt;4 11&gt;&gt;</result><code>A:shape</code><result>[3]</result><code>B:shape</code><result>[2, 2]</result><code>let C := A ** B</code><result>&lt;&lt;&lt;7 2&gt; &lt;4 11&gt;&gt; &lt;&lt;56 16&gt; &lt;32 88&gt;&gt; &lt;&lt;21 6&gt; &lt;12 33&gt;&gt;&gt;</result><code>C:shape</code><result>[3, 2, 2]</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::integer"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ + B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A + 2</code><result>&lt;&lt;3 4&gt; &lt;5 6&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A + B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A + B</code><result>&lt;&lt;8 10 12&gt; &lt;14 16 18&gt;&gt;</result><code>B + A</code><result>&lt;&lt;8 10 12&gt; &lt;14 16 18&gt;&gt;</result><code>A + C</code><result>&lt;&lt;6 12 18&gt; &lt;9 15 21&gt;&gt;</result><code>C + A</code><result>&lt;&lt;6 12 18&gt; &lt;9 15 21&gt;&gt;</result><code>B + C</code><result>&lt;&lt;12 18 24&gt; &lt;15 21 27&gt;&gt;</result><code>C + B</code><result>&lt;&lt;12 18 24&gt; &lt;15 21 27&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::real"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ + B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A + 2.5</code><result>&lt;&lt;3.5 4.5&gt; &lt;5.5 6.5&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array::real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A + Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 + A</code><result>&lt;&lt;3.5 4.5&gt; &lt;5.5 6.5&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::complex"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ + B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A + (1 + 1i)</code><result>&lt;&lt;2 + 1i 3 + 1i&gt; &lt;4 + 1i 5 + 1i&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ + B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A + 2</code><result>&lt;&lt;3 4&gt; &lt;5 6&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array::complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A + Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>(1 + 1i) + A</code><result>&lt;&lt;2 + 1i 3 + 1i&gt; &lt;4 + 1i 5 + 1i&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A + Bᵥ</mini>.
</description><examples><code>let B := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 + B</code><result>&lt;&lt;3 4&gt; &lt;5 6&gt;&gt;</result></examples></method><method category="array" name="+" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array::integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A + Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 + A</code><result>&lt;&lt;3 4&gt; &lt;5 6&gt;&gt;</result></examples></method><method category="array" name="++" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns an array with <mini>Aᵢ + Bⱼ</mini> for each pair of elements of <mini>A</mini> and <mini>B</mini>. The result will have shape <mini>A:shape + B:shape</mini>.

</description><examples><code>let A := array([1, 8, 3])</code><result>&lt;1 8 3&gt;</result><code>let B := array([[7, 2], [4, 11]])</code><result>&lt;&lt;7 2&gt; &lt;4 11&gt;&gt;</result><code>A:shape</code><result>[3]</result><code>B:shape</code><result>[2, 2]</result><code>let C := A ++ B</code><result>&lt;&lt;&lt;8 3&gt; &lt;5 12&gt;&gt; &lt;&lt;15 10&gt; &lt;12 19&gt;&gt; &lt;&lt;10 5&gt; &lt;7 14&gt;&gt;&gt;</result><code>C:shape</code><result>[3, 2, 2]</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A - B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A - B</code><result>&lt;&lt;-6 -6 -6&gt; &lt;-6 -6 -6&gt;&gt;</result><code>B - A</code><result>&lt;&lt;6 6 6&gt; &lt;6 6 6&gt;&gt;</result><code>A - C</code><result>&lt;&lt;-4 -8 -12&gt; &lt;-1 -5 -9&gt;&gt;</result><code>C - A</code><result>&lt;&lt;4 8 12&gt; &lt;1 5 9&gt;&gt;</result><code>B - C</code><result>&lt;&lt;2 -2 -6&gt; &lt;5 1 -3&gt;&gt;</result><code>C - B</code><result>&lt;&lt;-2 2 6&gt; &lt;-5 -1 3&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns an array with the negated values from <mini>Array</mini>.
</description><examples/></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ - B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A - 2</code><result>&lt;&lt;-1 0&gt; &lt;1 2&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A - Bᵥ</mini>.
</description><examples><code>let B := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 - B</code><result>&lt;&lt;1 0&gt; &lt;-1 -2&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::integer"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ - B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A - 2</code><result>&lt;&lt;-1 0&gt; &lt;1 2&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array::integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A - Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 - A</code><result>&lt;&lt;1 0&gt; &lt;-1 -2&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::real"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ - B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A - 2.5</code><result>&lt;&lt;-1.5 -0.5&gt; &lt;0.5 1.5&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array::real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A - Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 - A</code><result>&lt;&lt;1.5 0.5&gt; &lt;-0.5 -1.5&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::complex"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ - B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A - (1 + 1i)</code><result>&lt;&lt;0 - 1i 1 - 1i&gt; &lt;2 - 1i 3 - 1i&gt;&gt;</result></examples></method><method category="array" name="-" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array::complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A - Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>(1 + 1i) - A</code><result>&lt;&lt;0 + 1i -1 + 1i&gt; &lt;-2 + 1i -3 + 1i&gt;&gt;</result></examples></method><method category="array" name="--" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns an array with <mini>Aᵢ - Bⱼ</mini> for each pair of elements of <mini>A</mini> and <mini>B</mini>. The result will have shape <mini>A:shape + B:shape</mini>.

</description><examples><code>let A := array([1, 8, 3])</code><result>&lt;1 8 3&gt;</result><code>let B := array([[7, 2], [4, 11]])</code><result>&lt;&lt;7 2&gt; &lt;4 11&gt;&gt;</result><code>A:shape</code><result>[3]</result><code>B:shape</code><result>[2, 2]</result><code>let C := A -- B</code><result>&lt;&lt;&lt;-6 -1&gt; &lt;-3 -10&gt;&gt; &lt;&lt;1 6&gt; &lt;4 -3&gt;&gt; &lt;&lt;-4 1&gt; &lt;-1 -8&gt;&gt;&gt;</result><code>C:shape</code><result>[3, 2, 2]</result></examples></method><method category="array" name="-&gt;" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="permutation"/><parameter name="Arg₂" type="permutation"/></parameters><description/><examples/></method><method category="array" name="." variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns the inner product of <mini>A</mini> and <mini>B</mini>. The last dimension of <mini>A</mini> and the first dimension of <mini>B</mini> must match,  skipping any dimensions of size <mini>1</mini>.
</description><examples/></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A / B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A / B</code><result>&lt;&lt;0.142857 0.25 0.333333&gt; &lt;0.4 0.454545 0.5&gt;&gt;</result><code>B / A</code><result>&lt;&lt;7 4 3&gt; &lt;2.5 2.2 2&gt;&gt;</result><code>A / C</code><result>&lt;&lt;0.2 0.2 0.2&gt; &lt;0.8 0.5 0.4&gt;&gt;</result><code>C / A</code><result>&lt;&lt;5 5 5&gt; &lt;1.25 2 2.5&gt;&gt;</result><code>B / C</code><result>&lt;&lt;1.4 0.8 0.6&gt; &lt;2 1.1 0.8&gt;&gt;</result><code>C / B</code><result>&lt;&lt;0.714286 1.25 1.66667&gt; &lt;0.5 0.909091 1.25&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ / B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A / 2</code><result>&lt;&lt;0.5 1&gt; &lt;1.5 2&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A / Bᵥ</mini>.
</description><examples><code>let B := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 / B</code><result>&lt;&lt;2 1&gt; &lt;0.666667 0.5&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::integer"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ / B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A / 2</code><result>&lt;&lt;0.5 1&gt; &lt;1.5 2&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array::integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A / Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 / A</code><result>&lt;&lt;2 1&gt; &lt;0.666667 0.5&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::real"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ / B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A / 2.5</code><result>&lt;&lt;0.4 0.8&gt; &lt;1.2 1.6&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array::real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A / Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 / A</code><result>&lt;&lt;2.5 1.25&gt; &lt;0.833333 0.625&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array::complex"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ / B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A / (1 + 1i)</code><result>&lt;&lt;0.5 - 0.5i 1 - 1i&gt; &lt;1.5 - 1.5i 2 - 2i&gt;&gt;</result></examples></method><method category="array" name="/" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array::complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A / Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>(1 + 1i) / A</code><result>&lt;&lt;1 + 1i 0.5 + 0.5i&gt; &lt;0.333333 + 0.333333i 0.25 + 0.25i&gt;&gt;</result></examples></method><method category="array" name="//" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns an array with <mini>Aᵢ / Bⱼ</mini> for each pair of elements of <mini>A</mini> and <mini>B</mini>. The result will have shape <mini>A:shape + B:shape</mini>.

</description><examples><code>let A := array([1, 8, 3])</code><result>&lt;1 8 3&gt;</result><code>let B := array([[7, 2], [4, 11]])</code><result>&lt;&lt;7 2&gt; &lt;4 11&gt;&gt;</result><code>A:shape</code><result>[3]</result><code>B:shape</code><result>[2, 2]</result><code>let C := A // B</code><result>&lt;&lt;&lt;0.142857 0.5&gt; &lt;0.25 0.0909091&gt;&gt; &lt;&lt;1.14286 4&gt; &lt;2 0.727273&gt;&gt; &lt;&lt;0.428571 1.5&gt; &lt;0.75 0.272727&gt;&gt;&gt;</result><code>C:shape</code><result>[3, 2, 2]</result></examples></method><method category="array" name="/\" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A /\ B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A /\ B</code><result>&lt;&lt;1 0 1&gt; &lt;0 1 4&gt;&gt;</result><code>B /\ A</code><result>&lt;&lt;1 0 1&gt; &lt;0 1 4&gt;&gt;</result><code>A /\ C</code><result>&lt;&lt;1 2 3&gt; &lt;4 0 6&gt;&gt;</result><code>C /\ A</code><result>&lt;&lt;1 2 3&gt; &lt;4 0 6&gt;&gt;</result><code>B /\ C</code><result>&lt;&lt;5 8 9&gt; &lt;0 10 12&gt;&gt;</result><code>C /\ B</code><result>&lt;&lt;5 8 9&gt; &lt;0 10 12&gt;&gt;</result></examples></method><method category="array" name="/\" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ bitwise and B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A /\ 2</code><result>&lt;&lt;0 2&gt; &lt;2 0&gt;&gt;</result></examples></method><method category="array" name="/\" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A bitwise and Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 /\ A</code><result>&lt;&lt;0 2&gt; &lt;2 0&gt;&gt;</result></examples></method><method category="array" name=":const" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="array"/></parameters><description/><examples/></method><method category="array" name=":copy" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Return a new array with the same values of <mini>Array</mini> but not sharing the underlying data.
</description><examples/></method><method category="array" name=":copy" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="visitor"/><parameter name="Arg₂" type="array"/></parameters><description/><examples/></method><method category="array" name=":copy" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Function" type="function"/></parameters><description>Return a new array with the results of applying <mini>Function</mini> to each value of <mini>Array</mini>.
</description><examples/></method><method category="array" name=":count" variadic="false"><return type="integer"/><parameters><parameter name="Array" type="array"/></parameters><description>Return the number of elements in <mini>Array</mini>.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:count</code><result>6</result></examples></method><method category="array" name=":degree" variadic="false"><return type="integer"/><parameters><parameter name="Array" type="array"/></parameters><description>Return the degree of <mini>Array</mini>.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:degree</code><result>2</result></examples></method><method category="array" name=":det" variadic="false"><return type="any"/><parameters><parameter name="A" type="matrix"/></parameters><description>Returns the determinant of <mini>A</mini>.
</description><examples/></method><method category="array" name=":diag" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="array"/></parameters><description/><examples/></method><method category="array" name=":expand" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Indices" type="list"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini> with additional unit-length axes at the specified <mini>Indices</mini>.
</description><examples/></method><method category="array" name=":join" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Start" type="integer"/><parameter name="Count" type="integer"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini> replacing the dimensions at <mini>Start .. (Start + Count)</mini> with a single dimension with the same overall size.
</description><examples/></method><method category="array" name=":lu" variadic="false"><return type="tuple[matrix, matrix, matrix]"/><parameters><parameter name="A" type="matrix"/></parameters><description>Returns a tuple of matrices <mini>(L,  U,  P)</mini> such that <mini>L</mini> is lower triangular,  <mini>U</mini> is upper triangular,  <mini>P</mini> is a permutation matrix and <mini>P . A = L . U</mini>.
</description><examples><code>let A := $[[0, 5, 22/3], [4, 2, 1], [2, 7, 9]]</code><result>&lt;&lt;0 5 7.33333&gt; &lt;4 2 1&gt; &lt;2 7 9&gt;&gt;</result><code>let (L, U, P) := A:lu</code><result>(&lt;&lt;1 0 0&gt; &lt;0.5 1 0&gt; &lt;0 0.833333 1&gt;&gt;, &lt;&lt;4 2 1&gt; &lt;0 6 8.5&gt; &lt;0 0 0.25&gt;&gt;, &lt;&lt;0 1 0&gt; &lt;0 0 1&gt; &lt;1 0 0&gt;&gt;)</result><code>\P . L . U</code><result>&lt;&lt;0 5 7.33333&gt; &lt;4 2 1&gt; &lt;2 7 9&gt;&gt;</result></examples></method><method category="array" name=":max" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A max B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A max B</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>B max A</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>A max C</code><result>&lt;&lt;5 10 15&gt; &lt;5 10 15&gt;&gt;</result><code>C max A</code><result>&lt;&lt;5 10 15&gt; &lt;5 10 15&gt;&gt;</result><code>B max C</code><result>&lt;&lt;7 10 15&gt; &lt;10 11 15&gt;&gt;</result><code>C max B</code><result>&lt;&lt;7 10 15&gt; &lt;10 11 15&gt;&gt;</result></examples></method><method category="array" name=":max" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := max(Aᵥ,  B)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A max 2</code><result>&lt;&lt;2 2&gt; &lt;3 4&gt;&gt;</result></examples></method><method category="array" name=":max" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := max(A,  Bᵥ)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 max A</code><result>&lt;&lt;2 2&gt; &lt;3 4&gt;&gt;</result></examples></method><method category="array" name=":max" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := max(Aᵥ,  B)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A max 2.5</code><result>&lt;&lt;2.5 2.5&gt; &lt;3 4&gt;&gt;</result></examples></method><method category="array" name=":max" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := max(A,  Bᵥ)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 max A</code><result>&lt;&lt;2 2&gt; &lt;3 4&gt;&gt;</result></examples></method><method category="array" name=":maxidx" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Count" type="integer"/></parameters><description>Returns a new array with the indices of maximums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:maxidx(1)</code><result>&lt;&lt;&lt;1&gt; &lt;3&gt;&gt; &lt;&lt;2&gt; &lt;1&gt;&gt;&gt;</result><code>A:maxidx(2)</code><result>&lt;&lt;2 3&gt; &lt;2 1&gt;&gt;</result></examples></method><method category="array" name=":maxidx" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns a new array with the indices of maximums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:maxidx</code><result>&lt;1 2 3&gt;</result></examples></method><method category="array" name=":maxval" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the maximum of the values in <mini>Array</mini>.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:maxval</code><result>20</result></examples></method><method category="array" name=":maxval" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Count" type="integer"/></parameters><description>Returns a new array with the maximums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:maxval(1)</code><result>&lt;&lt;19 20&gt; &lt;17 20&gt;&gt;</result><code>A:maxval(2)</code><result>&lt;20 20&gt;</result></examples></method><method category="array" name=":min" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A min B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A min B</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>B min A</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A min C</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>C min A</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>B min C</code><result>&lt;&lt;5 8 9&gt; &lt;5 10 12&gt;&gt;</result><code>C min B</code><result>&lt;&lt;5 8 9&gt; &lt;5 10 12&gt;&gt;</result></examples></method><method category="array" name=":min" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := min(Aᵥ,  B)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A min 2</code><result>&lt;&lt;1 2&gt; &lt;2 2&gt;&gt;</result></examples></method><method category="array" name=":min" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := min(Aᵥ,  B)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A min 2.5</code><result>&lt;&lt;1 2&gt; &lt;2.5 2.5&gt;&gt;</result></examples></method><method category="array" name=":min" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := min(A,  Bᵥ)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 min A</code><result>&lt;&lt;1 2&gt; &lt;2 2&gt;&gt;</result></examples></method><method category="array" name=":min" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := min(A,  Bᵥ)</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2.5 min A</code><result>&lt;&lt;1 2&gt; &lt;2 2&gt;&gt;</result></examples></method><method category="array" name=":minidx" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Count" type="integer"/></parameters><description>Returns a new array with the indices of minimums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:minidx(1)</code><result>&lt;&lt;&lt;3&gt; &lt;1&gt;&gt; &lt;&lt;1&gt; &lt;2&gt;&gt;&gt;</result><code>A:minidx(2)</code><result>&lt;&lt;2 1&gt; &lt;1 762471795&gt;&gt;</result></examples></method><method category="array" name=":minidx" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns a new array with the indices of minimums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:minidx</code><result>&lt;1 2 1&gt;</result></examples></method><method category="array" name=":minval" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the minimum of the values in <mini>Array</mini>.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:minval</code><result>4</result></examples></method><method category="array" name=":minval" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Count" type="integer"/></parameters><description>Returns a new array with the minimums <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A:minval(1)</code><result>&lt;&lt;12 4&gt; &lt;5 9&gt;&gt;</result><code>A:minval(2)</code><result>&lt;4 5&gt;</result></examples></method><method category="array" name=":order" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="vector"/></parameters><description/><examples/></method><method category="array" name=":order" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="vector"/><parameter name="Arg₂" type="function"/></parameters><description/><examples/></method><method category="array" name=":permute" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Indices" type="list"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini>,  permuting the axes according to <mini>Indices</mini>.
</description><examples><code>let A := array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])</code><result>&lt;&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt; &lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;&gt;</result><code>A:shape</code><result>[2, 2, 3]</result><code>let B := A:permute([2, 3, 1])</code><result>&lt;&lt;&lt;1 7&gt; &lt;2 8&gt; &lt;3 9&gt;&gt; &lt;&lt;4 10&gt; &lt;5 11&gt; &lt;6 12&gt;&gt;&gt;</result><code>B:shape</code><result>[2, 3, 2]</result></examples></method><method category="array" name=":permute" variadic="true"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Indices" type="integer"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini>,  permuting the axes according to <mini>Indices</mini>.
</description><examples><code>let A := array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])</code><result>&lt;&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt; &lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;&gt;</result><code>A:shape</code><result>[2, 2, 3]</result><code>let B := A:permute(2, 3, 1)</code><result>&lt;&lt;&lt;1 7&gt; &lt;2 8&gt; &lt;3 9&gt;&gt; &lt;&lt;4 10&gt; &lt;5 11&gt; &lt;6 12&gt;&gt;&gt;</result><code>B:shape</code><result>[2, 3, 2]</result></examples></method><method category="array" name=":prod" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the product of the values in <mini>Array</mini>.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:prod</code><result>720</result></examples></method><method category="array" name=":prod" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Count" type="integer"/></parameters><description>Returns a new array with the products of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:prod(1)</code><result>&lt;6 120&gt;</result></examples></method><method category="array" name=":prods" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index" type="integer"/></parameters><description>Returns a new array with the partial products of <mini>Array</mini> in the <mini>Index</mini>-th dimension.
</description><examples/></method><method category="array" name=":reshape" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Sizes" type="list"/></parameters><description>Returns a copy of <mini>Array</mini> with dimensions specified by <mini>Sizes</mini>.
.. note::

   This method always makes a copy of the data so that changes to the returned array do not affect the original.
</description><examples/></method><method category="array" name=":reverse" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index" type="integer"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini> with dimension <mini>Index</mini> reversed.
</description><examples/></method><method category="array" name=":shape" variadic="false"><return type="list"/><parameters><parameter name="Array" type="array"/></parameters><description>Return the shape of <mini>Array</mini>.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:shape</code><result>[2, 3]</result></examples></method><method category="array" name=":softmax" variadic="false"><return type="vector"/><parameters><parameter name="Vector" type="vector::real"/></parameters><description>Returns <mini>softmax(Vector)</mini>.
</description><examples><code>let A := array([1, 4.2, 0.6, 1.23, 4.3, 1.2, 2.5])</code><result>&lt;1 4.2 0.6 1.23 4.3 1.2 2.5&gt;</result><code>let B := A:softmax</code><result>&lt;0.01659 0.406995 0.0111206 0.0208802 0.449799 0.0202631 0.0743513&gt;</result></examples></method><method category="array" name=":split" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index" type="integer"/><parameter name="Sizes" type="list"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini> replacing the dimension at <mini>Index</mini> with new dimensions with sizes <mini>Sizes</mini>. The total count <mini>Sizes₁ * Sizes₂ * ... * Sizesₙ</mini> must equal the original size.
</description><examples/></method><method category="array" name=":strides" variadic="false"><return type="list"/><parameters><parameter name="Array" type="array"/></parameters><description>Return the strides of <mini>Array</mini> in bytes.
</description><examples/></method><method category="array" name=":sum" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the sum of the values in <mini>Array</mini>.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:sum</code><result>21</result></examples></method><method category="array" name=":sum" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index" type="integer"/></parameters><description>Returns a new array with the sums of <mini>Array</mini> in the last <mini>Count</mini> dimensions.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:sum(1)</code><result>&lt;6 15&gt;</result></examples></method><method category="array" name=":sums" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index" type="integer"/></parameters><description>Returns a new array with the partial sums of <mini>Array</mini> in the <mini>Index</mini>-th dimension.
</description><examples/></method><method category="array" name=":swap" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the transpose of <mini>Array</mini>,  sharing the underlying data.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>A:swap</code><result>&lt;&lt;1 4&gt; &lt;2 5&gt; &lt;3 6&gt;&gt;</result></examples></method><method category="array" name=":swap" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index₁" type="integer"/><parameter name="Index₂" type="integer"/></parameters><description>Returns an array sharing the underlying data with <mini>Array</mini> with dimensions <mini>Index₁</mini> and <mini>Index₂</mini> swapped.
</description><examples/></method><method category="array" name=":tr" variadic="false"><return type="any"/><parameters><parameter name="A" type="matrix"/></parameters><description>Returns the trace of <mini>A</mini>.
</description><examples/></method><method category="array" name=":update" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array::mutable"/><parameter name="Function" type="function"/></parameters><description>Update the values in <mini>Array</mini> in place by applying <mini>Function</mini> to each value.
</description><examples/></method><method category="array" name=":where" variadic="false"><return type="list[tuple]"/><parameters><parameter name="Array" type="array"/><parameter name="Function" type="function"/></parameters><description>Returns list of indices <mini>Array</mini> where <mini>Function(Arrayᵢ)</mini> returns a non-nil value.
</description><examples/></method><method category="array" name=":where" variadic="false"><return type="list"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns a list of non-zero indices of <mini>Array</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &lt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &lt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&lt;&gt;" variadic="false"><return type="integer"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Compare the degrees,  dimensions and entries of <mini>A</mini> and <mini>B</mini> and returns <mini>-1</mini>,  <mini>0</mini> or <mini>1</mini>. This method is only intending for sorting arrays or using them as keys in a map.
</description><examples/></method><method category="array" name="=" variadic="false"><return type="integer"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Compare the degrees,  dimensions and entries of <mini>A</mini> and <mini>B</mini> and returns <mini>B</mini> if they match and <mini>nil</mini> otherwise.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A = Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ = B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A = Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ = B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ = B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A = Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ = B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="==" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A = Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt; B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt; Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A &gt;&lt; B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A &gt;&lt; B</code><result>&lt;&lt;7 10 11&gt; &lt;14 15 14&gt;&gt;</result><code>B &gt;&lt; A</code><result>&lt;&lt;7 10 11&gt; &lt;14 15 14&gt;&gt;</result><code>A &gt;&lt; C</code><result>&lt;&lt;5 10 15&gt; &lt;5 15 15&gt;&gt;</result><code>C &gt;&lt; A</code><result>&lt;&lt;5 10 15&gt; &lt;5 15 15&gt;&gt;</result><code>B &gt;&lt; C</code><result>&lt;&lt;7 10 15&gt; &lt;15 11 15&gt;&gt;</result><code>C &gt;&lt; B</code><result>&lt;&lt;7 10 15&gt; &lt;15 11 15&gt;&gt;</result></examples></method><method category="array" name="&gt;&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ bitwise xor B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A &gt;&lt; 2</code><result>&lt;&lt;3 0&gt; &lt;1 6&gt;&gt;</result></examples></method><method category="array" name="&gt;&lt;" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A bitwise xor Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 &gt;&lt; A</code><result>&lt;&lt;3 0&gt; &lt;1 6&gt;&gt;</result></examples></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="real"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="any"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="any"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="complex"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if Aᵥ &gt;= B then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="complex"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="&gt;=" variadic="false"><return type="array"/><parameters><parameter name="A" type="real"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := if A &gt;= Bᵥ then 1 else 0 end</mini>.
</description><examples/></method><method category="array" name="@" variadic="false"><return type="vector"/><parameters><parameter name="T" type="matrix"/><parameter name="X" type="vector"/></parameters><description>Returns <mini>X</mini> transformed by <mini>T</mini>. <mini>T</mini> must be a <mini>N</mini> |times| <mini>N</mini> matrix and <mini>X</mini> a vector of size <mini>N - 1</mini>.
</description><examples/></method><type name="array::complex"><parents><parent type="array"/></parents><description/><examples/></type><type name="array::integer"><parents><parent type="array::real"/></parents><description/><examples/></type><type name="array::iterator"><parents/><description/><examples/></type><type name="array::mutable::complex"><parents><parent type="array::complex"/><parent type="array::mutable"/></parents><description>Base type for arrays of complex numbers.
</description><examples/></type><type name="array::mutable::integer"><parents><parent type="array::integer"/><parent type="array::mutable::real"/></parents><description>Base type for arrays of integers.
</description><examples/></type><type name="array::mutable::iterator"><parents><parent type="array::iterator"/></parents><description/><examples/></type><type name="array::mutable::real"><parents><parent type="array::real"/><parent type="array::mutable::complex"/></parents><description>Base type for arrays of real numbers.
</description><examples/></type><type name="array::mutable"><parents><parent type="array"/><parent type="buffer"/></parents><description/><examples/></type><type name="array::real"><parents><parent type="array::complex"/></parents><description/><examples/></type><type name="array"><parents><parent type="address"/><parent type="sequence"/></parents><description>Base type for multidimensional arrays.
</description><examples/></type><type name="matrix::complex"><parents><parent type="array::complex"/><parent type="matrix"/></parents><description/><examples/></type><type name="matrix::integer"><parents><parent type="matrix::real"/></parents><description/><examples/></type><type name="matrix::mutable::complex"><parents><parent type="array::mutable::complex"/><parent type="matrix::mutable"/></parents><description>Base type for matrices of complex numbers.
</description><examples/></type><type name="matrix::mutable::integer"><parents><parent type="matrix::integer"/><parent type="matrix::mutable::real"/></parents><description>Base type for matrices of integers.
</description><examples/></type><type name="matrix::mutable::real"><parents><parent type="matrix::real"/><parent type="array::mutable::real"/><parent type="matrix::mutable::complex"/></parents><description>Base type for matrices of real numbers.
</description><examples/></type><type name="matrix::mutable"><parents><parent type="matrix"/><parent type="array::mutable"/></parents><description/><examples/></type><type name="matrix::real"><parents><parent type="array::real"/><parent type="matrix::complex"/></parents><description/><examples/></type><type name="matrix"><parents><parent type="array"/></parents><description>Arrays with exactly 2 dimensions.
</description><examples/></type><type name="permutation"><parents><parent type="vector::uint32"/></parents><description>A permutation of numbers <mini>1 .. N</mini> (each number occurs exactly once).
</description><examples/></type><type name="ref::any"><parents/><description/><examples/></type><type name="ref::complex32"><parents/><description/><examples/></type><type name="ref::complex64"><parents/><description/><examples/></type><type name="ref::float32"><parents/><description/><examples/></type><type name="ref::float64"><parents/><description/><examples/></type><type name="ref::int16"><parents/><description/><examples/></type><type name="ref::int32"><parents/><description/><examples/></type><type name="ref::int64"><parents/><description/><examples/></type><type name="ref::int8"><parents/><description/><examples/></type><type name="ref::uint16"><parents/><description/><examples/></type><type name="ref::uint32"><parents/><description/><examples/></type><type name="ref::uint64"><parents/><description/><examples/></type><type name="ref::uint8"><parents/><description/><examples/></type><type name="vector::complex"><parents><parent type="array::complex"/><parent type="vector"/></parents><description/><examples/></type><type name="vector::integer"><parents><parent type="vector::real"/></parents><description/><examples/></type><type name="vector::mutable::complex"><parents><parent type="vector::complex"/><parent type="array::mutable::complex"/><parent type="vector::mutable"/></parents><description>Base type for vectors of complex numbers.
</description><examples/></type><type name="vector::mutable::integer"><parents><parent type="vector::integer"/><parent type="vector::mutable::real"/></parents><description>Base type for vectors of integers.
</description><examples/></type><type name="vector::mutable::real"><parents><parent type="vector::real"/><parent type="array::mutable::real"/><parent type="vector::mutable::complex"/></parents><description>Base type for vectors of real numbers.
</description><examples/></type><type name="vector::mutable"><parents><parent type="vector"/><parent type="array::mutable"/></parents><description/><examples/></type><type name="vector::real"><parents><parent type="array::real"/><parent type="vector::complex"/></parents><description/><examples/></type><type name="vector"><parents><parent type="array"/></parents><description>Arrays with exactly 1 dimension.
</description><examples/></type><method category="array" name="[]" variadic="true"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Index₁" type="any"/></parameters><description>Returns a sub-array of <mini>Array</mini> sharing the underlying data,  indexed by <mini>Indexᵢ</mini>.
Dimensions are copied to the output array,  applying the indices as follows:

* If <mini>Indexᵢ</mini> is <mini>nil</mini> or <mini>*</mini> then the next dimension is copied unchanged.

* If <mini>Indexᵢ</mini> is <mini>..</mini> then the remaining indices are applied to the last dimensions of <mini>Array</mini> and the dimensions in between are copied unchanged.

* If <mini>Indexᵢ</mini> is an <mini>integer</mini> then the <mini>Indexᵢ</mini>-th value of the next dimension is selected and the dimension is dropped from the output.

* If <mini>Indexᵢ</mini> is an <mini>integer::interval</mini> then the corresponding slice of the next dimension is copied to the output.

* If <mini>Indexᵢ</mini> is a <mini>tuple[integer,  ...]</mini> then the next dimensions are indexed by the corresponding integer in turn (i.e. <mini>A[(I,  J,  K)]</mini> gives the same result as <mini>A[I,  J,  K]</mini>).

* If <mini>Indexᵢ</mini> is a <mini>list[integer]</mini> then the next dimension is copied as a sparse dimension with the respective entries.

* If <mini>Indexᵢ</mini> is a <mini>list[tuple[integer,  ...]]</mini> then the appropriate dimensions are dropped and a single sparse dimension is added with the corresponding entries.

* If <mini>Indexᵢ</mini> is an <mini>array::int8</mini> with dimensions matching the corresponding dimensions of <mini>A</mini> then a sparse dimension is added with entries corresponding to the non-zero values in <mini>Indexᵢ</mini> (i.e. <mini>A[B]</mini> is equivalent to <mini>A[B:where]</mini>).
* If <mini>Indexᵢ</mini> is an <mini>array::int32</mini> with all but last dimensions matching the corresponding dimensions of <mini>A</mini> then a sparse dimension is added with entries corresponding indices in the last dimension of <mini>Indexᵢ</mini>.

If fewer than <mini>A:degree</mini> indices are provided then the remaining dimensions are copied unchanged.
</description><examples><code>let A := array([[[19, 16, 12], [4, 7, 20]], [[5, 17, 8], [20, 9, 20]]])
A[1]</code><result>&lt;&lt;19 16 12&gt; &lt;4 7 20&gt;&gt;</result><code>A[1, 2]</code><result>&lt;4 7 20&gt;</result><code>A[1, 2, 3]</code><result>20</result><code>A[nil, 2]</code><result>&lt;&lt;4 7 20&gt; &lt;20 9 20&gt;&gt;</result><code>A[.., 3]</code><result>&lt;&lt;12 20&gt; &lt;8 20&gt;&gt;</result><code>A[.., 1 .. 2]</code><result>&lt;&lt;&lt;19 16&gt; &lt;4 7&gt;&gt; &lt;&lt;5 17&gt; &lt;20 9&gt;&gt;&gt;</result><code>A[(1, 2, 3)]</code><result>20</result><code>A[[(1, 2, 3), (2, 1, 1)]]</code><result>&lt;20 5&gt;</result><code>let B := A &gt; 10</code><result>&lt;&lt;&lt;1 1 1&gt; &lt;0 0 1&gt;&gt; &lt;&lt;0 1 0&gt; &lt;1 0 1&gt;&gt;&gt;</result><code>type(B)</code><result>&lt;&lt;array::mutable::int8&gt;&gt;</result><code>A[B]</code><result>&lt;19 16 12 20 17 20 20&gt;</result><code>let C := A:maxidx(2)</code><result>&lt;&lt;2 3&gt; &lt;2 1&gt;&gt;</result><code>type(C)</code><result>&lt;&lt;matrix::mutable::int32&gt;&gt;</result><code>A[C]</code><result>&lt;20 20&gt;</result></examples></method><method category="array" name="[]" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/><parameter name="Indices" type="map"/></parameters><description>Returns a sub-array of <mini>Array</mini> sharing the underlying data.
The <mini>i</mini>-th dimension is indexed by <mini>Indices[i]</mini> if present,  and <mini>nil</mini> otherwise.
</description><examples/></method><method category="array" name="\" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="permutation"/></parameters><description/><examples/></method><method category="array" name="\" variadic="false"><return type="matrix"/><parameters><parameter name="A" type="matrix"/></parameters><description>Returns the inverse of <mini>A</mini>.
</description><examples/></method><method category="array" name="\" variadic="false"><return type="vector"/><parameters><parameter name="A" type="matrix"/><parameter name="B" type="vector"/></parameters><description>Returns the solution <mini>X</mini> of <mini>A . X = B</mini>.
</description><examples/></method><method category="array" name="\/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="integer"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := Aᵥ bitwise or B</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>A \/ 2</code><result>&lt;&lt;3 2&gt; &lt;3 6&gt;&gt;</result></examples></method><method category="array" name="\/" variadic="false"><return type="array"/><parameters><parameter name="A" type="array"/><parameter name="B" type="array"/></parameters><description>Returns <mini>A \/ B</mini> (element-wise). The shapes of <mini>A</mini> and <mini>B</mini> must be compatible,  i.e. either

* <mini>A:shape = B:shape</mini> or
* <mini>A:shape</mini> is a prefix of <mini>B:shape</mini> or
* <mini>B:shape</mini> is a prefix of <mini>A:shape</mini>.

When the shapes are not the same,  remaining dimensions are repeated (broadcast) to the required size.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := array([[7, 8, 9], [10, 11, 12]])</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>let C := array([5, 10, 15])</code><result>&lt;5 10 15&gt;</result><code>A \/ B</code><result>&lt;&lt;7 10 11&gt; &lt;14 15 14&gt;&gt;</result><code>B \/ A</code><result>&lt;&lt;7 10 11&gt; &lt;14 15 14&gt;&gt;</result><code>A \/ C</code><result>&lt;&lt;5 10 15&gt; &lt;5 15 15&gt;&gt;</result><code>C \/ A</code><result>&lt;&lt;5 10 15&gt; &lt;5 15 15&gt;&gt;</result><code>B \/ C</code><result>&lt;&lt;7 10 15&gt; &lt;15 11 15&gt;&gt;</result><code>C \/ B</code><result>&lt;&lt;7 10 15&gt; &lt;15 11 15&gt;&gt;</result></examples></method><method category="array" name="\/" variadic="false"><return type="array"/><parameters><parameter name="A" type="integer"/><parameter name="B" type="array"/></parameters><description>Returns an array <mini>C</mini> where each <mini>Cᵥ := A bitwise or Bᵥ</mini>.
</description><examples><code>let A := array([[1, 2], [3, 4]])</code><result>&lt;&lt;1 2&gt; &lt;3 4&gt;&gt;</result><code>2 \/ A</code><result>&lt;&lt;3 2&gt; &lt;3 6&gt;&gt;</result></examples></method><method category="array" name="^" variadic="false"><return type="array"/><parameters><parameter name="List" type="list"/></parameters><description>Returns an array with the contents of <mini>List</mini>,  transposed.
</description><examples/></method><method category="array" name="^" variadic="false"><return type="array"/><parameters><parameter name="Slice" type="slice"/></parameters><description>Returns an array with the contents of <mini>Slice</mini>,  transposed.
</description><examples/></method><method category="array" name="^" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="array::complex"/><parameter name="Arg₂" type="complex"/></parameters><description/><examples/></method><method category="array" name="^" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="array::real"/><parameter name="Arg₂" type="real"/></parameters><description/><examples/></method><method category="array" name="^" variadic="false"><return type="array"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the transpose of <mini>Array</mini>,  sharing the underlying data.
</description><examples><code>let A := array([[1, 2, 3], [4, 5, 6]])</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>^A</code><result>&lt;&lt;1 4&gt; &lt;2 5&gt; &lt;3 6&gt;&gt;</result></examples></method><constructor name="array"><return/><parameters><parameter name="List" type="list"/></parameters><description>Returns a new array containing the values in <mini>List</mini>.
The shape and type of the array is determined from the elements in <mini>List</mini>.
</description><examples/></constructor><type name="array::any"><parents><parent type="array"/></parents><description/><examples/></type><constructor name="array::any"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of any values with the specified dimensions.
</description><examples/></constructor><function name="array::cat"><return/><parameters><parameter name="Index" type="integer"/><parameter name="Array₁..." type="any"/></parameters><description>Returns a new array with the values of <mini>Array₁,  ...,  Arrayₙ</mini> concatenated along the <mini>Index</mini>-th dimension.
</description><examples><code>let A := $[[1, 2, 3], [4, 5, 6]]</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := $[[7, 8, 9], [10, 11, 12]]</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>array::cat(1, A, B)</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt; &lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>array::cat(2, A, B)</code><result>&lt;&lt;1 2 3 7 8 9&gt; &lt;4 5 6 10 11 12&gt;&gt;</result></examples></function><type name="array::complex32"><parents><parent type="array::complex"/></parents><description/><examples/></type><constructor name="array::complex32"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of complex32 values with the specified dimensions.
</description><examples/></constructor><type name="array::complex64"><parents><parent type="array::complex"/></parents><description/><examples/></type><constructor name="array::complex64"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of complex64 values with the specified dimensions.
</description><examples/></constructor><type name="array::float32"><parents><parent type="array::real"/></parents><description/><examples/></type><constructor name="array::float32"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of float32 values with the specified dimensions.
</description><examples/></constructor><type name="array::float64"><parents><parent type="array::real"/></parents><description/><examples/></type><constructor name="array::float64"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of float64 values with the specified dimensions.
</description><examples/></constructor><function name="array::hcat"><return/><parameters><parameter name="Array₁..." type="array"/></parameters><description>Returns a new array with the values of <mini>Array₁,  ...,  Arrayₙ</mini> concatenated along the last dimension.
</description><examples><code>let A := $[[1, 2, 3], [4, 5, 6]]</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := $[[7, 8, 9], [10, 11, 12]]</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>array::hcat(A, B)</code><result>&lt;&lt;1 2 3 7 8 9&gt; &lt;4 5 6 10 11 12&gt;&gt;</result></examples></function><type name="array::int16"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::int16"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of int16 values with the specified dimensions.
</description><examples/></constructor><type name="array::int32"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::int32"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of int32 values with the specified dimensions.
</description><examples/></constructor><type name="array::int64"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::int64"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of int64 values with the specified dimensions.
</description><examples/></constructor><type name="array::int8"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::int8"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of int8 values with the specified dimensions.
</description><examples/></constructor><type name="array::mutable::any"><parents><parent type="array::any"/><parent type="array::mutable"/></parents><description>An array of any values.

<mini>(A: array::mutable::any) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::any) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::complex32"><parents><parent type="array::complex32"/><parent type="array::mutable::complex"/></parents><description>An array of complex32 values.

<mini>(A: array::mutable::complex32) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::complex32) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::complex64"><parents><parent type="array::complex64"/><parent type="array::mutable::complex"/></parents><description>An array of complex64 values.

<mini>(A: array::mutable::complex64) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::complex64) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::float32"><parents><parent type="array::float32"/><parent type="array::mutable::real"/></parents><description>An array of float32 values.

<mini>(A: array::mutable::float32) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::float32) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::float64"><parents><parent type="array::float64"/><parent type="array::mutable::real"/></parents><description>An array of float64 values.

<mini>(A: array::mutable::float64) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::float64) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::int16"><parents><parent type="array::int16"/><parent type="array::mutable::integer"/></parents><description>An array of int16 values.

<mini>(A: array::mutable::int16) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::int16) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::int32"><parents><parent type="array::int32"/><parent type="array::mutable::integer"/></parents><description>An array of int32 values.

<mini>(A: array::mutable::int32) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::int32) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::int64"><parents><parent type="array::int64"/><parent type="array::mutable::integer"/></parents><description>An array of int64 values.

<mini>(A: array::mutable::int64) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::int64) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::int8"><parents><parent type="array::int8"/><parent type="array::mutable::integer"/></parents><description>An array of int8 values.

<mini>(A: array::mutable::int8) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::int8) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::uint16"><parents><parent type="array::uint16"/><parent type="array::mutable::integer"/></parents><description>An array of uint16 values.

<mini>(A: array::mutable::uint16) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::uint16) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::uint32"><parents><parent type="array::uint32"/><parent type="array::mutable::integer"/></parents><description>An array of uint32 values.

<mini>(A: array::mutable::uint32) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::uint32) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::uint64"><parents><parent type="array::uint64"/><parent type="array::mutable::integer"/></parents><description>An array of uint64 values.

<mini>(A: array::mutable::uint64) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::uint64) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><type name="array::mutable::uint8"><parents><parent type="array::uint8"/><parent type="array::mutable::integer"/></parents><description>An array of uint8 values.

<mini>(A: array::mutable::uint8) := (B: number)</mini>
   Sets the values in <mini>A</mini> to <mini>B</mini>.
<mini>(A: array::mutable::uint8) := (B: array | list)</mini>
   Sets the values in <mini>A</mini> to those in <mini>B</mini>,  broadcasting as necessary. The shape of <mini>B</mini> must match the last dimensions of <mini>A</mini>.
</description><examples/></type><function name="array::new"><return/><parameters><parameter name="Arg₁" type="type"/><parameter name="Arg₂" type="list"/></parameters><description/><examples/></function><type name="array::uint16"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::uint16"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of uint16 values with the specified dimensions.
</description><examples/></constructor><type name="array::uint32"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::uint32"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of uint32 values with the specified dimensions.
</description><examples/></constructor><type name="array::uint64"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::uint64"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of uint64 values with the specified dimensions.
</description><examples/></constructor><type name="array::uint8"><parents><parent type="array::integer"/></parents><description/><examples/></type><constructor name="array::uint8"><return/><parameters><parameter name="Sizes" type="list[integer]"/></parameters><description> Returns a new array of uint8 values with the specified dimensions.
</description><examples/></constructor><function name="array::vcat"><return/><parameters><parameter name="Array₁..." type="array"/></parameters><description>Returns a new array with the values of <mini>Array₁,  ...,  Arrayₙ</mini> concatenated along the first dimension.
</description><examples><code>let A := $[[1, 2, 3], [4, 5, 6]]</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt;&gt;</result><code>let B := $[[7, 8, 9], [10, 11, 12]]</code><result>&lt;&lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result><code>array::vcat(A, B)</code><result>&lt;&lt;1 2 3&gt; &lt;4 5 6&gt; &lt;7 8 9&gt; &lt;10 11 12&gt;&gt;</result></examples></function><function name="array::wrap"><return/><parameters><parameter name="Type" type="type"/><parameter name="Buffer" type="address"/><parameter name="Sizes" type="list"/><parameter name="Strides" type="list"/></parameters><description>Returns an array pointing to the contents of <mini>Address</mini> with the corresponding sizes and strides.
</description><examples><code>let B := buffer(16)</code><result>&lt;16:00000000000000000000000000000000&gt;</result><code>array::wrap(array::uint16, B, [2, 2, 2], [8, 4, 2])</code><result>&lt;&lt;&lt;0 0&gt; &lt;0 0&gt;&gt; &lt;&lt;0 0&gt; &lt;0 0&gt;&gt;&gt;</result></examples></function><type name="matrix::any"><parents><parent type="matrix"/><parent type="array::any"/></parents><description/><examples/></type><type name="matrix::complex32"><parents><parent type="matrix::complex"/><parent type="array::complex32"/></parents><description/><examples/></type><type name="matrix::complex64"><parents><parent type="matrix::complex"/><parent type="array::complex64"/></parents><description/><examples/></type><type name="matrix::float32"><parents><parent type="matrix::real"/><parent type="array::float32"/></parents><description/><examples/></type><type name="matrix::float64"><parents><parent type="matrix::real"/><parent type="array::float64"/></parents><description/><examples/></type><type name="matrix::int16"><parents><parent type="matrix::integer"/><parent type="array::int16"/></parents><description/><examples/></type><type name="matrix::int32"><parents><parent type="matrix::integer"/><parent type="array::int32"/></parents><description/><examples/></type><type name="matrix::int64"><parents><parent type="matrix::integer"/><parent type="array::int64"/></parents><description/><examples/></type><type name="matrix::int8"><parents><parent type="matrix::integer"/><parent type="array::int8"/></parents><description/><examples/></type><type name="matrix::mutable::any"><parents><parent type="matrix::any"/><parent type="matrix::mutable"/><parent type="array::mutable::any"/></parents><description>A matrix of any values.
</description><examples/></type><type name="matrix::mutable::complex32"><parents><parent type="matrix::complex32"/><parent type="matrix::mutable::complex"/><parent type="array::mutable::complex32"/></parents><description>A matrix of complex32 values.
</description><examples/></type><type name="matrix::mutable::complex64"><parents><parent type="matrix::complex64"/><parent type="matrix::mutable::complex"/><parent type="array::mutable::complex64"/></parents><description>A matrix of complex64 values.
</description><examples/></type><type name="matrix::mutable::float32"><parents><parent type="matrix::float32"/><parent type="matrix::mutable::real"/><parent type="array::mutable::float32"/></parents><description>A matrix of float32 values.
</description><examples/></type><type name="matrix::mutable::float64"><parents><parent type="matrix::float64"/><parent type="matrix::mutable::real"/><parent type="array::mutable::float64"/></parents><description>A matrix of float64 values.
</description><examples/></type><type name="matrix::mutable::int16"><parents><parent type="matrix::int16"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::int16"/></parents><description>A matrix of int16 values.
</description><examples/></type><type name="matrix::mutable::int32"><parents><parent type="matrix::int32"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::int32"/></parents><description>A matrix of int32 values.
</description><examples/></type><type name="matrix::mutable::int64"><parents><parent type="matrix::int64"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::int64"/></parents><description>A matrix of int64 values.
</description><examples/></type><type name="matrix::mutable::int8"><parents><parent type="matrix::int8"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::int8"/></parents><description>A matrix of int8 values.
</description><examples/></type><type name="matrix::mutable::uint16"><parents><parent type="matrix::uint16"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::uint16"/></parents><description>A matrix of uint16 values.
</description><examples/></type><type name="matrix::mutable::uint32"><parents><parent type="matrix::uint32"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::uint32"/></parents><description>A matrix of uint32 values.
</description><examples/></type><type name="matrix::mutable::uint64"><parents><parent type="matrix::uint64"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::uint64"/></parents><description>A matrix of uint64 values.
</description><examples/></type><type name="matrix::mutable::uint8"><parents><parent type="matrix::uint8"/><parent type="matrix::mutable::integer"/><parent type="array::mutable::uint8"/></parents><description>A matrix of uint8 values.
</description><examples/></type><type name="matrix::uint16"><parents><parent type="matrix::integer"/><parent type="array::uint16"/></parents><description/><examples/></type><type name="matrix::uint32"><parents><parent type="matrix::integer"/><parent type="array::uint32"/></parents><description/><examples/></type><type name="matrix::uint64"><parents><parent type="matrix::integer"/><parent type="array::uint64"/></parents><description/><examples/></type><type name="matrix::uint8"><parents><parent type="matrix::integer"/><parent type="array::uint8"/></parents><description/><examples/></type><method category="array" name="permutation" variadic="true"><return type=""/><parameters><parameter name="Arg₁" type="integer"/></parameters><description/><examples/></method><method category="array" name="permutation" variadic="false"><return type=""/><parameters><parameter name="Arg₁" type="list"/></parameters><description/><examples/></method><type name="vector::any"><parents><parent type="vector"/><parent type="array::any"/></parents><description/><examples/></type><type name="vector::complex32"><parents><parent type="vector::complex"/><parent type="array::complex32"/></parents><description/><examples/></type><type name="vector::complex64"><parents><parent type="vector::complex"/><parent type="array::complex64"/></parents><description/><examples/></type><type name="vector::float32"><parents><parent type="vector::real"/><parent type="array::float32"/></parents><description/><examples/></type><type name="vector::float64"><parents><parent type="vector::real"/><parent type="array::float64"/></parents><description/><examples/></type><type name="vector::int16"><parents><parent type="vector::integer"/><parent type="array::int16"/></parents><description/><examples/></type><type name="vector::int32"><parents><parent type="vector::integer"/><parent type="array::int32"/></parents><description/><examples/></type><type name="vector::int64"><parents><parent type="vector::integer"/><parent type="array::int64"/></parents><description/><examples/></type><type name="vector::int8"><parents><parent type="vector::integer"/><parent type="array::int8"/></parents><description/><examples/></type><type name="vector::mutable::any"><parents><parent type="vector::any"/><parent type="vector::mutable"/><parent type="array::mutable::any"/></parents><description>A vector of any values.
</description><examples/></type><type name="vector::mutable::complex32"><parents><parent type="vector::complex32"/><parent type="vector::mutable::complex"/><parent type="array::mutable::complex32"/></parents><description>A vector of complex32 values.
</description><examples/></type><type name="vector::mutable::complex64"><parents><parent type="vector::complex64"/><parent type="vector::mutable::complex"/><parent type="array::mutable::complex64"/></parents><description>A vector of complex64 values.
</description><examples/></type><type name="vector::mutable::float32"><parents><parent type="vector::float32"/><parent type="vector::mutable::real"/><parent type="array::mutable::float32"/></parents><description>A vector of float32 values.
</description><examples/></type><type name="vector::mutable::float64"><parents><parent type="vector::float64"/><parent type="vector::mutable::real"/><parent type="array::mutable::float64"/></parents><description>A vector of float64 values.
</description><examples/></type><type name="vector::mutable::int16"><parents><parent type="vector::int16"/><parent type="vector::mutable::integer"/><parent type="array::mutable::int16"/></parents><description>A vector of int16 values.
</description><examples/></type><type name="vector::mutable::int32"><parents><parent type="vector::int32"/><parent type="vector::mutable::integer"/><parent type="array::mutable::int32"/></parents><description>A vector of int32 values.
</description><examples/></type><type name="vector::mutable::int64"><parents><parent type="vector::int64"/><parent type="vector::mutable::integer"/><parent type="array::mutable::int64"/></parents><description>A vector of int64 values.
</description><examples/></type><type name="vector::mutable::int8"><parents><parent type="vector::int8"/><parent type="vector::mutable::integer"/><parent type="array::mutable::int8"/></parents><description>A vector of int8 values.
</description><examples/></type><type name="vector::mutable::uint16"><parents><parent type="vector::uint16"/><parent type="vector::mutable::integer"/><parent type="array::mutable::uint16"/></parents><description>A vector of uint16 values.
</description><examples/></type><type name="vector::mutable::uint32"><parents><parent type="vector::uint32"/><parent type="vector::mutable::integer"/><parent type="array::mutable::uint32"/></parents><description>A vector of uint32 values.
</description><examples/></type><type name="vector::mutable::uint64"><parents><parent type="vector::uint64"/><parent type="vector::mutable::integer"/><parent type="array::mutable::uint64"/></parents><description>A vector of uint64 values.
</description><examples/></type><type name="vector::mutable::uint8"><parents><parent type="vector::uint8"/><parent type="vector::mutable::integer"/><parent type="array::mutable::uint8"/></parents><description>A vector of uint8 values.
</description><examples/></type><type name="vector::uint16"><parents><parent type="vector::integer"/><parent type="array::uint16"/></parents><description/><examples/></type><type name="vector::uint32"><parents><parent type="vector::integer"/><parent type="array::uint32"/></parents><description/><examples/></type><type name="vector::uint64"><parents><parent type="vector::integer"/><parent type="array::uint64"/></parents><description/><examples/></type><type name="vector::uint8"><parents><parent type="vector::integer"/><parent type="array::uint8"/></parents><description/><examples/></type><method category="array" name="||" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/></parameters><description>Returns the norm of the values in <mini>Array</mini>.
</description><examples/></method><method category="array" name="||" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/><parameter name="Arg₂" type="real"/><parameter name="Arg₃" type="integer"/></parameters><description>Returns the norm of the values in <mini>Array</mini>.
</description><examples/></method><method category="array" name="||" variadic="false"><return type="number"/><parameters><parameter name="Array" type="array"/><parameter name="Arg₂" type="real"/></parameters><description>Returns the norm of the values in <mini>Array</mini>.
</description><examples/></method></category><category name="minilang"><function name="clock"><return/><parameters/><description/><examples/></function><function name="halt"><return/><parameters><parameter name="Code?" type="integer"/></parameters><description>Causes the current process to exit with optional exit code <mini>Code</mini> or <mini>0</mini> if omitted.
</description><examples/></function><function name="locale"><return/><parameters/><description/><examples/></function><function name="mlconsole"><return/><parameters><parameter name="Arg₁" type="integer"/></parameters><description/><examples/></function><function name="now"><return/><parameters/><description/><examples/></function><function name="print"><return/><parameters><parameter name="Values..." type="any"/></parameters><description>Prints <mini>Values</mini> to standard output,  converting to strings if necessary.
</description><examples/></function></category></root>