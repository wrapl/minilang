<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="ml__types_8h" kind="file" language="C++">
    <compoundname>ml_types.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="stringmap_8h" local="yes">stringmap.h</includes>
    <includes refid="inthash_8h" local="yes">inthash.h</includes>
    <includes local="yes">ml_config.h</includes>
    <includedby refid="ml__bytecode_8h" local="yes">src/ml_bytecode.h</includedby>
    <includedby refid="ml__coroutine_8h" local="yes">src/ml_coroutine.h</includedby>
    <includedby refid="ml__object_8h" local="yes">src/ml_object.h</includedby>
    <includedby refid="ml__polynomial_8h" local="yes">src/ml_polynomial.h</includedby>
    <includedby refid="ml__pqueue_8h" local="yes">src/ml_pqueue.h</includedby>
    <includedby refid="ml__runtime_8h" local="yes">src/ml_runtime.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_types.h</label>
        <link refid="ml__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="10">
        <label>ml_config.h</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="9">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>src/minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/ml_array.h</label>
        <link refid="ml__array_8h_source"/>
      </node>
      <node id="13">
        <label>src/ml_ast.h</label>
        <link refid="ml__ast_8h_source"/>
      </node>
      <node id="14">
        <label>src/ml_base16.h</label>
        <link refid="ml__base16_8h_source"/>
      </node>
      <node id="15">
        <label>src/ml_base64.h</label>
        <link refid="ml__base64_8h_source"/>
      </node>
      <node id="2">
        <label>src/ml_bytecode.h</label>
        <link refid="ml__bytecode_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/ml_bytecode_jit.h</label>
        <link refid="ml__bytecode__jit_8h_source"/>
      </node>
      <node id="16">
        <label>src/ml_cbor.h</label>
        <link refid="ml__cbor_8h_source"/>
      </node>
      <node id="10">
        <label>src/ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/ml_compiler2.h</label>
        <link refid="ml__compiler2_8h_source"/>
      </node>
      <node id="17">
        <label>src/ml_console.h</label>
        <link refid="ml__console_8h_source"/>
      </node>
      <node id="5">
        <label>src/ml_coroutine.h</label>
        <link refid="ml__coroutine_8h_source"/>
      </node>
      <node id="36">
        <label>src/ml_debugger.h</label>
        <link refid="ml__debugger_8h_source"/>
      </node>
      <node id="18">
        <label>src/ml_file.h</label>
        <link refid="ml__file_8h_source"/>
      </node>
      <node id="19">
        <label>src/ml_json.h</label>
        <link refid="ml__json_8h_source"/>
      </node>
      <node id="20">
        <label>src/ml_library.h</label>
        <link refid="ml__library_8h_source"/>
      </node>
      <node id="21">
        <label>src/ml_logging.h</label>
        <link refid="ml__logging_8h_source"/>
      </node>
      <node id="22">
        <label>src/ml_math.h</label>
        <link refid="ml__math_8h_source"/>
      </node>
      <node id="23">
        <label>src/ml_method.h</label>
        <link refid="ml__method_8h_source"/>
      </node>
      <node id="24">
        <label>src/ml_minijs.h</label>
        <link refid="ml__minijs_8h_source"/>
      </node>
      <node id="25">
        <label>src/ml_mmap.h</label>
        <link refid="ml__mmap_8h_source"/>
      </node>
      <node id="26">
        <label>src/ml_module.h</label>
        <link refid="ml__module_8h_source"/>
      </node>
      <node id="6">
        <label>src/ml_object.h</label>
        <link refid="ml__object_8h_source"/>
      </node>
      <node id="7">
        <label>src/ml_polynomial.h</label>
        <link refid="ml__polynomial_8h_source"/>
      </node>
      <node id="8">
        <label>src/ml_pqueue.h</label>
        <link refid="ml__pqueue_8h_source"/>
      </node>
      <node id="9">
        <label>src/ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/ml_socket.h</label>
        <link refid="ml__socket_8h_source"/>
      </node>
      <node id="28">
        <label>src/ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
      </node>
      <node id="29">
        <label>src/ml_struct.h</label>
        <link refid="ml__struct_8h_source"/>
      </node>
      <node id="30">
        <label>src/ml_table.h</label>
        <link refid="ml__table_8h_source"/>
      </node>
      <node id="31">
        <label>src/ml_thread.h</label>
        <link refid="ml__thread_8h_source"/>
      </node>
      <node id="32">
        <label>src/ml_time.h</label>
        <link refid="ml__time_8h_source"/>
      </node>
      <node id="1">
        <label>src/ml_types.h</label>
        <link refid="ml__types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/ml_uuid.h</label>
        <link refid="ml__uuid_8h_source"/>
      </node>
      <node id="34">
        <label>src/ml_xe.h</label>
        <link refid="ml__xe_8h_source"/>
      </node>
      <node id="35">
        <label>src/ml_xml.h</label>
        <link refid="ml__xml_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structml__value__t" prot="public">ml_value_t</innerclass>
    <innerclass refid="structml__hash__chain__t" prot="public">ml_hash_chain_t</innerclass>
    <innerclass refid="structml__type__t" prot="public">ml_type_t</innerclass>
    <innerclass refid="structml__visitor__t" prot="public">ml_visitor_t</innerclass>
    <innerclass refid="structml__cfunction__t" prot="public">ml_cfunction_t</innerclass>
    <innerclass refid="structml__cfunctionx__t" prot="public">ml_cfunctionx_t</innerclass>
    <innerclass refid="structml__tuple__t" prot="public">ml_tuple_t</innerclass>
    <innerclass refid="structml__boolean__t" prot="public">ml_boolean_t</innerclass>
    <innerclass refid="structml__integer__t" prot="public">ml_integer_t</innerclass>
    <innerclass refid="structml__double__t" prot="public">ml_double_t</innerclass>
    <innerclass refid="structml__integer__range__t" prot="public">ml_integer_range_t</innerclass>
    <innerclass refid="structml__integer__interval__t" prot="public">ml_integer_interval_t</innerclass>
    <innerclass refid="structml__real__range__t" prot="public">ml_real_range_t</innerclass>
    <innerclass refid="structml__real__interval__t" prot="public">ml_real_interval_t</innerclass>
    <innerclass refid="structml__address__t" prot="public">ml_address_t</innerclass>
    <innerclass refid="structml__string__t" prot="public">ml_string_t</innerclass>
    <innerclass refid="structml__stringbuffer__t" prot="public">ml_stringbuffer_t</innerclass>
    <innerclass refid="structml__stringbuffer__node__t" prot="public">ml_stringbuffer_node_t</innerclass>
    <innerclass refid="structml__list__node__t" prot="public">ml_list_node_t</innerclass>
    <innerclass refid="structml__list__t" prot="public">ml_list_t</innerclass>
    <innerclass refid="structml__list__iter__t" prot="public">ml_list_iter_t</innerclass>
    <innerclass refid="structml__slice__node__t" prot="public">ml_slice_node_t</innerclass>
    <innerclass refid="structml__slice__t" prot="public">ml_slice_t</innerclass>
    <innerclass refid="structml__method__t" prot="public">ml_method_t</innerclass>
    <innerclass refid="structml__method__cached__t" prot="public">ml_method_cached_t</innerclass>
    <innerclass refid="structml__map__t" prot="public">ml_map_t</innerclass>
    <innerclass refid="structml__map__node__t" prot="public">ml_map_node_t</innerclass>
    <innerclass refid="structml__map__iter__t" prot="public">ml_map_iter_t</innerclass>
    <innerclass refid="structml__set__t" prot="public">ml_set_t</innerclass>
    <innerclass refid="structml__set__node__t" prot="public">ml_set_node_t</innerclass>
    <innerclass refid="structml__set__iter__t" prot="public">ml_set_iter_t</innerclass>
    <innerclass refid="structml__module__t" prot="public">ml_module_t</innerclass>
    <innerclass refid="structml__external__t" prot="public">ml_external_t</innerclass>
    <innerclass refid="structml__externals__t" prot="public">ml_externals_t</innerclass>
    <innerclass refid="structml__symbol__t" prot="public">ml_symbol_t</innerclass>
    <innerclass refid="structml__symbol__interval__t" prot="public">ml_symbol_interval_t</innerclass>
    <sectiondef kind="define">
      <member refid="group__types_1ga4a95025b22fbe37ef6fbf37cf178537f" kind="define"><name>_CONCAT2</name></member>
      <member refid="group__types_1ga54e717c978bb45793c9d9da1318d719e" kind="define"><name>CONCAT2</name></member>
      <member refid="group__types_1gaf4ddcba2ce2eb54447a204777b24e54c" kind="define"><name>_CONCAT3</name></member>
      <member refid="group__types_1ga0a22adb9a059331081a444d782b9077d" kind="define"><name>CONCAT3</name></member>
      <member refid="group__types_1ga6e8bfd47376c6a653bec91700414e17d" kind="define"><name>ml_assert</name></member>
      <member refid="group__types_1ga90d2c51a76437d34f4004318cb009986" kind="define"><name>ML_DEF</name></member>
      <member refid="group__types_1ga4ccdba772ecdd93c21b6d97b9ead714a" kind="define"><name>ml_default_deref</name></member>
      <member refid="group__types_1gab64b848f9428fef3a54d93e4e6098178" kind="define"><name>ML_TYPE_INIT</name></member>
      <member refid="group__types_1ga7c3a226569a6b694556e01f6f06a5c4a" kind="define"><name>ML_TYPE</name></member>
      <member refid="group__types_1ga3b1bcf398893e1b2fc9981c38f21b3fe" kind="define"><name>ML_INTERFACE</name></member>
      <member refid="group__types_1ga19b44827df257d2928687b7f86c0c690" kind="define"><name>ML_UNION_TYPE</name></member>
      <member refid="group__types_1gaf4659355e52d7e390bf2360aea55b4f9" kind="define"><name>ML_TYPE_ARG</name></member>
      <member refid="group__types_1gabad2017408bda59ab086d6b9d8aa0cec" kind="define"><name>ml_call</name></member>
      <member refid="group__types_1ga7f5c4b4fdfb4825d792e90553037b89f" kind="define"><name>ml_inline</name></member>
      <member refid="group__types_1gaedb1571262b2e313f971e2bf2885add0" kind="define"><name>ml_assign</name></member>
      <member refid="group__types_1ga9e46f16ce185d739762cce5157bc171c" kind="define"><name>ML_TYPED_FN</name></member>
      <member refid="group__types_1ga3654d4d6a9b36c8546dde1e2851599c1" kind="define"><name>ML_VALUE</name></member>
      <member refid="group__functions_1ga64bb1f6d0bbbcb9bea03819669d1604e" kind="define"><name>ML_CFUNCTION</name></member>
      <member refid="group__functions_1ga227b5050bc72d20694108268021a2ad7" kind="define"><name>ML_CFUNCTIONX</name></member>
      <member refid="group__functions_1gaa80dcf7e00158747ebd2f65ac926e560" kind="define"><name>ML_CFUNCTIONZ</name></member>
      <member refid="group__functions_1ga235d8aeff01b3c172aa1c81027e7077e" kind="define"><name>ML_FUNCTION2</name></member>
      <member refid="group__functions_1ga366326b7a43a64ffd54ccc0d7ef1ac84" kind="define"><name>ML_FUNCTION</name></member>
      <member refid="group__functions_1ga946e20842178f2a60afd3795b31852e7" kind="define"><name>ML_FUNCTIONX2</name></member>
      <member refid="group__functions_1ga11cfbf18216218691b5b11b903637fe7" kind="define"><name>ML_FUNCTIONX</name></member>
      <member refid="group__functions_1ga74b53f7d868573993a1ed3638d242413" kind="define"><name>ML_FUNCTIONZ2</name></member>
      <member refid="group__functions_1gadc70b5844bca6ec7333df752bdfb03cc" kind="define"><name>ML_FUNCTIONZ</name></member>
      <member refid="group__functions_1ga74c32c04849a0ff149c3d98991af068c" kind="define"><name>ML_CHECK_ARG_TYPE</name></member>
      <member refid="group__functions_1ga50ddfec988528d83059fe61515af315e" kind="define"><name>ML_CHECK_ARG_COUNT</name></member>
      <member refid="group__functions_1ga4dd6a2e5bd173dc26541be623c24b315" kind="define"><name>ML_CHECKX_ARG_TYPE</name></member>
      <member refid="group__functions_1gaf190c16bb03f1d1ebb8ad401ecfb62dd" kind="define"><name>ML_CHECKX_ARG_COUNT</name></member>
      <member refid="group__functions_1ga2f678ebb79879b1de29563b9be033433" kind="define"><name>ML_CONTINUE</name></member>
      <member refid="group__functions_1ga072501492fac8511b802686bfe2ab31b" kind="define"><name>ML_RETURN</name></member>
      <member refid="group__functions_1gabf98d973af18ea2e26ac3f4c9ea309d7" kind="define"><name>ML_ERROR</name></member>
      <member refid="group__strings_1ga1ee5a3d2b7a860ec2ff5be5c90849a73" kind="define"><name>ml_string_value</name></member>
      <member refid="group__strings_1ga815174c5b483deb85db51849f6399d99" kind="define"><name>ml_string_length</name></member>
      <member refid="group__strings_1ga00ffbc023fa5e4b7f0955e9c8186fc0d" kind="define"><name>ml_cstring</name></member>
      <member refid="group__strings_1gab7a772c5189b33ab35eff7bf199dbdd3" kind="define"><name>ML_STRINGBUFFER_NODE_SIZE</name></member>
      <member refid="group__strings_1ga836f4e39a0896b08f52b09d228282169" kind="define"><name>ML_STRINGBUFFER_INIT</name></member>
      <member refid="group__strings_1ga9956634c48adfbe33e862922c620ba78" kind="define"><name>ml_stringbuffer_add</name></member>
      <member refid="group__strings_1ga10c7c2c1419b703f57a5eb354e354934" kind="define"><name>ml_stringbuffer_addf</name></member>
      <member refid="group__strings_1ga98c0b1fa775d4f960022c068793f947b" kind="define"><name>ml_stringbuffer_string</name></member>
      <member refid="group__strings_1ga39aa150c5ceab6aa8e605e7284a86038" kind="define"><name>ml_stringbuffer_uncollectable</name></member>
      <member refid="group__strings_1gadcd922ef6446903744563cb0fb0baec7" kind="define"><name>ml_stringbuffer_value</name></member>
      <member refid="group__lists_1gab5aff1e40936cafd7d8732c9d75f2852" kind="define"><name>ml_list_append</name></member>
      <member refid="group__lists_1ga1789c9ac0f3d673b6a0f5798913d1e80" kind="define"><name>ML_LIST_FOREACH</name></member>
      <member refid="group__lists_1ga4e28a43d7fae21259fdb7ff92b1dfd57" kind="define"><name>ML_LIST_REVERSE</name></member>
      <member refid="group__slices_1ga73740fa93215fe850c454a4787850b01" kind="define"><name>ML_SLICE_FOREACH</name></member>
      <member refid="group__methods_1gaebec330325aff5cbc7d9c9248e2cae4a" kind="define"><name>ML_CATEGORY</name></member>
      <member refid="group__methods_1ga272af7e1f8cd6268a34791a598cf78e7" kind="define"><name>ML_METHOD</name></member>
      <member refid="group__methods_1ga4f204e431d9b7659aee5b331d1b48862" kind="define"><name>ML_METHODX</name></member>
      <member refid="group__methods_1ga0d37680ab8c57d883a4e0ecf54d4a9d4" kind="define"><name>ML_METHODZ</name></member>
      <member refid="group__methods_1ga4c0b4818638499747eeb9e22180fec5e" kind="define"><name>ML_METHODV</name></member>
      <member refid="group__methods_1gabd8f582650b75cb49f7a6361bf7f36c5" kind="define"><name>ML_METHODVX</name></member>
      <member refid="group__methods_1gadf8e7985d62855ef3943f5e5b89dc8e0" kind="define"><name>ML_METHODVZ</name></member>
      <member refid="group__methods_1gad14894651f7447fb91025fcbe4f6ecd4" kind="define"><name>ML_METHOD_DECL</name></member>
      <member refid="group__methods_1gaf0b55a478dd42162aad655cf717e1c1f" kind="define"><name>ML_METHOD_ANON</name></member>
      <member refid="group__maps_1gad669c82af39f0527c1bcbf7c767e0708" kind="define"><name>ML_MAP_FOREACH</name></member>
      <member refid="group__names_1gaecb24121cccbdafb7b0c11694fbc1fac" kind="define"><name>ml_names_length</name></member>
      <member refid="group__names_1gaf9e68a97ed911530e76a3eb562a01d0b" kind="define"><name>ML_NAMES_CHECK_ARG_COUNT</name></member>
      <member refid="group__names_1ga37dc66bd2e5157f6d5801bb4705ad9d8" kind="define"><name>ML_NAMES_CHECKX_ARG_COUNT</name></member>
      <member refid="group__names_1ga1a287bc72e9a9d425b1261d1a8ac5e32" kind="define"><name>ML_NAMES_FOREACH</name></member>
      <member refid="group__sets_1gad25128a10cd47e15c3e9dc798a04b70c" kind="define"><name>ML_SET_FOREACH</name></member>
      <member refid="group__externals_1gaaf7f818d142260cb6609be112d48e874" kind="define"><name>ML_DESERIALIZER</name></member>
      <member refid="group__symbols_1gac0d196c2db80f2c9104e0e36946fd94c" kind="define"><name>ml_symbol_name</name></member>
      <member refid="group__symbols_1ga147785770a3d8d8f93e266dd57acee36" kind="define"><name>ml_symbol_interval_first</name></member>
      <member refid="group__symbols_1ga6006cd404d12e02ed29d82c1bf33272c" kind="define"><name>ml_symbol_interval_last</name></member>
    </sectiondef>
    <sectiondef kind="enum">
      <member refid="group__maps_1gad5edeaa21792576b6bc1ba21c2c9277d" kind="enum"><name>ml_map_order_t</name></member>
      <member refid="group__sets_1gaa2cac66264dd0aa81c32904fb861e0f0" kind="enum"><name>ml_set_order_t</name></member>
    </sectiondef>
    <sectiondef kind="typedef">
      <member refid="group__types_1ga5d1583b78bcbb3d035efb58c8bcad3ab" kind="typedef"><name>ml_value_t</name></member>
      <member refid="group__types_1ga40cf6ed168df77908c4fa9bba520dd2c" kind="typedef"><name>ml_type_t</name></member>
      <member refid="group__types_1gaf26157b9157d19066e5ae19261b326a4" kind="typedef"><name>ml_context_t</name></member>
      <member refid="group__types_1ga7777bd8a981afee40937ca9239e7d704" kind="typedef"><name>ml_state_t</name></member>
      <member refid="group__types_1gaca01dd5a349a1f5dd407ca5c6a70b464" kind="typedef"><name>ml_hash_chain_t</name></member>
      <member refid="group__types_1ga651fda8538b12f020b2706f4ccd40e5c" kind="typedef"><name>ml_callback_t</name></member>
      <member refid="group__types_1ga286aad2e8327fdef73ac931056a37f1a" kind="typedef"><name>ml_callbackx_t</name></member>
      <member refid="group__types_1ga65b08a51fa17b372c28f8cd1f91ffac2" kind="typedef"><name>ml_value_find_fn</name></member>
      <member refid="group__functions_1ga9424921faaafd3d4e804c5804a2efab4" kind="typedef"><name>ml_cfunction_t</name></member>
      <member refid="group__functions_1gae875c856b22e3a3b05016e380af6a93e" kind="typedef"><name>ml_cfunctionx_t</name></member>
      <member refid="group__tuples_1ga44cd4a6d85015feb41ac4ae9763b4ca5" kind="typedef"><name>ml_tuple_t</name></member>
      <member refid="group__booleans_1gaefe0dadf345114067b00eda0bd1ef00e" kind="typedef"><name>ml_boolean_t</name></member>
      <member refid="group__strings_1gaf100447b111e59544a8d0a6e2a85fd3f" kind="typedef"><name>ml_address_t</name></member>
      <member refid="group__strings_1ga30f9e713738c7c2a9b49763ef2e33cdc" kind="typedef"><name>ml_string_t</name></member>
      <member refid="group__strings_1ga7d9b1da6a98050a08f867ede682b4441" kind="typedef"><name>ml_stringbuffer_t</name></member>
      <member refid="group__strings_1ga1a9b60322d8f2bf52768fbe87110931d" kind="typedef"><name>ml_stringbuffer_node_t</name></member>
      <member refid="group__lists_1ga4100af90ceaf1b5e5bcc4bf7e63828fa" kind="typedef"><name>ml_list_node_t</name></member>
      <member refid="group__lists_1ga8b8cfa7b6a6227ed5388e75a98859f74" kind="typedef"><name>ml_list_t</name></member>
      <member refid="group__methods_1ga8b6c7254a59c415e36424ece80842f85" kind="typedef"><name>ml_method_t</name></member>
      <member refid="group__methods_1ga9cb4ebe1bd82710fe1bd5ad7964e38e9" kind="typedef"><name>ml_methods_t</name></member>
      <member refid="group__methods_1ga820c5d189e5712125a3a86afbf0dca68" kind="typedef"><name>ml_method_cached_t</name></member>
      <member refid="group__maps_1gab1bdab18a8280a04446b899dab935c4b" kind="typedef"><name>ml_map_t</name></member>
      <member refid="group__maps_1gaf1bbe9ee8fb9f988ef74ff14514e8251" kind="typedef"><name>ml_map_node_t</name></member>
      <member refid="group__sets_1gae44b147b7a48e620195df83903664efe" kind="typedef"><name>ml_set_t</name></member>
      <member refid="group__sets_1ga94845e632ee33a05c4fec12f90158403" kind="typedef"><name>ml_set_node_t</name></member>
      <member refid="group__externals_1gaa4df5de379f9d031b34c9aedc2cb1ec5" kind="typedef"><name>ml_externals_t</name></member>
      <member refid="group__externals_1ga27f584e8ed7e733ba66f1ae6c6a7c6bb" kind="typedef"><name>ml_deserializer_t</name></member>
    </sectiondef>
    <sectiondef kind="var">
      <member refid="group__types_1ga1091fbf759435c923427fba49fabf0c8" kind="variable"><name>MLTypeT</name></member>
      <member refid="group__types_1gafe7810b83a1f5446f8f840a9ad1d5ef2" kind="variable"><name>MLTypeUnionT</name></member>
      <member refid="group__types_1ga7eb5f2c70513bb79171d959d80580bee" kind="variable"><name>MLVisitorT</name></member>
      <member refid="group__types_1gaa0f60d6668b279bce47b6a1b2e8914d7" kind="variable"><name>MLAnyT</name></member>
      <member refid="group__types_1ga1d5a519e47ea7fd8b1854b65d6e52a95" kind="variable"><name>MLNilT</name></member>
      <member refid="group__types_1ga2ec9e3439a8563694f540efeaf7cfc42" kind="variable"><name>MLSomeT</name></member>
      <member refid="group__types_1ga81b319b58d74b56b0176f20b6971ef59" kind="variable"><name>MLBlankT</name></member>
      <member refid="group__types_1ga0e7d069faa2ca5029a887b1e2f04882c" kind="variable"><name>MLNil</name></member>
      <member refid="group__types_1ga5a784a1b3d28fbb020c6226b027f93d8" kind="variable"><name>MLSome</name></member>
      <member refid="group__types_1ga1199320700d4b5af70337365b34d32c6" kind="variable"><name>MLBlank</name></member>
      <member refid="group__iterators_1gadfa686e2b22ff3de8efd996b22ebe109" kind="variable"><name>MLSequenceT</name></member>
      <member refid="group__functions_1ga15d6b7916ced3aab313248fed81c9695" kind="variable"><name>MLFunctionT</name></member>
      <member refid="group__functions_1ga187cadc2de67390b8bd8696956cc4f29" kind="variable"><name>MLCFunctionT</name></member>
      <member refid="group__functions_1gad0ee7eaae9915af04f83c4e148ec1988" kind="variable"><name>MLCFunctionXT</name></member>
      <member refid="group__functions_1ga5c079c2a6513e7195ce27c3e919208b2" kind="variable"><name>MLCFunctionZT</name></member>
      <member refid="group__functions_1ga1d077e9825cc62009cab8b7e370b8d29" kind="variable"><name>MLCallCC</name></member>
      <member refid="group__functions_1gade0d764588e29192db86750e06ce0a36" kind="variable"><name>MLMarkCC</name></member>
      <member refid="group__functions_1gaf0455189014d9e906bdb2c506aa9b7c9" kind="variable"><name>MLCallDC</name></member>
      <member refid="group__functions_1ga5dd4db17549f9692a6fe17df079ced10" kind="variable"><name>MLSwapCC</name></member>
      <member refid="group__functions_1ga97bff54161bb0f06529470eddf5206f3" kind="variable"><name>MLContextKeyT</name></member>
      <member refid="group__functions_1gabb8f52b07c29d2a46068f2af4cc3ede3" kind="variable"><name>MLContextKey</name></member>
      <member refid="group__tuples_1ga61289eb0573f6351ea7416a268c97aec" kind="variable"><name>MLTupleT</name></member>
      <member refid="group__booleans_1ga42098a64bc6c6c63f8e80c1338124a58" kind="variable"><name>MLBooleanT</name></member>
      <member refid="group__booleans_1ga030042dbfb5c710e445ddd1d836c2ee0" kind="variable"><name>MLTrue</name></member>
      <member refid="group__booleans_1gac87a475b780a3409eb8fe3d2104329ef" kind="variable"><name>MLFalse</name></member>
      <member refid="group__numbers_1ga71e8d0ffd0f61b431b81786176d1daef" kind="variable"><name>MLNumberT</name></member>
      <member refid="group__numbers_1ga792f15e358253d7114d702cd1142efc2" kind="variable"><name>MLRealT</name></member>
      <member refid="group__numbers_1ga7f36d3290d9943138ec1effb4cb4eb49" kind="variable"><name>MLIntegerT</name></member>
      <member refid="group__numbers_1ga033fb58a59ea7899d14702914c86ebf5" kind="variable"><name>MLDoubleT</name></member>
      <member refid="group__numbers_1ga29e6655325017198ddb547b0b77596cf" kind="variable"><name>MLIntegerRangeT</name></member>
      <member refid="group__numbers_1gaca7fa7ee81f270f09369a33323aa465d" kind="variable"><name>MLIntegerIntervalT</name></member>
      <member refid="group__numbers_1ga4375c307ffeb47f4fbd0099b21838ad5" kind="variable"><name>MLRealRangeT</name></member>
      <member refid="group__numbers_1ga60567984e82fce3c83d3a5bfc81fe7c3" kind="variable"><name>MLRealIntervalT</name></member>
      <member refid="group__strings_1ga7ac4a867adf2e7577ea5c461ba115710" kind="variable"><name>MLAddressT</name></member>
      <member refid="group__strings_1ga5f3415f26ed67ee2456de64886bfe9ae" kind="variable"><name>MLBufferT</name></member>
      <member refid="group__strings_1ga3e9d8b4e0367d7899e3cf3812f39d3f2" kind="variable"><name>MLStringT</name></member>
      <member refid="group__strings_1gaf4ce606a5976bcbb41b451750bd530fa" kind="variable"><name>MLRegexT</name></member>
      <member refid="group__strings_1ga4ff94a55fc6e37c8a8084c88224c8838" kind="variable"><name>MLStringBufferT</name></member>
      <member refid="group__lists_1ga9f2ae09d61ca4a50043f754671d75dac" kind="variable"><name>MLListT</name></member>
      <member refid="group__slices_1ga4354fe24c95ac91712ccde8ab036734d" kind="variable"><name>MLSliceT</name></member>
      <member refid="group__methods_1ga156dd7b19b454f8ce3dce93bb30cddbc" kind="variable"><name>MLMethodDefine</name></member>
      <member refid="group__methods_1ga65beab28734e99107675e8f68e8f97af" kind="variable"><name>MLMethodDefault</name></member>
      <member refid="group__methods_1ga8107ad8b261da2afa16428f5b9f69ff3" kind="variable"><name>MLMethodT</name></member>
      <member refid="group__maps_1ga1fdef6f852d601d660162aaeaf523b41" kind="variable"><name>MLMapT</name></member>
      <member refid="group__maps_1gac4a5cab7b8a976776a5af7f3bec489c5" kind="variable"><name>MLMapTemplateT</name></member>
      <member refid="group__names_1gab822cd09cc98aea6b5d7a1a176e67e88" kind="variable"><name>MLNamesT</name></member>
      <member refid="group__sets_1gacb01e14b7512cc6feb92c9e0ec72b1de" kind="variable"><name>MLSetT</name></member>
      <member refid="group__modules_1ga7b17bc09f170e0b7ec6194931ee90ccf" kind="variable"><name>MLModuleT</name></member>
      <member refid="group__modules_1ga40c8e39a70f2eb8fc1bb7fc62c8fff21" kind="variable"><name>sentinel</name></member>
      <member refid="group__externals_1gaf30a8f7e6e6daffc68c2cbe2f7d4963f" kind="variable"><name>MLExternalT</name></member>
      <member refid="group__externals_1gacf1fce9ad8267b45c03259f33f2b8678" kind="variable"><name>MLExternalSetT</name></member>
      <member refid="group__externals_1gacb691b8ab8295533b6548e21857794df" kind="variable"><name>MLExternals</name></member>
      <member refid="group__symbols_1ga659caeec6bd9c25d72a141e7b4e82ea2" kind="variable"><name>MLSymbolT</name></member>
      <member refid="group__symbols_1ga3bc4dea944bb5e056dae16efc973f76f" kind="variable"><name>MLSymbolIntervalT</name></member>
    </sectiondef>
    <sectiondef kind="func">
      <member refid="group__types_1ga093661bf7854acd034da312aaa49f89f" kind="function"><name>ml_default_hash</name></member>
      <member refid="group__types_1ga0bac995f5964d44bfc29ff12420a2ec6" kind="function"><name>ml_default_call</name></member>
      <member refid="group__types_1gab3fd2ef5130d68c040bd72d322bc21e7" kind="function"><name>ml_value_hash</name></member>
      <member refid="group__types_1ga73bf3edecce945aeb176908e1964ba0b" kind="function"><name>ml_default_assign</name></member>
      <member refid="group__types_1gacfe7c1e1fdbe42a6efcc012624860e34" kind="function"><name>ml_type_hash</name></member>
      <member refid="group__types_1ga98eaed4815f6143a34777b5a61f11588" kind="function"><name>ml_type_call</name></member>
      <member refid="group__types_1gaf447eee515bb03533aa7d65b1b4fd379" kind="function"><name>ml_type_init</name></member>
      <member refid="group__types_1gaeca7d2568ebec62d0b16da0b097031fd" kind="function"><name>ml_type</name></member>
      <member refid="group__types_1gafb0a9a93d11052f18df791a72f1deeb2" kind="function"><name>ml_type_name</name></member>
      <member refid="group__types_1ga8c748aae794a8370aa9be9d69e938333" kind="function"><name>ml_type_add_parent</name></member>
      <member refid="group__types_1ga4aef6aa8c06c2d2a78c6ba4281a19778" kind="function"><name>ml_union_type</name></member>
      <member refid="group__types_1gaf7611032ed61297d0a0125c510dc7116" kind="function"><name>ml_type_add_rule</name></member>
      <member refid="group__types_1ga31dcf4e36e428a9bdb3f24aa4125d622" kind="function"><name>ml_is_subtype</name></member>
      <member refid="group__types_1ga32fff35fe6deaa7e50c9865f3ea0bc8a" kind="function"><name>ml_type_max</name></member>
      <member refid="group__types_1gaf6122bf865bcb36a39bc84af16d2f2fa" kind="function"><name>ml_typeof</name></member>
      <member refid="group__types_1ga33a98fd43f27d80564146dcdad09ca35" kind="function"><name>ml_deref</name></member>
      <member refid="group__types_1ga0c41a0ba85daa12de59e8306e4d68ad6" kind="function"><name>ml_typeof_deref</name></member>
      <member refid="group__types_1ga25a23b0074c466c759ee3988068b4d78" kind="function"><name>ml_is</name></member>
      <member refid="group__types_1gaa58ad31c484662813dc95ef0410ebb90" kind="function"><name>ml_hash_chain</name></member>
      <member refid="group__types_1gafb4546b63a830ae505c51c66e3734a4f" kind="function"><name>ml_hash</name></member>
      <member refid="group__types_1ga7e2f917c975783372ba1f6aec5dabfb4" kind="function"><name>ml_typed_fn_get</name></member>
      <member refid="group__types_1ga17afe233e5fbfafbabe7de73fc448794" kind="function"><name>ml_typed_fn_set</name></member>
      <member refid="group__types_1gacf7fee9f8e7e1c4d7564eb22e66f9530" kind="function"><name>ml_value_set_name</name></member>
      <member refid="group__types_1ga8cb204adc3a8e2d5dd02afb6a3b48f98" kind="function"><name>ml_value_find_all</name></member>
      <member refid="group__types_1ga3f176cd90c96418ab1c256d8bb380f64" kind="function"><name>ml_value_is_constant</name></member>
      <member refid="group__iterators_1gad04a6e6975ecb220982d335f4d2d9ce9" kind="function"><name>ml_count</name></member>
      <member refid="group__iterators_1gae73f12ecd8e7e2808051e632a4a4be06" kind="function"><name>ml_iterate</name></member>
      <member refid="group__iterators_1gac43acf7cb1f818d158117bde4fd04970" kind="function"><name>ml_iter_value</name></member>
      <member refid="group__iterators_1gac5128aa4a2c0a4ceba680d70e99e9ec9" kind="function"><name>ml_iter_key</name></member>
      <member refid="group__iterators_1gad17892853f1c491d8f8f0d1efbeab631" kind="function"><name>ml_iter_next</name></member>
      <member refid="group__iterators_1ga4e71d6bf465f811e1ef83213f65876cf" kind="function"><name>ml_chained</name></member>
      <member refid="group__iterators_1gae8980ea2a51e8e7d9ae571fe08184bdb" kind="function"><name>ml_chainedv</name></member>
      <member refid="group__iterators_1gaec234bd1761198d4c52eaab8bdfddced" kind="function"><name>ml_doubled</name></member>
      <member refid="group__functions_1gaaa4156156c384aba904c797a03b7be8d" kind="function"><name>ml_function_source</name></member>
      <member refid="group__functions_1ga9c81efd40288423d1e8acae51bd8c1f4" kind="function"><name>ml_cfunction</name></member>
      <member refid="group__functions_1ga85482330069324ad9b5acc161e3a739b" kind="function"><name>ml_cfunctionx</name></member>
      <member refid="group__functions_1ga4c606af9bcd4be9134ba830494070b30" kind="function"><name>ml_cfunctionz</name></member>
      <member refid="group__functions_1ga63d434a5689d1e2cfa7171d767fb1983" kind="function"><name>ml_cfunction2</name></member>
      <member refid="group__functions_1ga045f52290e1962be7119ae333be25d34" kind="function"><name>ml_cfunctionx2</name></member>
      <member refid="group__functions_1ga0c74dca7163bb08568caf976ee5144c1" kind="function"><name>ml_cfunctionz2</name></member>
      <member refid="group__functions_1ga5a30ce9a92200e9d3e18ae5a5a192cf9" kind="function"><name>ml_return_nil</name></member>
      <member refid="group__functions_1gaef83dd25fbabc95164ac704ad4244e1f" kind="function"><name>ml_identity</name></member>
      <member refid="group__functions_1gabde60a890103e06ee3d8fab4a6df0a96" kind="function"><name>ml_partial_function</name></member>
      <member refid="group__functions_1ga97c922f87fe3993eca394ae1e0266447" kind="function"><name>ml_partial_function_set</name></member>
      <member refid="group__functions_1ga4f62c589ff1fd70d4cf009522b18ae06" kind="function"><name>ml_value_function</name></member>
      <member refid="group__tuples_1ga209a3bfec0d894ed059651524985c069" kind="function"><name>ml_tuple</name></member>
      <member refid="group__tuples_1ga1dbdb643371c3558c232163c9f6183f3" kind="function"><name>ml_tuplen</name></member>
      <member refid="group__tuples_1ga422faa08aff54a45d1562430ce98ed40" kind="function"><name>ml_tuplev</name></member>
      <member refid="group__tuples_1gae55920fd8911b4b2c766d4e43c390d28" kind="function"><name>ml_tuple_size</name></member>
      <member refid="group__tuples_1gab195fb9081c1633279af01cc619ab22e" kind="function"><name>ml_tuple_get</name></member>
      <member refid="group__tuples_1ga68bd0d9d52370c174da63a9153d8c50a" kind="function"><name>ml_tuple_set</name></member>
      <member refid="group__tuples_1ga8f3d07715072ebb78a856e5cbb68348f" kind="function"><name>ml_unpack</name></member>
      <member refid="group__booleans_1gaf2917c1df458f0cf9475a531af368362" kind="function"><name>ml_boolean</name></member>
      <member refid="group__booleans_1gae68130990e046a964dcb7ad9d61c78fd" kind="function"><name>ml_boolean_value</name></member>
      <member refid="group__numbers_1ga68c91b4ebde9c4b9d7616645db7c6ae5" kind="function"><name>ml_integer_value</name></member>
      <member refid="group__numbers_1ga02e9388c3bc336c73af0627434e7b853" kind="function"><name>ml_real_value</name></member>
      <member refid="group__numbers_1gafe9f7db7c45798d2347843ca905e99c5" kind="function"><name>ml_integer</name></member>
      <member refid="group__numbers_1gad14069fd889acb05e0511873cf98c484" kind="function"><name>ml_real</name></member>
      <member refid="group__numbers_1gacbf417155859dac0636077db335a130c" kind="function"><name>ml_integer_value_fast</name></member>
      <member refid="group__numbers_1ga8a391b659bb4df532d7cd113a6c75fda" kind="function"><name>ml_double_value_fast</name></member>
      <member refid="group__numbers_1ga26fdf346e2362e83f1999ad3af9aa007" kind="function"><name>ml_real_range_count</name></member>
      <member refid="group__numbers_1ga7e74177cc7e9a1682d5e7839b1e6347f" kind="function"><name>ml_real_interval_count</name></member>
      <member refid="group__strings_1ga786e2f2bc4133f0ab328b47f53a04a5f" kind="function"><name>GC_vasprintf</name></member>
      <member refid="group__strings_1ga5e678d2c7b8a423641ecab495ad672d7" kind="function"><name>GC_asprintf</name></member>
      <member refid="group__strings_1ga1cb3bd85bbcbaa372192a9bf18ee0e3f" kind="function"><name>ml_address</name></member>
      <member refid="group__strings_1gafa7fa7b08008b5d9b62a3617ba54c65b" kind="function"><name>ml_address_value</name></member>
      <member refid="group__strings_1gac46806f0b7c6747861cc15fd883e87b0" kind="function"><name>ml_address_length</name></member>
      <member refid="group__strings_1gaf93b9bd18a174bf4bac0149552179a5c" kind="function"><name>ml_buffer</name></member>
      <member refid="group__strings_1gaaddd0ff7078b0f1c4e35041865b982e4" kind="function"><name>ml_buffer_value</name></member>
      <member refid="group__strings_1gad30be565c10094190786beeea7a2e0f0" kind="function"><name>ml_buffer_length</name></member>
      <member refid="group__strings_1ga54b4fdb7f890f70891d399204856977a" kind="function"><name>ml_string</name></member>
      <member refid="group__strings_1ga2909df5489b91145f91143ed323680d9" kind="function"><name>ml_string_checked</name></member>
      <member refid="group__strings_1gaf172d89c2bbba1a56223df0d5bdd2c47" kind="function"><name>ml_string_unchecked</name></member>
      <member refid="group__strings_1ga77b8d59293a7046704492c8d5c5b56c1" kind="function"><name>ml_string_copy</name></member>
      <member refid="group__strings_1ga3d992fd41e41546701b305ec0c2cf626" kind="function"><name>ml_string_format</name></member>
      <member refid="group__strings_1ga61a342e0e00ff6922ec7271838e067bd" kind="function"><name>format</name></member>
      <member refid="group__strings_1ga6a9d482555097293399f5c9bc30806af" kind="function"><name>ml_regex</name></member>
      <member refid="group__strings_1gaa383bf26cf453db6f3cdc5a2a542c131" kind="function"><name>ml_regexi</name></member>
      <member refid="group__strings_1ga164105119905996003a097f8864a333d" kind="function"><name>ml_regex_pattern</name></member>
      <member refid="group__strings_1ga3d67945bae6d7411d5ef1e0b82371407" kind="function"><name>ml_regex_match</name></member>
      <member refid="group__strings_1ga9eaad83d27d77c00d4c3f0b2ae1fbdd3" kind="function"><name>ml_stringbuffer</name></member>
      <member refid="group__strings_1ga895958502be6d350fdb5e2463953b94d" kind="function"><name>ml_stringbuffer_length</name></member>
      <member refid="group__strings_1ga32ac71924bcbc14387fe015970e812a6" kind="function"><name>ml_stringbuffer_writer</name></member>
      <member refid="group__strings_1ga3b910f14c86d7fdb18f3cf774475094d" kind="function"><name>ml_stringbuffer_printf</name></member>
      <member refid="group__strings_1ga5461b2ddeff7e73aec9e57f9938763df" kind="function"><name>ml_stringbuffer_last</name></member>
      <member refid="group__strings_1ga3d289fad4e03330ff3f938ef9a544953" kind="function"><name>ml_stringbuffer_append</name></member>
      <member refid="group__strings_1gad6f6e5740e09fc100237cd7fbe1bdfac" kind="function"><name>ml_stringbuffer_clear</name></member>
      <member refid="group__strings_1gaeba59fc8a8f7fd91120e49161a823ef3" kind="function"><name>ml_stringbuffer_put_actual</name></member>
      <member refid="group__strings_1gafcef2e64b71dbd44defa8f8f254c6c07" kind="function"><name>ml_stringbuffer_put</name></member>
      <member refid="group__strings_1ga6d6e21d0d3591a97edd65c0c77bcf851" kind="function"><name>ml_stringbuffer_write_actual</name></member>
      <member refid="group__strings_1ga049b8ad5df446b3fc76a1d082a2dee3e" kind="function"><name>ml_stringbuffer_write</name></member>
      <member refid="group__strings_1gaef9c2804dcfb1400cdc6c518acb98dd4" kind="function"><name>ml_stringbuffer_put32</name></member>
      <member refid="group__strings_1ga7f8281b09ed06b5c88db0b178eb2967b" kind="function"><name>ml_stringbuffer_simple_append</name></member>
      <member refid="group__strings_1ga43340f5bb19474b6e841313078519c8f" kind="function"><name>ml_stringbuffer_get_string</name></member>
      <member refid="group__strings_1gac641653a059a4d860d3842eb6c606a37" kind="function"><name>ml_stringbuffer_get_uncollectable</name></member>
      <member refid="group__strings_1ga0ea3054d60ebbce31cf972edb293ef24" kind="function"><name>ml_stringbuffer_get_value</name></member>
      <member refid="group__strings_1gac1607695132a335945a3c54788f75c8b" kind="function"><name>ml_stringbuffer_to_address</name></member>
      <member refid="group__strings_1gad6f77ca5620470988e7b0a0cf65293f8" kind="function"><name>ml_stringbuffer_to_buffer</name></member>
      <member refid="group__strings_1gacd6c670b7e369e84fbf78601b3ff2dc6" kind="function"><name>ml_stringbuffer_to_string</name></member>
      <member refid="group__strings_1gabd3d3a7609b71a887b846ce5cda07777" kind="function"><name>ml_stringbuffer_reader</name></member>
      <member refid="group__strings_1ga8fa09a9f2e2f27846322376c158c4e9e" kind="function"><name>ml_stringbuffer_drain</name></member>
      <member refid="group__lists_1gaa7281437346e7b6cbb53df8fd5e0ae0a" kind="function"><name>ml_list</name></member>
      <member refid="group__lists_1ga9c76087e48f2ee66dc365f92cef44395" kind="function"><name>ml_list_grow</name></member>
      <member refid="group__lists_1gaff078de42a6e7f2e0841d68a2aab991a" kind="function"><name>ml_list_push</name></member>
      <member refid="group__lists_1ga9e76fd358ea71d6bf84e89c40201f83d" kind="function"><name>ml_list_put</name></member>
      <member refid="group__lists_1ga8847ec6327f4a2c69d9f15f7f3d64b6a" kind="function"><name>ml_list_pop</name></member>
      <member refid="group__lists_1gab8a03d77d35844f34aba6649a8ceaf0f" kind="function"><name>ml_list_pull</name></member>
      <member refid="group__lists_1ga7b20fd0a98399a45fb4cb8d9a7ae2c52" kind="function"><name>ml_list_get</name></member>
      <member refid="group__lists_1gaf4b69b44050e06ab6812964aa056ed91" kind="function"><name>ml_list_set</name></member>
      <member refid="group__lists_1gaf204499ee3d6bfa22fc03391268ab209" kind="function"><name>ml_list_to_array</name></member>
      <member refid="group__lists_1ga35e8472a3620c74e9aa5dfe90d4cff29" kind="function"><name>ml_list_foreach</name></member>
      <member refid="group__lists_1gab5b867780f261027b36341c8c4239c37" kind="function"><name>ml_list_length</name></member>
      <member refid="group__lists_1ga23782e82f4b3622fda806dad0ac8e96a" kind="function"><name>ml_list_iter_forward</name></member>
      <member refid="group__lists_1ga54ec589cc743666f2aaf32e0f2c45686" kind="function"><name>ml_list_iter_next</name></member>
      <member refid="group__lists_1gabc2d8a5e3d29971e7c5cfe554699cdf2" kind="function"><name>ml_list_iter_backward</name></member>
      <member refid="group__lists_1ga33d25b87282ab468a44ad321478e6759" kind="function"><name>ml_list_iter_prev</name></member>
      <member refid="group__lists_1gac73e993951191ef83ee46a8617d9c949" kind="function"><name>ml_list_iter_valid</name></member>
      <member refid="group__lists_1ga180daa9ffd89687a9aaea09ff6eb64d3" kind="function"><name>ml_list_iter_update</name></member>
      <member refid="group__slices_1ga745059c951100e5f7921fd47f6e5bf13" kind="function"><name>ml_slice</name></member>
      <member refid="group__slices_1gae84c0ce798ef0bb3490d26dadd66dad1" kind="function"><name>ml_slice_grow</name></member>
      <member refid="group__slices_1ga787205110e0f761867251c282876b396" kind="function"><name>ml_slice_put</name></member>
      <member refid="group__slices_1ga846d3888dcd3d7017821eb8c2334993f" kind="function"><name>ml_slice_push</name></member>
      <member refid="group__slices_1gaff0676d5591f27deff5c4e78fc87c0f1" kind="function"><name>ml_slice_pop</name></member>
      <member refid="group__slices_1gae52448269042036bccfbe3fe15e49f39" kind="function"><name>ml_slice_pull</name></member>
      <member refid="group__slices_1ga9e957adf679d5ed373ffb333023242bb" kind="function"><name>ml_slice_get</name></member>
      <member refid="group__slices_1ga8158375ba2087ffaaeb3d666ef89bbf0" kind="function"><name>ml_slice_set</name></member>
      <member refid="group__slices_1ga91092264abf8f4383d51d2b2a13c5a8a" kind="function"><name>ml_slice_head</name></member>
      <member refid="group__slices_1ga78119aee60a73cd77971c8a6f9b431ed" kind="function"><name>ml_slice_length</name></member>
      <member refid="group__methods_1ga24a660ca09a2087ddcbca0f87f855272" kind="function"><name>ml_method</name></member>
      <member refid="group__methods_1gab1ff7f81d0396b2123a50db19370edbd" kind="function"><name>ml_method_anon</name></member>
      <member refid="group__methods_1ga19f325e8e1304f08be11e3609f0e8019" kind="function"><name>ml_method_name</name></member>
      <member refid="group__methods_1ga7993cead32f8dc82c0f45126da33139d" kind="function"><name>ml_method_by_name</name></member>
      <member refid="group__methods_1ga4f75a1ae7a10ad6b9915123cb149eaa4" kind="function"><name>ml_method_by_value</name></member>
      <member refid="group__methods_1ga5283c9c135b1f0f630c0bdc9f14ba50d" kind="function"><name>ml_methodx_by_name</name></member>
      <member refid="group__methods_1ga023ab25dad2f59ad18b6335b6490ea09" kind="function"><name>ml_methodx_by_value</name></member>
      <member refid="group__methods_1ga97c748378d2d0beddd1257339e9c9e1a" kind="function"><name>ml_method_define</name></member>
      <member refid="group__methods_1gac14ba6a54132392a062940c5869b60e2" kind="function"><name>ml_method_definev</name></member>
      <member refid="group__methods_1gaf62b9fef1c9ea9cff9bdc4311e791523" kind="function"><name>ml_method_insert</name></member>
      <member refid="group__methods_1ga4749f3a2ba36e4fb969cc36e9663241e" kind="function"><name>ml_method_search</name></member>
      <member refid="group__methods_1ga96179f90b5f275e78c26660bc7d66b7c" kind="function"><name>ml_method_wrap</name></member>
      <member refid="group__methods_1ga0fc75673f96ebaf344f82a82ceb54c1a" kind="function"><name>ml_method_search_cached</name></member>
      <member refid="group__methods_1gac937fb4182678394b7e81c509eb2cba2" kind="function"><name>ml_method_check_cached</name></member>
      <member refid="group__methods_1ga95135eb838866e7e3623d2a00ee64067" kind="function"><name>ml_no_method_error</name></member>
      <member refid="group__methods_1gae187218fb2bf92e53a38147b004566e2" kind="function"><name>ml_type_constructor</name></member>
      <member refid="group__methods_1gabc6275f4b80281f55c49139cb8195235" kind="function"><name>ml_nop</name></member>
      <member refid="group__methods_1ga4720570cf52d415113f148571dc0c592" kind="function"><name>ml_methods_prevent_changes</name></member>
      <member refid="group__methods_1gab2d202d7abdf90638c17cdfd6cb9effd" kind="function"><name>ml_methods_context</name></member>
      <member refid="group__maps_1ga488973bb4835adb4f74272a570a9c683" kind="function"><name>ml_map</name></member>
      <member refid="group__maps_1ga6637e5809f7eb214b0ccacf1c1ff72fa" kind="function"><name>ml_map_search</name></member>
      <member refid="group__maps_1gae8459a95da82a24ea789b1e5c3759f50" kind="function"><name>ml_map_search0</name></member>
      <member refid="group__maps_1ga656bdbfb05bde620eba9e9b931f1364b" kind="function"><name>ml_map_slot</name></member>
      <member refid="group__maps_1gac36caa284934fbb1722ef6df50f3f572" kind="function"><name>ml_map_insert</name></member>
      <member refid="group__maps_1ga89438b672d525d7dcd309d855b0d1464" kind="function"><name>ml_map_delete</name></member>
      <member refid="group__maps_1ga339f66b30b960ba1ddb3c313c17fb5c3" kind="function"><name>ml_map_size</name></member>
      <member refid="group__maps_1ga731d31bdecddcb6dd540dfd1b1c5c952" kind="function"><name>ml_map_foreach</name></member>
      <member refid="group__maps_1ga768a2c795ad3145b0246c7a34841dae9" kind="function"><name>ml_map_iter_forward</name></member>
      <member refid="group__maps_1gad026aec1e3184ae76072dad526243cb1" kind="function"><name>ml_map_iter_next</name></member>
      <member refid="group__maps_1gab1c3602c547a8c04e361b0259b94ae64" kind="function"><name>ml_map_iter_backward</name></member>
      <member refid="group__maps_1gad924a5336fa8dceff4a67c4a45c33bdd" kind="function"><name>ml_map_iter_prev</name></member>
      <member refid="group__maps_1gabf76a64b19a7d304980f7d163d68406a" kind="function"><name>ml_map_iter_valid</name></member>
      <member refid="group__maps_1ga4b6945b578a7bc43b4db19a1860a9a03" kind="function"><name>ml_map_iter_update</name></member>
      <member refid="group__names_1ga7d99e731e1c61f6fe4f26f1dd6d559a1" kind="function"><name>ml_names</name></member>
      <member refid="group__names_1ga5e126a6d8e278926855cca8f1830a6e5" kind="function"><name>ml_names_add</name></member>
      <member refid="group__sets_1ga448a03019cba8b9038bb1b189a0a738e" kind="function"><name>ml_set</name></member>
      <member refid="group__sets_1ga7698977f9597e949d91ad8c7afd8eb00" kind="function"><name>ml_set_search</name></member>
      <member refid="group__sets_1gaad9dd2813915306925713868f6e9ab60" kind="function"><name>ml_set_search0</name></member>
      <member refid="group__sets_1gab8a57deef5878c04c374ecf125ff350b" kind="function"><name>ml_set_slot</name></member>
      <member refid="group__sets_1gae21564f0f998c4155d340f63ac7cf8f7" kind="function"><name>ml_set_insert</name></member>
      <member refid="group__sets_1gafb96b11863eee5a551d6e5978110149c" kind="function"><name>ml_set_delete</name></member>
      <member refid="group__sets_1gac1ee42484d69f9d544bfc8135e6d2875" kind="function"><name>ml_set_size</name></member>
      <member refid="group__sets_1ga2fd49557e044cd50a80f0e39937decb7" kind="function"><name>ml_set_foreach</name></member>
      <member refid="group__sets_1ga9b2711513c8c5b1b16d81b2b1bcda636" kind="function"><name>ml_set_iter_forward</name></member>
      <member refid="group__sets_1ga0fdbfa30aa90577cebd9608c92e27e81" kind="function"><name>ml_set_iter_next</name></member>
      <member refid="group__sets_1ga504624918163b5b6c7ef8fdc9db14b08" kind="function"><name>ml_set_iter_backward</name></member>
      <member refid="group__sets_1ga0e9972988a1237e0fbbc9050ff71ccc2" kind="function"><name>ml_set_iter_prev</name></member>
      <member refid="group__sets_1ga47f97e5b63cf20ae78cbc2063bd9f8e4" kind="function"><name>ml_set_iter_valid</name></member>
      <member refid="group__modules_1ga0bd2e3bd45556bdec0237bee5b0bca87" kind="function"><name>ml_module</name></member>
      <member refid="group__modules_1ga796eb10d4e962bc49be3d495e898ec13" kind="function"><name>ml_module_path</name></member>
      <member refid="group__modules_1ga9a9edc767a2be7b1571227b4d40f4b6a" kind="function"><name>ml_module_import</name></member>
      <member refid="group__modules_1ga33b4b8ad2b74e2a0c54d78ffe11d82c7" kind="function"><name>ml_module_export</name></member>
      <member refid="group__externals_1gaf266e5b323fbb09411814763d3b01e91" kind="function"><name>ml_external</name></member>
      <member refid="group__externals_1ga380b46a551115456d5964f87854170f5" kind="function"><name>ml_externals_get_name</name></member>
      <member refid="group__externals_1gafbbd21d0403b4ff590e5ebf1696a42dd" kind="function"><name>ml_externals_get_value</name></member>
      <member refid="group__externals_1ga0f673d48564801f5bf41926ceb9d7d1c" kind="function"><name>ml_externals_add</name></member>
      <member refid="group__externals_1ga78e180c2c39aaff40016215e9020402b" kind="function"><name>ml_externals_default_add</name></member>
      <member refid="group__externals_1ga06ebdfbc1846b43caef6d3d8ee970f7c" kind="function"><name>ml_serialize</name></member>
      <member refid="group__externals_1ga57aecb5be286c7a71b4b7fb7e355fd15" kind="function"><name>ml_deserializer_define</name></member>
      <member refid="group__externals_1ga532d8b47261157966ec0f0f45db97af3" kind="function"><name>ml_deserialize</name></member>
      <member refid="group__symbols_1gaf40c21abe6f857df644d104ec5417f90" kind="function"><name>ml_symbol</name></member>
      <member refid="group__init_1ga2b26ef655ee57ffc1302d73a3f32eb51" kind="function"><name>ml_types_init</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ML_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inthash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CONCAT2(X,<sp/>Y)<sp/>X<sp/>##<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONCAT2(X,<sp/>Y)<sp/>_CONCAT2(X,<sp/>Y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CONCAT3(X,<sp/>Y,<sp/>Z)<sp/>X<sp/>##<sp/>Y<sp/>##<sp/>_<sp/>##<sp/>Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONCAT3(X,<sp/>Y,<sp/>Z)<sp/>_CONCAT3(X,<sp/>Y,<sp/>Z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_assert(CONDITION)<sp/>{<sp/>if<sp/>(!(CONDITION))<sp/>asm(&quot;int3&quot;);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_assert(CONDITION)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Values<sp/>and<sp/>Types<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structml__value__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_DEF(NAME)<sp/>ml_value_t<sp/>*NAME<sp/>=<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structml__hash__chain__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Previous;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_generic_rule_t<sp/>ml_generic_rule_t;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structml__type__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>(*hash)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*call)(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>int,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*deref)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*assign)(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_rule_t<sp/>*Rules;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Parents[1];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>TypedFns[1];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Exports[1];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank:30;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Interface:1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NoInherit:1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLTypeT[];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_default_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Frame,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_value_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//ml_value_t<sp/>*ml_default_deref(ml_value_t<sp/>*Ref);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_default_deref<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Ref,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_type_hash(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPE_INIT(CONSTRUCTOR,<sp/>PARENTS,<sp/>NAME,<sp/>...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Type<sp/>=<sp/>MLTypeT,<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Name<sp/>=<sp/>NAME,<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>ml_default_hash,<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>ml_default_call,<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>ml_default_deref,<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>ml_default_assign,<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>CONSTRUCTOR,<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.TypedFns<sp/>=<sp/>{INTHASH_INIT},<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Exports<sp/>=<sp/>{STRINGMAP_INIT},<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Rank<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Interface<sp/>=<sp/>0,<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPE(TYPE,<sp/>PARENTS,<sp/>NAME,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor">static<sp/>ml_method_t<sp/>CONCAT2(TYPE,<sp/>Of)[1]<sp/>=<sp/>{{MLMethodT,<sp/>NAME<sp/>&quot;::of&quot;}};<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor">ml_type_t<sp/>TYPE[1]<sp/>=<sp/>{ML_TYPE_INIT((ml_value_t<sp/>*)CONCAT2(TYPE,<sp/>Of),<sp/>PARENTS,<sp/>NAME,<sp/>__VA_ARGS__)}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNWRAP(ARGS...)<sp/>,<sp/>##ARGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPE(TYPE,<sp/>PARENTS,<sp/>NAME,<sp/>...)<sp/>INIT_CODE<sp/>ml_type_init(TYPE<sp/>UNWRAP<sp/>PARENTS,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_INTERFACE(TYPE,<sp/>PARENTS,<sp/>NAME,<sp/>...)<sp/>ML_TYPE(TYPE,<sp/>PARENTS,<sp/>NAME,<sp/>.Rank<sp/>=<sp/>1,<sp/>.Interface<sp/>=<sp/>1,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_init(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_type(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">static<sp/>inline<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_type_name(const<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value-&gt;Name;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_add_parent(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLTypeUnionT[];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_union_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumTypes,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_UNION_TYPE(TYPE,<sp/>...)<sp/>ml_value_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_UNION_TYPE(TYPE,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor">INIT_CODE<sp/>TYPE<sp/>=<sp/>(ml_value_t<sp/>*)ml_union_type(PP_NARG(__VA_ARGS__),<sp/>(ml_type_t<sp/>*[]){__VA_ARGS__})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_generic_type_t<sp/>ml_generic_type_t;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_generic_type_t<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*NextGeneric;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLTypeGenericT[];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_generic_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args[]);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_generic_type_num_args(TYPE)<sp/>((ml_generic_type_t<sp/>*)TYPE)-&gt;NumArgs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_generic_type_args(TYPE)<sp/>((ml_generic_type_t<sp/>*)TYPE)-&gt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_find_generic_parent(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*T,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERIC_TYPE(TYPE,<sp/>PARENT,<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERIC_TYPE(TYPE,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor">INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_generic_type(PP_NARG(__VA_ARGS__),<sp/>(ml_type_t<sp/>*[]){__VA_ARGS__})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_add_rule(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPE_ARG(N)<sp/>((N<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is_subtype(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_type_max(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="structml__visitor__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn,<sp/>*Error;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Cache[1];</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}<sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVisitorT[];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLInteger32T[];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLInteger64T[];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLDoubleT[];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_RATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRational48T[];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">__attribute__<sp/>((pure))<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_tag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)Value<sp/>&gt;&gt;<sp/>48;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_deref(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ml_tag(Value);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(Tag<sp/>==<sp/>0,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*Deref)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)<sp/>=<sp/>Value-&gt;Type-&gt;deref;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(Deref<sp/>!=<sp/>ml_default_deref,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Deref(Value);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">__attribute__<sp/>((pure))<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_typeof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ml_tag(Value);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(Tag<sp/>==<sp/>0,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value-&gt;Type;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLInteger32T;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_RATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLRational48T;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLDoubleT;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_typeof_deref(VALUE)<sp/>ml_typeof(ml_deref(VALUE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_typeof(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value-&gt;Type;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_deref(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(Value-&gt;Type-&gt;deref<sp/>!=<sp/>ml_default_deref,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value-&gt;Type-&gt;deref(Value);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_typeof_deref(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>Value-&gt;Type;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(Type-&gt;deref<sp/>!=<sp/>ml_default_deref,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_typeof(Type-&gt;deref(Value));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Expected);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_hash_chain(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_hash_chain(Value,<sp/>NULL);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_call(CALLER,<sp/>VALUE,<sp/>COUNT,<sp/>ARGS)<sp/>ml_typeof(VALUE)-&gt;call((ml_state_t<sp/>*)CALLER,<sp/>VALUE,<sp/>COUNT,<sp/>ARGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_inline(STATE,<sp/>VALUE,<sp/>COUNT,<sp/>ARGS<sp/>...)<sp/>ml_call(STATE,<sp/>VALUE,<sp/>COUNT,<sp/>(ml_value_t<sp/>**)(void<sp/>*[]){ARGS})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_assign(CALLER,<sp/>VALUE,<sp/>VALUE2)<sp/>ml_typeof(VALUE)-&gt;assign((ml_state_t<sp/>*)CALLER,<sp/>VALUE,<sp/>VALUE2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_typed_fn_get(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TypedFn);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_typed_fn_set(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TypedFn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Function);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN(FUNCTION,<sp/>TYPE,<sp/>ARGS<sp/>...)<sp/>CONCAT3(FUNCTION<sp/>##<sp/>_,<sp/>__LINE__,<sp/>__COUNTER__)(ARGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN(FUNCTION,<sp/>TYPE,<sp/>ARGS<sp/>...)<sp/>INIT_CODE<sp/>ml_typed_fn_set(TYPE,<sp/>(void<sp/>*)FUNCTION,<sp/>(void<sp/>*)(typeof(FUNCTION)*)CONCAT3(FUNCTION<sp/>##<sp/>_,<sp/>__LINE__,<sp/>__COUNTER__));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_VALUE(NAME,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor">ml_value_t<sp/>NAME[1]<sp/>=<sp/>{{TYPE}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLAnyT[];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLNilT[];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSomeT[];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLBlankT[];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLNil[];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLSome[];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLBlank[];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_value_set_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*ml_callback_t)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ml_callbackx_t)(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ml_value_find_fn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HasRefs);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_value_find_all(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_value_is_constant(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterators<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSequenceT[];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_count(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iterate(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_value(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_key(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_next(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_chained(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Functions);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_chainedv(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>...);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_doubled(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Sequence,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFunctionT[];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_function_source(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Line);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="structml__cfunction__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_callback_t<sp/>Callback;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="structml__cfunctionx__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_callbackx_t<sp/>Callback;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLCFunctionT[];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLCFunctionXT[];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLCFunctionZT[];</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CFUNCTION(NAME,<sp/>DATA,<sp/>CALLBACK)<sp/>static<sp/>ml_cfunction_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionT,<sp/>CALLBACK,<sp/>DATA,<sp/>ML_CATEGORY,<sp/>__LINE__}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CFUNCTIONX(NAME,<sp/>DATA,<sp/>CALLBACK)<sp/>static<sp/>ml_cfunctionx_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionXT,<sp/>CALLBACK,<sp/>DATA,<sp/>ML_CATEGORY,<sp/>__LINE__}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CFUNCTIONZ(NAME,<sp/>DATA,<sp/>CALLBACK)<sp/>static<sp/>ml_cfunctionx_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionZT,<sp/>CALLBACK,<sp/>DATA,<sp/>ML_CATEGORY,<sp/>__LINE__}}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLCallCC[];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLMarkCC[];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLCallDC[];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLSwapCC[];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLContextKeyT[];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>MLContextKey[];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionx(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionz(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunction2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionx2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionz2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_return_nil(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_identity(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_partial_function(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_partial_function_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_value_function(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTION2(NAME,<sp/>FUNCTION)<sp/>static<sp/>ml_value_t<sp/>*FUNCTION(void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args);<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor">ml_cfunction_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionT,<sp/>FUNCTION,<sp/>NULL,<sp/>ML_CATEGORY,<sp/>__LINE__}};<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*FUNCTION(void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTION(NAME)<sp/>ML_FUNCTION2(NAME,<sp/>CONCAT3(ml_cfunction_,<sp/>__LINE__,<sp/>__COUNTER__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTIONX2(NAME,<sp/>FUNCTION)<sp/>static<sp/>void<sp/>FUNCTION(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args);<sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor">ml_cfunctionx_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionXT,<sp/>FUNCTION,<sp/>NULL,<sp/>ML_CATEGORY,<sp/>__LINE__}};<sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor">static<sp/>void<sp/>FUNCTION(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTIONX(NAME,<sp/>TYPES<sp/>...)<sp/>ML_FUNCTIONX2(NAME,<sp/>CONCAT3(ml_cfunctionx_,<sp/>__LINE__,<sp/>__COUNTER__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTIONZ2(NAME,<sp/>FUNCTION)<sp/>static<sp/>void<sp/>FUNCTION(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args);<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor">ml_cfunctionx_t<sp/>NAME[1]<sp/>=<sp/>{{MLCFunctionZT,<sp/>FUNCTION,<sp/>NULL,<sp/>ML_CATEGORY,<sp/>__LINE__}};<sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor">static<sp/>void<sp/>FUNCTION(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FUNCTIONZ(NAME,<sp/>TYPES<sp/>...)<sp/>ML_FUNCTIONZ2(NAME,<sp/>CONCAT3(ml_cfunctionx_,<sp/>__LINE__,<sp/>__COUNTER__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CHECK_ARG_TYPE(N,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!ml_is(Args[N],<sp/>TYPE))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>%s<sp/>for<sp/>argument<sp/>%d&quot;,<sp/>TYPE-&gt;Name,<sp/>N<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CHECK_ARG_COUNT(N)<sp/>\</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Count<sp/>&lt;<sp/>N)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;CallError&quot;,<sp/>&quot;%d<sp/>arguments<sp/>required&quot;,<sp/>N);<sp/>\</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CHECKX_ARG_TYPE(N,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!ml_is(Args[N],<sp/>TYPE))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>%s<sp/>for<sp/>argument<sp/>%d&quot;,<sp/>TYPE-&gt;Name,<sp/>N<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CHECKX_ARG_COUNT(N)<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Count<sp/>&lt;<sp/>N)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(&quot;CallError&quot;,<sp/>&quot;%d<sp/>arguments<sp/>required&quot;,<sp/>N);<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRAMPOLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CONTINUE(STATE,<sp/>VALUE)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*__State<sp/>=<sp/>(ml_state_t<sp/>*)(STATE);<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*__Value<sp/>=<sp/>(ml_value_t<sp/>*)(VALUE);<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_state_schedule(__State,<sp/>__Value);<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TIMESCHED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CONTINUE(STATE,<sp/>VALUE)<sp/>return<sp/>ml_state_continue((ml_state_t<sp/>*)(STATE),<sp/>(ml_value_t<sp/>*)(VALUE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CONTINUE(STATE,<sp/>VALUE)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*__State<sp/>=<sp/>(ml_state_t<sp/>*)(STATE);<sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*__Value<sp/>=<sp/>(ml_value_t<sp/>*)(VALUE);<sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>__State-&gt;run(__State,<sp/>__Value);<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_RETURN(VALUE)<sp/>ML_CONTINUE(Caller,<sp/>VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ERROR(ARGS...)<sp/>ML_RETURN(ml_error(ARGS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tuples<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLTupleT[];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="structml__tuple__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>NoRefs;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values[];</highlight></codeline>
<codeline lineno="490"><highlight class="normal">};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplen(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplev(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>...)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">static<sp/>inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_tuple_size(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Tuple)-&gt;Size;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Tuple)-&gt;Values[Index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Tuple0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tuple-&gt;Values[Index<sp/>-<sp/>1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_unpack(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Booleans<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="structml__boolean__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}<sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLBooleanT[];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>MLTrue[];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>MLFalse[];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_boolean(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value)<sp/>__attribute__<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_boolean_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Numbers<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLNumberT[];</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRealT[];</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLIntegerT[];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLDoubleT[];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_RATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRationalT[];</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">int64_t<sp/>ml_integer_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_real_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_FLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;flint/flint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;flint/fmpz.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;flint/fmpq.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="structml__integer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_FLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>fmpz_t<sp/>Value;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}<sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_integer32(int32_t<sp/>Integer)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(((uint64_t)1<sp/>&lt;&lt;<sp/>48)<sp/>+<sp/>(uint32_t)Integer);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_integer64(int64_t<sp/>Integer);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_integer(int64_t<sp/>Integer)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Integer<sp/>&gt;=<sp/>INT32_MIN<sp/>&amp;&amp;<sp/>Integer<sp/>&lt;=<sp/>INT32_MAX)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer32(Integer);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer64(Integer);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_real(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;<sp/>uint64_t<sp/>Bits;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Double;<sp/>}<sp/>Boxed;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxed.Double<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxed.Bits<sp/>+=<sp/>0x07000000000000;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Boxed.Value;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_RATIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_rational(int64_t<sp/>Num,<sp/>uint64_t<sp/>Den)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is_double(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tag(Value)<sp/>&gt;=<sp/>7;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/>ml_integer_value_fast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__builtin_expect(!!ml_tag(Value),<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_FLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmpz_get_si(((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_double_value_fast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;<sp/>uint64_t<sp/>Bits;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Double;<sp/>}<sp/>Boxed;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxed.Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>Boxed.Bits<sp/>-=<sp/>0x07000000000000;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Boxed.Double;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_integer(int64_t<sp/>Value)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_real(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/>ml_integer_value_fast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="structml__double__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}<sp/><ref refid="structml__double__t" kindref="compound">ml_double_t</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_double_value_fast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Complex<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex_float;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex_double;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_double<sp/>Value;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}<sp/>ml_complex_t;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLComplexT[];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_complex(complex_double<sp/>Value);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">complex_double<sp/>ml_complex_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLIntegerRangeT[];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="structml__integer__range__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Start,<sp/>Limit,<sp/>Step;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}<sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLIntegerIntervalT[];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="structml__integer__interval__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Start,<sp/>Limit;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}<sp/><ref refid="structml__integer__interval__t" kindref="compound">ml_integer_interval_t</ref>;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRealRangeT[];</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="structml__real__range__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Start,<sp/>Limit,<sp/>Step;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}<sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_real_range_count(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Interval);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRealIntervalT[];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="structml__real__interval__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Start,<sp/>Limit;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}<sp/><ref refid="structml__real__interval__t" kindref="compound">ml_real_interval_t</ref>;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_real_interval_count(<ref refid="structml__real__interval__t" kindref="compound">ml_real_interval_t</ref><sp/>*Interval);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Strings<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GC_vasprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>va_list<sp/>Args);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GC_asprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>__attribute__((format(printf,<sp/>2,<sp/>3)));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref>;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="structml__address__t" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">};</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="structml__string__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLAddressT[];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLBufferT[];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLStringT[];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLRegexT[];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLStringBufferT[];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_address(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_address_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_address_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Value)-&gt;Length;</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_buffer_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_buffer_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Value)-&gt;Length;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_checked(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_unchecked(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>__attribute__((malloc,<sp/>format(printf,<sp/>1,<sp/>2)));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_string_value<sp/>ml_address_value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_string_length<sp/>ml_address_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>ml_cstring(VALUE)<sp/>ml_string(VALUE,<sp/>strlen(VALUE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_cstring(VALUE)<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>ml_string_t<sp/>String<sp/>##<sp/>__COUNTER__<sp/>=<sp/>{MLStringT,<sp/>VALUE,<sp/>strlen(VALUE),<sp/>0};<sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(ml_value_t<sp/>*)&amp;String<sp/>##<sp/>__COUNTER__;<sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor">})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_regex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_regexi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_regex_pattern(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__((pure));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_regex_match(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="structml__stringbuffer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Space,<sp/>Length,<sp/>Start,<sp/>Index;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">};</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>248</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="structml__stringbuffer__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Chars[ML_STRINGBUFFER_NODE_SIZE];</highlight></codeline>
<codeline lineno="788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_STRINGBUFFER_INIT<sp/>(ml_stringbuffer_t){MLStringBufferT,<sp/>0,}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer();</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_stringbuffer_length(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_writer(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length);</highlight></codeline>
<codeline lineno="799"><highlight class="normal">ssize_t<sp/>ml_stringbuffer_printf(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>__attribute__<sp/>((format(printf,<sp/>2,<sp/>3)));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ml_stringbuffer_last(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_append(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_clear(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_put_actual(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char);</highlight></codeline>
<codeline lineno="805"><highlight class="normal">static<sp/>inline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_put(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Buffer-&gt;Space)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_put_actual(Buffer,<sp/>Char);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Tail-&gt;Chars[ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space]<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">ssize_t<sp/>ml_stringbuffer_write_actual(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/>ml_stringbuffer_write(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Space<sp/>&lt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_write_actual(Buffer,<sp/>String,<sp/>Length);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Buffer-&gt;Tail-&gt;Chars<sp/>+<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space,<sp/>String,<sp/>Length);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_put32(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/>uint32_t<sp/>Code)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Val[8];</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>LeadByteMax<sp/>=<sp/>0x7F;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Code<sp/>&gt;<sp/>LeadByteMax)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val[--I]<sp/>=<sp/>(Code<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeadByteMax<sp/>&gt;&gt;=<sp/>(I<sp/>==<sp/>7<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>Val[--I]<sp/>=<sp/>(Code<sp/>&amp;<sp/>LeadByteMax)<sp/>|<sp/>(~LeadByteMax<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Val<sp/>+<sp/>I,<sp/>8<sp/>-<sp/>I);</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_simple_append(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_get_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_get_uncollectable(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_get_value(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_address(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_buffer(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_stringbuffer_reader(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_stringbuffer_drain(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>for<sp/>old<sp/>function<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_stringbuffer_add<sp/>ml_stringbuffer_write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_stringbuffer_addf<sp/>ml_stringbuffer_printf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_stringbuffer_string<sp/>ml_stringbuffer_get_string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_stringbuffer_uncollectable<sp/>ml_stringbuffer_get_uncollectable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_stringbuffer_value<sp/>ml_stringbuffer_get_value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lists<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref>;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/><ref refid="structml__list__t" kindref="compound">ml_list_t</ref>;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLListT[];</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869" refid="structml__list__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>*Next,<sp/>*Prev;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">};</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="structml__list__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>*CachedNode;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length,<sp/>CachedIndex;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_list()<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_grow(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_push(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_put(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_list_pop(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_list_pull(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_list_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_list_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_list_append<sp/>ml_list_put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_to_array(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Array);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_foreach(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_length(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)List)-&gt;Length;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902" refid="structml__list__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}<sp/><ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_iter_forward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List0,<sp/><ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*List<sp/>=<sp/>(<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)List0;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Iter-&gt;Node<sp/>=<sp/>List-&gt;Head))<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_iter_next(<ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_iter_backward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List0,<sp/><ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*List<sp/>=<sp/>(<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)List0;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Iter-&gt;Node<sp/>=<sp/>List-&gt;Tail))<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_iter_prev(<ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Prev))<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_list_iter_valid(<ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iter-&gt;Node<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_iter_update(<ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>*Iter,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LIST_FOREACH(LIST,<sp/>ITER)<sp/>\</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(ml_list_node_t<sp/>*ITER<sp/>=<sp/>((ml_list_t<sp/>*)LIST)-&gt;Head;<sp/>ITER;<sp/>ITER<sp/>=<sp/>ITER-&gt;Next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LIST_REVERSE(LIST,<sp/>ITER)<sp/>\</highlight></codeline>
<codeline lineno="959"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(ml_list_node_t<sp/>*ITER<sp/>=<sp/>((ml_list_t<sp/>*)LIST)-&gt;Tail;<sp/>ITER;<sp/>ITER<sp/>=<sp/>ITER-&gt;Prev)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Slices<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969" refid="structml__slice__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;<sp/>}<sp/><ref refid="structml__slice__node__t" kindref="compound">ml_slice_node_t</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="structml__slice__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__slice__node__t" kindref="compound">ml_slice_node_t</ref><sp/>*Nodes;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Capacity,<sp/>Offset,<sp/>Length;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}<sp/><ref refid="structml__slice__t" kindref="compound">ml_slice_t</ref>;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSliceT[];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_slice(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Capacity)<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_slice_grow(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_slice_put(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_slice_push(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_slice_pop(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_slice_pull(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_slice_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_slice_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Slice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__slice__node__t" kindref="compound">ml_slice_node_t</ref><sp/>*ml_slice_head(<ref refid="structml__slice__t" kindref="compound">ml_slice_t</ref><sp/>*Slice)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slice-&gt;Nodes<sp/>+<sp/>Slice-&gt;Offset;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_slice_length(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__slice__t" kindref="compound">ml_slice_t</ref><sp/>*)Value)-&gt;Length;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_SLICE_FOREACH(SLICE,<sp/>ITER)<sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(ml_slice_node_t<sp/>*ITER<sp/>=<sp/>ml_slice_head((ml_slice_t<sp/>*)SLICE);<sp/>ITER-&gt;Value;<sp/>++ITER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Methods<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLMethodDefine;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLMethodDefault;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_methods_t<sp/>ml_methods_t;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="structml__method__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMethodT[];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_method(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>__attribute__<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_method_anon(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_method_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__((pure));</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_by_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Method,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_by_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Method,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methodx_by_name(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Method,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methodx_by_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Method,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_define(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Variadic,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Types);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_definev(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Variadic,<sp/>...);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_insert(ml_methods_t<sp/>*Methods,<sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Callback,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Variadic,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Types);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_method_search(ml_methods_t<sp/>*Methods,<sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_method_wrap(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Types);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref>;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042" refid="structml__method__cached__t" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*Next,<sp/>*MethodNext;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_methods_t<sp/>*Methods;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Callback;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Score;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[];</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*ml_method_search_cached(ml_methods_t<sp/>*Methods,<sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*ml_method_check_cached(ml_methods_t<sp/>*Methods,<sp/><ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method,<sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*Cached,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_no_method_error(<ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*Method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;?&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_type_constructor(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type-&gt;Constructor;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>ml_value_t<sp/>*CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODX(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>void<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODZ(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>void<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODV(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>ml_value_t<sp/>*CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVX(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>void<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVZ(METHOD,<sp/>TYPES<sp/>...)<sp/>static<sp/>void<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__)(ml_state_t<sp/>*Caller,<sp/>void<sp/>*Data,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_nop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD_DECL(NAME,<sp/>METHOD)<sp/>ml_value_t<sp/>*NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD_ANON(NAME,<sp/>METHOD)<sp/>ml_value_t<sp/>*NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunction2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>NULL,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODX(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunctionx2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>NULL,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODZ(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunctionz2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>NULL,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODV(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunction2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>MLAnyT,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVX(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunctionx2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>MLAnyT,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVZ(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_definev(_Generic(METHOD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>ml_type_t<sp/>*:<sp/>ml_type_constructor,<sp/>default:<sp/>ml_nop)(METHOD),<sp/>ml_cfunctionz2(NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>ML_CATEGORY,<sp/>__LINE__),<sp/>MLAnyT,<sp/>##TYPES,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODX(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_methodx_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODZ(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_methodz_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODV(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_method_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVX(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_methodx_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHODVZ(METHOD,<sp/>TYPES<sp/>...)<sp/>INIT_CODE<sp/>ml_methodz_by_auto(METHOD,<sp/>NULL,<sp/>CONCAT3(ml_method_fn_,<sp/>__LINE__,<sp/>__COUNTER__),<sp/>TYPES,<sp/>(void<sp/>*)NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD_DECL(NAME,<sp/>METHOD)<sp/>INIT_CODE<sp/>NAME<sp/>=<sp/>ml_method(METHOD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_METHOD_ANON(NAME,<sp/>METHOD)<sp/>INIT_CODE<sp/>NAME<sp/>=<sp/>ml_method_anon(METHOD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methods_prevent_changes(ml_methods_t<sp/>*Methods,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PreventChanges);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">ml_methods_t<sp/>*ml_methods_context(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/><ref refid="structml__map__t" kindref="compound">ml_map_t</ref>;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref>;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>MAP_ORDER_INSERT,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>MAP_ORDER_LRU,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>MAP_ORDER_MRU,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>MAP_ORDER_ASC,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>MAP_ORDER_DESC</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}<sp/>ml_map_order_t;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMapT[];</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMapTemplateT[];</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144" refid="structml__map__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Head,<sp/>*Tail,<sp/>*Root;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*Cached;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_order_t<sp/>Order;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152" refid="structml__map__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Next,<sp/>*Prev;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Left,<sp/>*Right;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*Map;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map()<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map_search(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map_search0(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*ml_map_slot(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map_insert(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map_delete(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal">static<sp/>inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_size(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*)Map)-&gt;Size;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_foreach(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176" refid="structml__map__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key,<sp/>*Value;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">}<sp/><ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref>;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_iter_forward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map0,<sp/><ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*Map<sp/>=<sp/>(<ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*)Map0;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Map-&gt;Head;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_iter_next(<ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Next;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_iter_backward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map0,<sp/><ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*Map<sp/>=<sp/>(<ref refid="structml__map__t" kindref="compound">ml_map_t</ref><sp/>*)Map0;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Map-&gt;Tail;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_iter_prev(<ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Prev;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_map_iter_valid(<ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iter-&gt;Node<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_map_iter_update(<ref refid="structml__map__iter__t" kindref="compound">ml_map_iter_t</ref><sp/>*Iter,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>Iter-&gt;Node-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_MAP_FOREACH(MAP,<sp/>ITER)<sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(ml_map_node_t<sp/>*ITER<sp/>=<sp/>((ml_map_t<sp/>*)MAP)-&gt;Head;<sp/>ITER;<sp/>ITER<sp/>=<sp/>ITER-&gt;Next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Names<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLNamesT[];</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_names();</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_names_add(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_names_length<sp/>ml_list_length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_NAMES_CHECK_ARG_COUNT(N)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Required<sp/>=<sp/>ml_names_length(ml_deref(Args[N]))<sp/>+<sp/>N<sp/>+<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Count<sp/>&lt;<sp/>Required)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;CallError&quot;,<sp/>&quot;%d<sp/>arguments<sp/>required&quot;,<sp/>Required);<sp/>\</highlight></codeline>
<codeline lineno="1256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_NAMES_CHECKX_ARG_COUNT(N)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Required<sp/>=<sp/>ml_names_length(ml_deref(Args[N]))<sp/>+<sp/>N<sp/>+<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Count<sp/>&lt;<sp/>Required)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(&quot;CallError&quot;,<sp/>&quot;%d<sp/>arguments<sp/>required&quot;,<sp/>Required);<sp/>\</highlight></codeline>
<codeline lineno="1263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_NAMES_FOREACH(NAMES,<sp/>ITER)<sp/>ML_LIST_FOREACH(ml_deref(NAMES),<sp/>ITER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref>;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref>;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_ORDER_INSERT,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_ORDER_LRU,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_ORDER_MRU,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_ORDER_ASC,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>SET_ORDER_DESC</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">}<sp/>ml_set_order_t;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSetT[];</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="structml__set__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Head,<sp/>*Tail,<sp/>*Root;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*Cached;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_order_t<sp/>Order;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296" refid="structml__set__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Next,<sp/>*Prev;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Left,<sp/>*Right;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set()<sp/>__attribute__((malloc));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_search(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_search0(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*ml_set_slot(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_insert(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_delete(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal">static<sp/>inline<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_size(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set)-&gt;Size;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_foreach(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318" refid="structml__set__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}<sp/><ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref>;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_iter_forward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_iter_next(<ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Next;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_iter_backward(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Set-&gt;Tail;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_iter_prev(<ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Iter-&gt;Node<sp/>=<sp/>Iter-&gt;Node-&gt;Prev;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Key<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_iter_valid(<ref refid="structml__set__iter__t" kindref="compound">ml_set_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iter-&gt;Node<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_SET_FOREACH(SET,<sp/>ITER)<sp/>\</highlight></codeline>
<codeline lineno="1370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(ml_set_node_t<sp/>*ITER<sp/>=<sp/>((ml_set_t<sp/>*)SET)-&gt;Head;<sp/>ITER;<sp/>ITER<sp/>=<sp/>ITER-&gt;Next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modules<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLModuleT[];</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382" refid="structml__module__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Exports[1];</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}<sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref>;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path,<sp/>...)<sp/>__attribute__<sp/>((malloc,<sp/>sentinel));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_module_path(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module_import(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module_export(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Externals<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLExternalT[];</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLExternalSetT[];</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404" refid="structml__external__t" refkind="compound"><highlight class="normal">typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Exports[1];</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length,<sp/>Line;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}<sp/><ref refid="structml__external__t" kindref="compound">ml_external_t</ref>;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_external(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref>;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416" refid="structml__externals__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Values[1];</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Names[1];</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>MLExternals[1];</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_externals_get_name(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_externals_get_value(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_externals_add(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_externals_default_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_serialize(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*ml_deserializer_t)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_deserializer_define(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type,<sp/>ml_deserializer_t<sp/>Deserializer);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_deserialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_DESERIALIZER(TYPE)<sp/>static<sp/>ml_value_t<sp/>*CONCAT3(ml_deserializer_,<sp/>__LINE__,<sp/>__COUNTER__)(const<sp/>char<sp/>*Type,<sp/>int<sp/>Count,<sp/>ml_value_t<sp/>**Args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_DESERIALIZER(TYPE)<sp/>INIT_CODE<sp/>ml_deserializer_define(TYPE,<sp/>CONCAT3(ml_deserializer_,<sp/>__LINE__,<sp/>__COUNTER__));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symbols<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455" refid="structml__symbol__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}<sp/><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSymbolT[];</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_symbol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_symbol_name(VALUE)<sp/>((ml_symbol_t<sp/>*)VALUE)-&gt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466" refid="structml__symbol__interval__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*First,<sp/>*Last;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">}<sp/><ref refid="structml__symbol__interval__t" kindref="compound">ml_symbol_interval_t</ref>;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLSymbolIntervalT[];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_symbol_interval_first(VALUE)<sp/>((ml_symbol_interval_t<sp/>*)VALUE)-&gt;First</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_symbol_interval_last(VALUE)<sp/>((ml_symbol_interval_t<sp/>*)VALUE)-&gt;Last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_types_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_by_auto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Cached,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(ml_method(Cached),<sp/>ml_cfunction(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_by_auto(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Cached,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(Cached,<sp/>ml_cfunction(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_method_by_auto(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(Type-&gt;Constructor,<sp/>ml_cfunction(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methodx_by_auto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Cached,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(ml_method(Cached),<sp/>ml_cfunctionx(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methodx_by_auto(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Cached,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_methodx_define(Cached,<sp/>ml_cfunctionx(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_methodx_by_auto(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Function,<sp/>args...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_methodx_define(Type-&gt;Constructor,<sp/>ml_cfunctionx(Data,<sp/>Function),<sp/>NULL,<sp/>Args...);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/ml_types.h"/>
  </compounddef>
</doxygen>
