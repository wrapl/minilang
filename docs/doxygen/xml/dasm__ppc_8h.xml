<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="dasm__ppc_8h" kind="file" language="C++">
    <compoundname>dasm_ppc.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/dynasm/dasm_ppc.h</label>
        <link refid="dasm__ppc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdasm__Section" prot="public">dasm_Section</innerclass>
    <innerclass refid="structdasm__State" prot="public">dasm_State</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="dasm__ppc_8h_1a10cc6c8dc6fece8ec10c7842c51d83c1" prot="public" static="no">
        <name>DASM_ARCH</name>
        <initializer>&quot;ppc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="12" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1abd28deb7b2d8fa748f81e63e132c6784" prot="public" static="no">
        <name>DASM_EXTERN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="15" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a1fcddcfb11a7afd40328064f5b30c991" prot="public" static="no">
        <name>DASM_MAXSECPOS</name>
        <initializer>25</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="29" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a7a1d9940faedb9ac8895c10231913d36" prot="public" static="no">
        <name>DASM_S_OK</name>
        <initializer>0x00000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="32" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a5dc86d5b47316256e4700b23d1001023" prot="public" static="no">
        <name>DASM_S_NOMEM</name>
        <initializer>0x01000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="33" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1af01707f4e3164f0975bee4dff70f49d1" prot="public" static="no">
        <name>DASM_S_PHASE</name>
        <initializer>0x02000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="34" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a4053d2e95e7622fd5f3dcd99d88a494d" prot="public" static="no">
        <name>DASM_S_MATCH_SEC</name>
        <initializer>0x03000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="35" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a568d01aca77f953872a11996fab849ed" prot="public" static="no">
        <name>DASM_S_RANGE_I</name>
        <initializer>0x11000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="36" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a0fec15077e5469ba616c4dfe739db7ba" prot="public" static="no">
        <name>DASM_S_RANGE_SEC</name>
        <initializer>0x12000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="37" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a498e380cefba9d800ba7240753e1a9b3" prot="public" static="no">
        <name>DASM_S_RANGE_LG</name>
        <initializer>0x13000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="38" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ac7bd9e49e37e987c9162e7882f6a58d0" prot="public" static="no">
        <name>DASM_S_RANGE_PC</name>
        <initializer>0x14000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="39" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a6637f6ce3d74bd119336423e28c70549" prot="public" static="no">
        <name>DASM_S_RANGE_REL</name>
        <initializer>0x15000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="40" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ae8ba99ce7d1e23f53b8383a74201e60d" prot="public" static="no">
        <name>DASM_S_UNDEF_LG</name>
        <initializer>0x21000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="41" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a5a5af0efa5e15ba898fe8897976886ed" prot="public" static="no">
        <name>DASM_S_UNDEF_PC</name>
        <initializer>0x22000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="42" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ac91f9b419202177107befb5b9fee4807" prot="public" static="no">
        <name>DASM_POS2IDX</name>
        <param><defname>pos</defname></param>
        <initializer>((pos)&amp;0x00ffffff)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="45" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a7807a3e416accedbf17e403afe075655" prot="public" static="no">
        <name>DASM_POS2BIAS</name>
        <param><defname>pos</defname></param>
        <initializer>((pos)&amp;0xff000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="46" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ae6eca154fe997ecfb67bb0990729f47b" prot="public" static="no">
        <name>DASM_SEC2POS</name>
        <param><defname>sec</defname></param>
        <initializer>((sec)&lt;&lt;24)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="47" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a3ae89fee84a65cba305264f800944981" prot="public" static="no">
        <name>DASM_POS2SEC</name>
        <param><defname>pos</defname></param>
        <initializer>((pos)&gt;&gt;24)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="48" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1a6af4a29a892e4efe4f0485dc31a1cd4f" prot="public" static="no">
        <name>DASM_POS2PTR</name>
        <param><defname>D</defname></param>
        <param><defname>pos</defname></param>
        <initializer>(D-&gt;sections[DASM_POS2SEC(pos)].rbuf + (pos))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="49" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1acb9e64da89c1006b701e4db76db4a6f3" prot="public" static="no">
        <name>DASM_PSZ</name>
        <param><defname>ms</defname></param>
        <initializer>(sizeof(<ref refid="structdasm__State" kindref="compound">dasm_State</ref>)+(ms-1)*sizeof(<ref refid="structdasm__Section" kindref="compound">dasm_Section</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="81" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ad6a21cd2f688db487fb9492f94e46a56" prot="public" static="no">
        <name>CK</name>
        <param><defname>x</defname></param>
        <param><defname>st</defname></param>
        <initializer>((void)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="163" column="10" bodyfile="src/dynasm/dasm_ppc.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ab88a2e286a91aba4cea475301d864c96" prot="public" static="no">
        <name>CKPL</name>
        <param><defname>kind</defname></param>
        <param><defname>st</defname></param>
        <initializer>((void)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="164" column="9" bodyfile="src/dynasm/dasm_ppc.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dasm__ppc_8h_1ad6a21cd2f688db487fb9492f94e46a56" prot="public" static="no">
        <name>CK</name>
        <param><defname>x</defname></param>
        <param><defname>st</defname></param>
        <initializer>((void)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="319" column="10" bodyfile="src/dynasm/dasm_ppc.h" bodystart="163" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5acc063fbe39acb518bdf4e1ee07bfe26e" prot="public">
          <name>DASM_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a9157aadd93ddf695cd7bd9720b4f8f19" prot="public">
          <name>DASM_SECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5acdf0829a492d7020558d85ecedbbee7f" prot="public">
          <name>DASM_ESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a5f41a3003796464827e5fae9d2d4676d" prot="public">
          <name>DASM_REL_EXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5aa69ce3422fe1277c6c1434e8eb404ec4" prot="public">
          <name>DASM_ALIGN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5ac976844b2bfad08b7d9b55946fe62ee3" prot="public">
          <name>DASM_REL_LG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a6336675229812f22ae5441296eaaa3b2" prot="public">
          <name>DASM_LABEL_LG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5aa93fd98652fd6064235ef68c1beaef4f" prot="public">
          <name>DASM_REL_PC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a1bc261dd1550e2fd5214ec01af5dda57" prot="public">
          <name>DASM_LABEL_PC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a691bdcafaa97dffc6b983078600b7ace" prot="public">
          <name>DASM_IMM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dasm__ppc_8h_1a99fb83031ce9923c84392b4e92f956b5a6fc39302295c17c845eccb28f1faa3fb" prot="public">
          <name>DASM__MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="19" column="1" bodyfile="src/dynasm/dasm_ppc.h" bodystart="19" bodyend="26"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dasm__ppc_8h_1a48530b1f3a05a6ae7232b11cf86c3681" prot="public" static="no">
        <type>const unsigned int *</type>
        <definition>typedef const unsigned int* dasm_ActList</definition>
        <argsstring></argsstring>
        <name>dasm_ActList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="52" column="28" bodyfile="src/dynasm/dasm_ppc.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dasm__ppc_8h_1a3a4d80037ac01ad2b70d09b8ec4fa1af" prot="public" static="no">
        <type>struct dasm_Section</type>
        <definition>typedef struct dasm_Section dasm_Section</definition>
        <argsstring></argsstring>
        <name>dasm_Section</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="62" column="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dasm__ppc_8h_1a600ac4359f2beb01d4f6a3b73e6b4f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_init</definition>
        <argsstring>(Dst_DECL, int maxsection)</argsstring>
        <name>dasm_init</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>int</type>
          <declname>maxsection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="85" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="85" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1a5a2929cec696d697eb84b7435f487172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_free</definition>
        <argsstring>(Dst_DECL)</argsstring>
        <name>dasm_free</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="109" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="109" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1ae9ba9a6fe96d7897f60754ff40cf07b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_setupglobal</definition>
        <argsstring>(Dst_DECL, void **gl, unsigned int maxgl)</argsstring>
        <name>dasm_setupglobal</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>void **</type>
          <declname>gl</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxgl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="122" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1a4be3e362453792d8008320a0c0c9594d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_growpc</definition>
        <argsstring>(Dst_DECL, unsigned int maxpc)</argsstring>
        <name>dasm_growpc</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxpc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="130" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1accd6f5f3f7be1294565d1def94d628c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_setup</definition>
        <argsstring>(Dst_DECL, const void *actionlist)</argsstring>
        <name>dasm_setup</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>const void *</type>
          <declname>actionlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="139" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="139" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1a40044aef797eeafee37020a9d6b45a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dasm_put</definition>
        <argsstring>(Dst_DECL, int start,...)</argsstring>
        <name>dasm_put</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="168" column="6" bodyfile="src/dynasm/dasm_ppc.h" bodystart="168" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1ada06514ee49fe2a3659579525275d3b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dasm_link</definition>
        <argsstring>(Dst_DECL, size_t *szp)</argsstring>
        <name>dasm_link</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>size_t *</type>
          <declname>szp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="258" column="5" bodyfile="src/dynasm/dasm_ppc.h" bodystart="258" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1a5339f380fe5fda5a7610c17796c95210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dasm_encode</definition>
        <argsstring>(Dst_DECL, void *buffer)</argsstring>
        <name>dasm_encode</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="323" column="5" bodyfile="src/dynasm/dasm_ppc.h" bodystart="323" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="dasm__ppc_8h_1ace27470aefe4eabca9d83e33747cfaf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dasm_getpclabel</definition>
        <argsstring>(Dst_DECL, unsigned int pc)</argsstring>
        <name>dasm_getpclabel</name>
        <param>
          <type>Dst_DECL</type>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynasm/dasm_ppc.h" line="383" column="5" bodyfile="src/dynasm/dasm_ppc.h" bodystart="383" bodyend="392"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>DynASM<sp/>PPC<sp/>encoding<sp/>engine.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Copyright<sp/>(C)<sp/>2005-2017<sp/>Mike<sp/>Pall.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>Released<sp/>under<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>dynasm.lua<sp/>for<sp/>full<sp/>copyright<sp/>notice.</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_ARCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ppc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DASM_EXTERN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_EXTERN(a,b,c,d)<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Action<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>DASM_STOP,<sp/>DASM_SECTION,<sp/>DASM_ESC,<sp/>DASM_REL_EXT,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>actions<sp/>need<sp/>a<sp/>buffer<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>DASM_ALIGN,<sp/>DASM_REL_LG,<sp/>DASM_LABEL_LG,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>actions<sp/>also<sp/>have<sp/>an<sp/>argument.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>DASM_REL_PC,<sp/>DASM_LABEL_PC,<sp/>DASM_IMM,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>DASM__MAX</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>number<sp/>of<sp/>section<sp/>buffer<sp/>positions<sp/>for<sp/>a<sp/>single<sp/>dasm_put()<sp/>call.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_MAXSECPOS<sp/><sp/><sp/><sp/><sp/><sp/>25</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DynASM<sp/>encoder<sp/>status<sp/>codes.<sp/>Action<sp/>list<sp/>offset<sp/>or<sp/>number<sp/>are<sp/>or&apos;ed<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_NOMEM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_PHASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_MATCH_SEC<sp/><sp/><sp/><sp/>0x03000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_RANGE_I<sp/><sp/><sp/><sp/><sp/><sp/>0x11000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_RANGE_SEC<sp/><sp/><sp/><sp/>0x12000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_RANGE_LG<sp/><sp/><sp/><sp/><sp/>0x13000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_RANGE_PC<sp/><sp/><sp/><sp/><sp/>0x14000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_RANGE_REL<sp/><sp/><sp/><sp/>0x15000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_UNDEF_LG<sp/><sp/><sp/><sp/><sp/>0x21000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_S_UNDEF_PC<sp/><sp/><sp/><sp/><sp/>0x22000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>to<sp/>convert<sp/>positions<sp/>(8<sp/>bit<sp/>section<sp/>+<sp/>24<sp/>bit<sp/>index).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_POS2IDX(pos)<sp/><sp/><sp/>((pos)&amp;0x00ffffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_POS2BIAS(pos)<sp/><sp/>((pos)&amp;0xff000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_SEC2POS(sec)<sp/><sp/><sp/>((sec)&lt;&lt;24)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_POS2SEC(pos)<sp/><sp/><sp/>((pos)&gt;&gt;24)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_POS2PTR(D,<sp/>pos)<sp/><sp/><sp/><sp/>(D-&gt;sections[DASM_POS2SEC(pos)].rbuf<sp/>+<sp/>(pos))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Action<sp/>list<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dasm_ActList;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Per-section<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*rbuf;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Biased<sp/>buffer<sp/>pointer<sp/>(negative<sp/>section<sp/>bias).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*buf;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>True<sp/>buffer<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bsize;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffer<sp/>size<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Biased<sp/>buffer<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>epos;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>biased<sp/>buffer<sp/>position<sp/>-<sp/>max<sp/>single<sp/>put.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byte<sp/>offset<sp/>into<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Core<sp/>structure<sp/>holding<sp/>the<sp/>DynASM<sp/>encoding<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocated<sp/>size<sp/>of<sp/>this<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>dasm_ActList<sp/>actionlist;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>actionlist<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*lglabels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Local/global<sp/>chain/pos<sp/>ptrs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lgsize;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pclabels;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PC<sp/>label<sp/>chains/pos<sp/>ptrs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pcsize;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**globals;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>of<sp/>globals<sp/>(bias<sp/>-10).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>*section;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>active<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>codesize;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>size<sp/>of<sp/>all<sp/>code<sp/>sections.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsection;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>&lt;=<sp/>sectionidx<sp/>&lt;<sp/>maxsection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Status<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>sections[1];<sp/></highlight><highlight class="comment">/*<sp/>All<sp/>sections.<sp/>Alloc-extended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>size<sp/>of<sp/>the<sp/>core<sp/>structure<sp/>depends<sp/>on<sp/>the<sp/>max.<sp/>number<sp/>of<sp/>sections.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DASM_PSZ(ms)<sp/><sp/><sp/><sp/>(sizeof(dasm_State)+(ms-1)*sizeof(dasm_Section))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DynASM<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_init(Dst_DECL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxsection)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>Dst_REF<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>DASM_M_GROW(Dst,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref>,<sp/>Dst_REF,<sp/>psz,<sp/>DASM_PSZ(maxsection));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>D-&gt;psize<sp/>=<sp/>psz;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>D-&gt;lglabels<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>D-&gt;lgsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>D-&gt;pclabels<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>D-&gt;pcsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>D-&gt;globals<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>D-&gt;maxsection<sp/>=<sp/>maxsection;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>maxsection;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].buf<sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>this<sp/>for<sp/>pass3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].rbuf<sp/>=<sp/>D-&gt;sections[i].buf<sp/>-<sp/>DASM_SEC2POS(i);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].bsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].epos<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Wrong,<sp/>but<sp/>is<sp/>recalculated<sp/>after<sp/>resize.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Free<sp/>DynASM<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_free(Dst_DECL)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D-&gt;maxsection;<sp/>i++)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;sections[i].buf)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DASM_M_FREE(Dst,<sp/>D-&gt;sections[i].buf,<sp/>D-&gt;sections[i].bsize);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;pclabels)<sp/>DASM_M_FREE(Dst,<sp/>D-&gt;pclabels,<sp/>D-&gt;pcsize);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;lglabels)<sp/>DASM_M_FREE(Dst,<sp/>D-&gt;lglabels,<sp/>D-&gt;lgsize);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>DASM_M_FREE(Dst,<sp/>D,<sp/>D-&gt;psize);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Setup<sp/>global<sp/>label<sp/>array.<sp/>Must<sp/>be<sp/>called<sp/>before<sp/>dasm_setup().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_setupglobal(Dst_DECL,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**gl,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxgl)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>D-&gt;globals<sp/>=<sp/>gl<sp/>-<sp/>10;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Negative<sp/>bias<sp/>to<sp/>compensate<sp/>for<sp/>locals.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>DASM_M_GROW(Dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>D-&gt;lglabels,<sp/>D-&gt;lgsize,<sp/>(10+maxgl)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Grow<sp/>PC<sp/>label<sp/>array.<sp/>Can<sp/>be<sp/>called<sp/>after<sp/>dasm_setup(),<sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_growpc(Dst_DECL,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxpc)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>osz<sp/>=<sp/>D-&gt;pcsize;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>DASM_M_GROW(Dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>D-&gt;pclabels,<sp/>D-&gt;pcsize,<sp/>maxpc*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>memset((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)D-&gt;pclabels)+osz),<sp/>0,<sp/>D-&gt;pcsize-osz);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Setup<sp/>encoder.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_setup(Dst_DECL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*actionlist)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>D-&gt;actionlist<sp/>=<sp/>(dasm_ActList)actionlist;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>D-&gt;status<sp/>=<sp/>DASM_S_OK;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>D-&gt;section<sp/>=<sp/>&amp;D-&gt;sections[0];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>memset((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)D-&gt;lglabels,<sp/>0,<sp/>D-&gt;lgsize);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;pclabels)<sp/>memset((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)D-&gt;pclabels,<sp/>0,<sp/>D-&gt;pcsize);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>D-&gt;maxsection;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].pos<sp/>=<sp/>DASM_SEC2POS(i);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;sections[i].ofs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CK(x,<sp/>st)<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>if<sp/>(!(x))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>D-&gt;status<sp/>=<sp/>DASM_S_##st|(p-D-&gt;actionlist-1);<sp/>return;<sp/>}<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CKPL(kind,<sp/>st)<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>if<sp/>((size_t)((char<sp/>*)pl-(char<sp/>*)D-&gt;kind##labels)<sp/>&gt;=<sp/>D-&gt;kind##size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>D-&gt;status<sp/>=<sp/>DASM_S_RANGE_##st|(p-D-&gt;actionlist-1);<sp/>return;<sp/>}<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CK(x,<sp/>st)<sp/><sp/><sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CKPL(kind,<sp/>st)<sp/><sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pass<sp/>1:<sp/>Store<sp/>actions<sp/>and<sp/>args,<sp/>link<sp/>branches/labels,<sp/>estimate<sp/>offsets.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dasm_put(Dst_DECL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/>...)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>dasm_ActList<sp/>p<sp/>=<sp/>D-&gt;actionlist<sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>*sec<sp/>=<sp/>D-&gt;section;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>sec-&gt;pos,<sp/>ofs<sp/>=<sp/>sec-&gt;ofs;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>sec-&gt;epos)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>DASM_M_GROW(Dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>sec-&gt;buf,<sp/>sec-&gt;bsize,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sec-&gt;bsize<sp/>+<sp/>2*DASM_MAXSECPOS*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>sec-&gt;rbuf<sp/>=<sp/>sec-&gt;buf<sp/>-<sp/>DASM_POS2BIAS(pos);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>sec-&gt;epos<sp/>=<sp/>(int)sec-&gt;bsize/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>DASM_MAXSECPOS+DASM_POS2BIAS(pos);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>sec-&gt;rbuf;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>b[pos++]<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>start);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ins<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action<sp/>=<sp/>(ins<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>DASM__MAX)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ofs<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pl,<sp/>n<sp/>=<sp/>action<sp/>&gt;=<sp/>DASM_REL_PC<sp/>?<sp/>va_arg(ap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(action)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_STOP:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_SECTION:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(ins<sp/>&amp;<sp/>255);<sp/>CK(n<sp/>&lt;<sp/>D-&gt;maxsection,<sp/>RANGE_SEC);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;section<sp/>=<sp/>&amp;D-&gt;sections[n];<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ESC:<sp/>p++;<sp/>ofs<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_EXT:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ALIGN:<sp/>ofs<sp/>+=<sp/>(ins<sp/>&amp;<sp/>255);<sp/>b[pos++]<sp/>=<sp/>ofs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_LG:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(ins<sp/>&amp;<sp/>2047)<sp/>-<sp/>10;<sp/>pl<sp/>=<sp/>D-&gt;lglabels<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bkwd<sp/>rel<sp/>or<sp/>global.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)<sp/>{<sp/>CK(n&gt;=10||*pl&lt;0,<sp/>RANGE_LG);<sp/>CKPL(lg,<sp/>LG);<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>putrel;<sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>pl<sp/>+=<sp/>10;<sp/>n<sp/>=<sp/>*pl;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)<sp/>n<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>new<sp/>chain<sp/>for<sp/>fwd<sp/>rel<sp/>if<sp/>label<sp/>exists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>linkrel;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_PC:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>pl<sp/>=<sp/>D-&gt;pclabels<sp/>+<sp/>n;<sp/>CKPL(pc,<sp/>PC);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putrel:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>*pl;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>Label<sp/>exists.<sp/>Get<sp/>label<sp/>pos<sp/>and<sp/>store<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[pos]<sp/>=<sp/>-n;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linkrel:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[pos]<sp/>=<sp/>n;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Else<sp/>link<sp/>to<sp/>rel<sp/>chain,<sp/>anchored<sp/>at<sp/>label.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pl<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_LG:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>pl<sp/>=<sp/>D-&gt;lglabels<sp/>+<sp/>(ins<sp/>&amp;<sp/>2047)<sp/>-<sp/>10;<sp/>CKPL(lg,<sp/>LG);<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>putlabel;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_PC:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>pl<sp/>=<sp/>D-&gt;pclabels<sp/>+<sp/>n;<sp/>CKPL(pc,<sp/>PC);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>putlabel:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>*pl;<sp/><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>&gt;<sp/>0:<sp/>Collapse<sp/>rel<sp/>chain<sp/>and<sp/>replace<sp/>with<sp/>label<sp/>pos.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pb<sp/>=<sp/>DASM_POS2PTR(D,<sp/>n);<sp/>n<sp/>=<sp/>*pb;<sp/>*pb<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>*pl<sp/>=<sp/>-pos;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Label<sp/>exists<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>b[pos++]<sp/>=<sp/>ofs;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>pass1<sp/>offset<sp/>estimate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_IMM:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>CK((n<sp/>&amp;<sp/>((1&lt;&lt;((ins&gt;&gt;10)&amp;31))-1))<sp/>==<sp/>0,<sp/>RANGE_I);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>((ins&gt;&gt;10)&amp;31);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ins<sp/>&amp;<sp/>0x8000)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CK(((n<sp/>+<sp/>(1&lt;&lt;(((ins&gt;&gt;5)&amp;31)-1)))&gt;&gt;((ins&gt;&gt;5)&amp;31))<sp/>==<sp/>0,<sp/>RANGE_I);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CK((n&gt;&gt;((ins&gt;&gt;5)&amp;31))<sp/>==<sp/>0,<sp/>RANGE_I);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>b[pos++]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">stop:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>sec-&gt;pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>sec-&gt;ofs<sp/>=<sp/>ofs;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pass<sp/>2:<sp/>Link<sp/>sections,<sp/>shrink<sp/>aligns,<sp/>fix<sp/>label<sp/>offsets.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dasm_link(Dst_DECL,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*szp)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secnum;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>*szp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;status<sp/>!=<sp/>DASM_S_OK)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D-&gt;status;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pc;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pc<sp/>=<sp/>0;<sp/>pc*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>&lt;<sp/>D-&gt;pcsize;<sp/>pc++)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;pclabels[pc]<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DASM_S_UNDEF_PC|pc;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>globals<sp/>not<sp/>defined<sp/>in<sp/>this<sp/>translation<sp/>unit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(idx<sp/>=<sp/>20;<sp/>idx*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>&lt;<sp/>D-&gt;lgsize;<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>D-&gt;lglabels[idx];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Undefined<sp/>label:<sp/>Collapse<sp/>rel<sp/>chain<sp/>and<sp/>replace<sp/>with<sp/>marker<sp/>(&lt;<sp/>0).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pb<sp/>=<sp/>DASM_POS2PTR(D,<sp/>n);<sp/>n<sp/>=<sp/>*pb;<sp/>*pb<sp/>=<sp/>-idx;<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Combine<sp/>all<sp/>code<sp/>sections.<sp/>No<sp/>support<sp/>for<sp/>data<sp/>sections<sp/>(yet).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(secnum<sp/>=<sp/>0;<sp/>secnum<sp/>&lt;<sp/>D-&gt;maxsection;<sp/>secnum++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>*sec<sp/>=<sp/>D-&gt;sections<sp/>+<sp/>secnum;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>sec-&gt;rbuf;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>DASM_SEC2POS(secnum);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastpos<sp/>=<sp/>sec-&gt;pos;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>lastpos)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dasm_ActList<sp/>p<sp/>=<sp/>D-&gt;actionlist<sp/>+<sp/>b[pos++];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ins<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action<sp/>=<sp/>(ins<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(action)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_STOP:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_SECTION:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ESC:<sp/>p++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_EXT:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ALIGN:<sp/>ofs<sp/>-=<sp/>(b[pos++]<sp/>+<sp/>ofs)<sp/>&amp;<sp/>(ins<sp/>&amp;<sp/>255);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_LG:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_PC:<sp/>pos++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_LG:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_PC:<sp/>b[pos++]<sp/>+=<sp/>ofs;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_IMM:<sp/>pos++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop:<sp/>(void)0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>ofs<sp/>+=<sp/>sec-&gt;ofs;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Next<sp/>section<sp/>starts<sp/>right<sp/>after<sp/>current<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>D-&gt;codesize<sp/>=<sp/>ofs;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>size<sp/>of<sp/>all<sp/>code<sp/>sections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>*szp<sp/>=<sp/>ofs;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DASM_S_OK;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CK(x,<sp/>st)<sp/>\</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>if<sp/>(!(x))<sp/>return<sp/>DASM_S_##st|(p-D-&gt;actionlist-1);<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CK(x,<sp/>st)<sp/><sp/><sp/>((void)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pass<sp/>3:<sp/>Encode<sp/>sections.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dasm_encode(Dst_DECL,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)buffer;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*cp<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)buffer;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secnum;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>all<sp/>code<sp/>sections.<sp/>No<sp/>support<sp/>for<sp/>data<sp/>sections<sp/>(yet).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(secnum<sp/>=<sp/>0;<sp/>secnum<sp/>&lt;<sp/>D-&gt;maxsection;<sp/>secnum++)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdasm__Section" kindref="compound">dasm_Section</ref><sp/>*sec<sp/>=<sp/>D-&gt;sections<sp/>+<sp/>secnum;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/>sec-&gt;buf;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*endb<sp/>=<sp/>sec-&gt;rbuf<sp/>+<sp/>sec-&gt;pos;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>endb)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dasm_ActList<sp/>p<sp/>=<sp/>D-&gt;actionlist<sp/>+<sp/>*b++;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ins<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action<sp/>=<sp/>(ins<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(action<sp/>&gt;=<sp/>DASM_ALIGN<sp/>&amp;&amp;<sp/>action<sp/>&lt;<sp/>DASM__MAX)<sp/>?<sp/>*b++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(action)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_STOP:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_SECTION:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ESC:<sp/>*cp++<sp/>=<sp/>*p++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_EXT:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>DASM_EXTERN(Dst,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)cp,<sp/>(ins<sp/>&amp;<sp/>2047),<sp/>1)<sp/>-<sp/>4;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>patchrel;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_ALIGN:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ins<sp/>&amp;=<sp/>255;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)cp<sp/>-<sp/>base)<sp/>&amp;<sp/>ins))<sp/>*cp++<sp/>=<sp/>0x60000000;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_LG:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CK(n<sp/>&gt;=<sp/>0,<sp/>UNDEF_LG);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_REL_PC:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CK(n<sp/>&gt;=<sp/>0,<sp/>UNDEF_PC);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>*DASM_POS2PTR(D,<sp/>n)<sp/>-<sp/>(int)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)cp<sp/>-<sp/>base);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>patchrel:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CK((n<sp/>&amp;<sp/>3)<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((n+4)<sp/>+<sp/>((ins<sp/>&amp;<sp/>2048)<sp/>?<sp/>0x00008000<sp/>:<sp/>0x02000000))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ins<sp/>&amp;<sp/>2048)<sp/>?<sp/>16<sp/>:<sp/>26))<sp/>==<sp/>0,<sp/>RANGE_REL);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp[-1]<sp/>|=<sp/>((n+4)<sp/>&amp;<sp/>((ins<sp/>&amp;<sp/>2048)<sp/>?<sp/>0x0000fffc:<sp/>0x03fffffc));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_LG:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ins<sp/>&amp;=<sp/>2047;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ins<sp/>&gt;=<sp/>20)<sp/>D-&gt;globals[ins-10]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(base<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_LABEL_PC:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DASM_IMM:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp[-1]<sp/>|=<sp/>(n<sp/>&amp;<sp/>((1&lt;&lt;((ins&gt;&gt;5)&amp;31))-1))<sp/>&lt;&lt;<sp/>(ins&amp;31);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>*cp++<sp/>=<sp/>ins;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop:<sp/>(void)0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>+<sp/>D-&gt;codesize<sp/>!=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)cp)<sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>phase<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DASM_S_PHASE;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DASM_S_OK;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>PC<sp/>label<sp/>offset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dasm_getpclabel(Dst_DECL,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pc)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pc*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;<sp/>D-&gt;pcsize)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>D-&gt;pclabels[pc];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*DASM_POS2PTR(D,<sp/>-pos);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Undefined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Unused<sp/>or<sp/>out<sp/>of<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DASM_CHECKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Optional<sp/>sanity<sp/>checker<sp/>to<sp/>call<sp/>between<sp/>isolated<sp/>encoding<sp/>steps.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dasm_checkstep(Dst_DECL,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secmatch)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="structdasm__State" kindref="compound">dasm_State</ref><sp/>*D<sp/>=<sp/>Dst_REF;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;status<sp/>==<sp/>DASM_S_OK)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>9;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;lglabels[i]<sp/>&gt;<sp/>0)<sp/>{<sp/>D-&gt;status<sp/>=<sp/>DASM_S_UNDEF_LG|i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D-&gt;lglabels[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D-&gt;status<sp/>==<sp/>DASM_S_OK<sp/>&amp;&amp;<sp/>secmatch<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D-&gt;section<sp/>!=<sp/>&amp;D-&gt;sections[secmatch])</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;status<sp/>=<sp/>DASM_S_MATCH_SEC|(D-&gt;section-D-&gt;sections);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D-&gt;status;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/dynasm/dasm_ppc.h"/>
  </compounddef>
</doxygen>
