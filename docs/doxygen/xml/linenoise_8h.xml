<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="linenoise_8h" kind="file" language="C++">
    <compoundname>linenoise.h</compoundname>
    <innerclass refid="structlinenoiseCompletions" prot="public">linenoiseCompletions</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="linenoise_8h_1ac910792e203989883a76044651a4f99b" prot="public" static="no">
        <type>struct linenoiseCompletions</type>
        <definition>typedef struct linenoiseCompletions linenoiseCompletions</definition>
        <argsstring></argsstring>
        <name>linenoiseCompletions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="44" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="linenoise_8h_1a842807bddcb194f7e1669bba826acd19" prot="public" static="no">
        <type>void</type>
        <definition>typedef void linenoiseCompletionCallback(const char *prefix, linenoiseCompletions *comp, void *userdata)</definition>
        <argsstring>(const char *prefix, linenoiseCompletions *comp, void *userdata)</argsstring>
        <name>linenoiseCompletionCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="49" column="9" bodyfile="src/linenoise.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="linenoise_8h_1a00e13d9496d8bdd6e6997cac16d1a589" prot="public" static="no">
        <type>char *</type>
        <definition>typedef char * linenoiseHintsCallback(const char *, int *color, int *bold, void *userdata)</definition>
        <argsstring>(const char *, int *color, int *bold, void *userdata)</argsstring>
        <name>linenoiseHintsCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="63" column="9" bodyfile="src/linenoise.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="linenoise_8h_1a5c1e2c07cf42a9ad6a52a01de7b70cc9" prot="public" static="no">
        <type>void</type>
        <definition>typedef void linenoiseFreeHintsCallback(void *hint, void *userdata)</definition>
        <argsstring>(void *hint, void *userdata)</argsstring>
        <name>linenoiseFreeHintsCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="64" column="9" bodyfile="src/linenoise.h" bodystart="64" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="linenoise_8h_1aab9ea6a320a1da5410305b8fb88d218d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linenoiseCompletionCallback *</type>
        <definition>linenoiseCompletionCallback * linenoiseSetCompletionCallback</definition>
        <argsstring>(linenoiseCompletionCallback *comp, void *userdata)</argsstring>
        <name>linenoiseSetCompletionCallback</name>
        <param>
          <type>linenoiseCompletionCallback *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="55" column="30" declfile="src/linenoise.h" declline="55" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1ac60fcb30da0b8d5e562c9804a2d3a9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseAddCompletion</definition>
        <argsstring>(linenoiseCompletions *comp, const char *str)</argsstring>
        <name>linenoiseAddCompletion</name>
        <param>
          <type><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref> *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="61" column="6" declfile="src/linenoise.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1aedbf81d8f8c65f6984b55d7b4b048b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetHintsCallback</definition>
        <argsstring>(linenoiseHintsCallback *callback, void *userdata)</argsstring>
        <name>linenoiseSetHintsCallback</name>
        <param>
          <type>linenoiseHintsCallback *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="65" column="6" declfile="src/linenoise.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a8d00c12f56b48149e88ed5419b0368c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetFreeHintsCallback</definition>
        <argsstring>(linenoiseFreeHintsCallback *callback)</argsstring>
        <name>linenoiseSetFreeHintsCallback</name>
        <param>
          <type>linenoiseFreeHintsCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="66" column="6" declfile="src/linenoise.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a2c28429b3e025fd370160c1489651e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * linenoise</definition>
        <argsstring>(const char *prompt)</argsstring>
        <name>linenoise</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="77" column="6" declfile="src/linenoise.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a8a2931c798c8a6db5193f343c7eb33c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseClearScreen</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseClearScreen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="82" column="6" declfile="src/linenoise.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a21ea9805fd7a20b554aa41d1c3bac9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryAdd</definition>
        <argsstring>(const char *line)</argsstring>
        <name>linenoiseHistoryAdd</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="87" column="5" declfile="src/linenoise.h" declline="87" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1ac34da7161471aaaf132d3041f95abf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistorySetMaxLen</definition>
        <argsstring>(int len)</argsstring>
        <name>linenoiseHistorySetMaxLen</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="95" column="5" declfile="src/linenoise.h" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a64cffe07b4a3cc4b2de115df1cbe6eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryGetMaxLen</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseHistoryGetMaxLen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="100" column="5" declfile="src/linenoise.h" declline="100" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a971464006a6bdf1cbf0a30a3554179a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistorySave</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>linenoiseHistorySave</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="106" column="5" declfile="src/linenoise.h" declline="106" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a10c078eea5725c7bcabe5676cb019f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryLoad</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>linenoiseHistoryLoad</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="112" column="5" declfile="src/linenoise.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a3a342f0ed63f170c5855c9b81f79a3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseHistoryFree</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseHistoryFree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="117" column="6" declfile="src/linenoise.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a5ab95d6cbddafd5ebc06c35ddb6fa22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** linenoiseHistory</definition>
        <argsstring>(int *len)</argsstring>
        <name>linenoiseHistory</name>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="124" column="6" declfile="src/linenoise.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1adb2c859bb1b09d109bd6f66605cec8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseColumns</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseColumns</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="129" column="5" declfile="src/linenoise.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8h_1a63a5cb6aff2c705e71389d196878aec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetMultiLine</definition>
        <argsstring>(int enableml)</argsstring>
        <name>linenoiseSetMultiLine</name>
        <param>
          <type>int</type>
          <declname>enableml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable multiline mode (disabled by default) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.h" line="134" column="6" declfile="src/linenoise.h" declline="134" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>linenoise.h<sp/>--<sp/>guerrilla<sp/>line<sp/>editing<sp/>library<sp/>against<sp/>the<sp/>idea<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>line<sp/>editing<sp/>lib<sp/>needs<sp/>to<sp/>be<sp/>20,000<sp/>lines<sp/>of<sp/>C<sp/>code.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>linenoise.c<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010,<sp/>Salvatore<sp/>Sanfilippo<sp/>&lt;antirez<sp/>at<sp/>gmail<sp/>dot<sp/>com&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010,<sp/>Pieter<sp/>Noordhuis<sp/>&lt;pcnoordhuis<sp/>at<sp/>gmail<sp/>dot<sp/>com&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>met:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LINENOISE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LINENOISE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_COMPLETION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structlinenoiseCompletions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**cvec;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>The<sp/>callback<sp/>type<sp/>for<sp/>tab<sp/>completion<sp/>handlers.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(linenoiseCompletionCallback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>*comp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>current<sp/>tab<sp/>completion<sp/>handler<sp/>and<sp/>returns<sp/>the<sp/>previous<sp/>one,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>if<sp/>no<sp/>prior<sp/>one<sp/>has<sp/>been<sp/>set.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">linenoiseCompletionCallback<sp/>*<sp/>linenoiseSetCompletionCallback(linenoiseCompletionCallback<sp/>*comp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Adds<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>given<sp/>string<sp/>to<sp/>the<sp/>given<sp/>completion<sp/>list.<sp/>The<sp/>copy<sp/>is<sp/>owned</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>linenoiseCompletions<sp/>object.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseAddCompletion(<ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>*comp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(linenoiseHintsCallback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*color,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*bold,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void(linenoiseFreeHintsCallback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hint,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseSetHintsCallback(linenoiseHintsCallback<sp/>*callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseSetFreeHintsCallback(linenoiseFreeHintsCallback<sp/>*callback);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>Prompts<sp/>for<sp/>input<sp/>using<sp/>the<sp/>given<sp/>string<sp/>as<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>prompt.<sp/>Returns<sp/>when<sp/>the<sp/>user<sp/>has<sp/>tapped<sp/>ENTER<sp/>or<sp/>(on<sp/>an<sp/>empty</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>line)<sp/>EOF<sp/>(Ctrl-D<sp/>on<sp/>Unix,<sp/>Ctrl-Z<sp/>on<sp/>Windows).<sp/>Returns<sp/>either</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>entered<sp/>string<sp/>(for<sp/>ENTER)<sp/>or<sp/>NULL<sp/>(on<sp/>EOF).<sp/><sp/>The</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>caller<sp/>owns<sp/>the<sp/>returned<sp/>string<sp/>and<sp/>must<sp/>eventually<sp/>free()<sp/>it.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*linenoise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseClearScreen(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Adds<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>given<sp/>line<sp/>of<sp/>the<sp/>command<sp/>history.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryAdd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>maximum<sp/>length<sp/>of<sp/>the<sp/>command<sp/>history,<sp/>in<sp/>lines.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>history<sp/>is<sp/>currently<sp/>longer,<sp/>it<sp/>will<sp/>be<sp/>trimmed,</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>retaining<sp/>only<sp/>the<sp/>most<sp/>recent<sp/>entries.<sp/>If<sp/>len<sp/>is<sp/>0<sp/>or<sp/>less</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>then<sp/>this<sp/>function<sp/>does<sp/>nothing.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistorySetMaxLen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>Returns<sp/>the<sp/>current<sp/>maximum<sp/>length<sp/>of<sp/>the<sp/>history,<sp/>in<sp/>lines.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryGetMaxLen(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Saves<sp/>the<sp/>current<sp/>contents<sp/>of<sp/>the<sp/>history<sp/>to<sp/>the<sp/>given<sp/>file.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>Returns<sp/>0<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistorySave(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>Replaces<sp/>the<sp/>current<sp/>history<sp/>with<sp/>the<sp/>contents</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>given<sp/>file.<sp/><sp/>Returns<sp/>0<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryLoad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>Frees<sp/>all<sp/>history<sp/>entries,<sp/>clearing<sp/>the<sp/>history.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseHistoryFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>list<sp/>of<sp/>history<sp/>entries,<sp/>writing<sp/>its</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>length<sp/>to<sp/>*len<sp/>if<sp/>len<sp/>is<sp/>not<sp/>NULL.<sp/>The<sp/>memory<sp/>is<sp/>owned<sp/>by<sp/>linenoise</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>and<sp/>must<sp/>not<sp/>be<sp/>freed.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**linenoiseHistory(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>display<sp/>columns<sp/>in<sp/>the<sp/>current<sp/>terminal.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseColumns(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseSetMultiLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enableml);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__LINENOISE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/linenoise.h"/>
  </compounddef>
</doxygen>
