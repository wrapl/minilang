<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="inthash2_8h" kind="file" language="C++">
    <compoundname>inthash2.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/inthash2.h</label>
        <link refid="inthash2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structinthash2__node__t" prot="public">inthash2_node_t</innerclass>
    <innerclass refid="structinthash2__t" prot="public">inthash2_t</innerclass>
    <innerclass refid="structinthash2__result__t" prot="public">inthash2_result_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="inthash2_8h_1ab6c05145f6e02872f65710b571dc7f12" prot="public" static="no">
        <name>INTHASH2_INDEX_SHIFT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="24" column="9" bodyfile="src/inthash2.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inthash2_8h_1a0ed0865aee51b153806b21426a16d321" prot="public" static="no">
        <name>INTHASH2_INCR_SHIFT</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="25" column="9" bodyfile="src/inthash2.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="inthash2_8h_1af2c0a9bf050afa4815d2c1c1aade99e6" prot="public" static="no">
        <name>INTHASH2_INIT</name>
        <initializer>{NULL, NULL, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="27" column="9" bodyfile="src/inthash2.h" bodystart="27" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="inthash2_8h_1ae916a2db26a51c6dbde5c46abbadadb2" prot="public" static="no">
        <type>struct inthash2_t</type>
        <definition>typedef struct inthash2_t inthash2_t</definition>
        <argsstring></argsstring>
        <name>inthash2_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="16" column="25" bodyfile="src/inthash2.h" bodystart="16" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="inthash2_8h_1a7cdb71feb5a0fe19667f82e2e676b36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
        <definition>inthash2_t * inthash2_new</definition>
        <argsstring>() __attribute__((malloc))</argsstring>
        <name>inthash2_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="29" column="12" declfile="src/inthash2.h" declline="29" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1aa0e31570ddccb7de88a470257f8844aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * inthash2_search</definition>
        <argsstring>(const inthash2_t *Map, uintptr_t Key) __attribute__((pure))</argsstring>
        <name>inthash2_search</name>
        <param>
          <type>const <ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="31" column="6" declfile="src/inthash2.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1a82565f4aadc4818d019811dfce15bedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * inthash2_insert</definition>
        <argsstring>(inthash2_t *Map, uintptr_t Key, void *Value)</argsstring>
        <name>inthash2_insert</name>
        <param>
          <type><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="32" column="6" declfile="src/inthash2.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1a8b64f716274ccb7e4e7fcc31ee61407b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void * inthash2_search_inline</definition>
        <argsstring>(const inthash2_t *Map, uintptr_t Key)</argsstring>
        <name>inthash2_search_inline</name>
        <param>
          <type>const <ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="34" column="20" bodyfile="src/inthash2.h" bodystart="34" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1a089f5efb7d0b91774b589b61d3a8bde2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inthash2_foreach</definition>
        <argsstring>(inthash2_t *Map, void *Data, int(*callback)(uintptr_t, void *, void *))</argsstring>
        <name>inthash2_foreach</name>
        <param>
          <type><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(uintptr_t, void *, void *)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="52" column="5" declfile="src/inthash2.h" declline="52" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1a289cc7841657f0ce2d8d7bccbae48a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref></type>
        <definition>inthash2_result_t inthash2_search2</definition>
        <argsstring>(const inthash2_t *Map, uintptr_t Key) __attribute__((pure))</argsstring>
        <name>inthash2_search2</name>
        <param>
          <type>const <ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="56" column="19" declfile="src/inthash2.h" declline="56" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="inthash2_8h_1a53ec8f101c5f2e99efb769065156bc7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref></type>
        <definition>static inthash2_result_t inthash2_search2_inline</definition>
        <argsstring>(const inthash2_t *Map, uintptr_t Key)</argsstring>
        <name>inthash2_search2_inline</name>
        <param>
          <type>const <ref refid="structinthash2__t" kindref="compound">inthash2_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/inthash2.h" line="58" column="33" bodyfile="src/inthash2.h" bodystart="58" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>INTHASH2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTHASH2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structinthash2__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>Key;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Offset;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<sp/><ref refid="structinthash2__node__t" kindref="compound">inthash2_node_t</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structinthash2__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash2__node__t" kindref="compound">inthash2_node_t</ref><sp/>*Nodes;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Values;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Space;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTHASH2_INDEX_SHIFT<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTHASH2_INCR_SHIFT<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTHASH2_INIT<sp/>{NULL,<sp/>NULL,<sp/>0,<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*inthash2_new()<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*inthash2_search(const<sp/><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/>uintptr_t<sp/>Key)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*inthash2_insert(<ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/>uintptr_t<sp/>Key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">static<sp/>inline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*inthash2_search_inline(const<sp/><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/>uintptr_t<sp/>Key)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Map-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash2__node__t" kindref="compound">inthash2_node_t</ref><sp/>*Nodes<sp/>=<sp/>Map-&gt;Nodes;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Mask<sp/>=<sp/>Map-&gt;Size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Key<sp/>&gt;&gt;<sp/>INTHASH2_INDEX_SHIFT)<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(Nodes[Index].Key<sp/>==<sp/>Key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Map-&gt;Values[Index];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>(Index<sp/>+<sp/>1)<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Offset;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Offset<sp/>&lt;<sp/>Offset)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Offset<sp/>==<sp/>Offset)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Key<sp/>==<sp/>Key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Map-&gt;Values[Index];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inthash2_foreach(<ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(uintptr_t,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structinthash2__result__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Present;}<sp/><ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref><sp/>inthash2_search2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/>uintptr_t<sp/>Key)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref><sp/>inthash2_search2_inline(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structinthash2__t" kindref="compound">inthash2_t</ref><sp/>*Map,<sp/>uintptr_t<sp/>Key)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Map-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref>){NULL,<sp/>0};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash2__node__t" kindref="compound">inthash2_node_t</ref><sp/>*Nodes<sp/>=<sp/>Map-&gt;Nodes;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Mask<sp/>=<sp/>Map-&gt;Size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Key<sp/>&gt;&gt;<sp/>INTHASH2_INDEX_SHIFT)<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Key<sp/>==<sp/>Key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref>){Map-&gt;Values[Index],<sp/>1};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>(Index<sp/>+<sp/>1)<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Offset;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Offset<sp/>&lt;<sp/>Offset)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Offset<sp/>==<sp/>Offset)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nodes[Index].Key<sp/>==<sp/>Key)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref>){Map-&gt;Values[Index],<sp/>1};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structinthash2__result__t" kindref="compound">inthash2_result_t</ref>){NULL,<sp/>0};</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/inthash2.h"/>
  </compounddef>
</doxygen>
