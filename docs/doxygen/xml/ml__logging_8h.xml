<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="ml__logging_8h" kind="file" language="C++">
    <compoundname>ml_logging.h</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_logging.h</label>
        <link refid="ml__logging_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__logger__t" prot="public">ml_logger_t</innerclass>
    <sectiondef kind="define">
      <member refid="group__logging_1ga15120c861e87028b63c4e797d55eb3a5" kind="define"><name>ML_LOGGER</name></member>
      <member refid="group__logging_1ga8b196e830508b498e21565222c8db52f" kind="define"><name>ML_LOG_FATAL</name></member>
      <member refid="group__logging_1gaebf88e6908ef617953afa05f50e1916f" kind="define"><name>ML_LOG_ERROR</name></member>
      <member refid="group__logging_1gada7629204b251e9a90e20978e8b28759" kind="define"><name>ML_LOG_WARN</name></member>
      <member refid="group__logging_1ga9f77e3b7c700fbd00198de7b6bcd4090" kind="define"><name>ML_LOG_INFO</name></member>
      <member refid="group__logging_1gaef503c71d4eaacaad1ea793deb302716" kind="define"><name>ML_LOG_DEBUG</name></member>
    </sectiondef>
    <sectiondef kind="enum">
      <member refid="group__logging_1gad85d5ad7f21721364ba021b14fbbbf5d" kind="enum"><name>ml_log_level_t</name></member>
    </sectiondef>
    <sectiondef kind="typedef">
      <member refid="group__logging_1ga1b1a74cc75665cf0796bc796cb496078" kind="typedef"><name>ml_logger_t</name></member>
      <member refid="group__logging_1ga3801ca2abfc03b2781896138f8fe6428" kind="typedef"><name>ml_logger_fn</name></member>
      <member refid="group__logging_1ga0d57f9581b804027a60b4c23f950e607" kind="typedef"><name>MLLogLevel</name></member>
    </sectiondef>
    <sectiondef kind="var">
      <member refid="group__logging_1gae141b3a092df79ec95c287e3e7fea98b" kind="variable"><name>ml_log</name></member>
      <member refid="group__logging_1gaa8c901d37ef198c7100a86a593925b15" kind="variable"><name>MLLoggerDefault</name></member>
    </sectiondef>
    <sectiondef kind="func">
      <member refid="group__logging_1ga9084628ba013ca3cef24798656fa35e0" kind="function"><name>ml_logger</name></member>
      <member refid="group__logging_1ga8060269338d356d34e36691c2b7077f4" kind="function"><name>ml_logger_init</name></member>
      <member refid="group__logging_1ga59673295603f23e896e0c1ec708b33f5" kind="function"><name>ml_logging_init</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ML_LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_NONE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_FATAL<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_ERROR<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_WARN<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_INFO<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_DEBUG<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LOG_LEVEL_ALL<sp/>=<sp/>6</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/>ml_log_level_t;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structml__logger__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*AnsiName;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Loggers[ML_LOG_LEVEL_ALL];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ignored[ML_LOG_LEVEL_ALL];</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ml_logger_fn)(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger,<sp/>ml_log_level_t<sp/>Level,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>__attribute__((format(printf,<sp/>6,<sp/>7)));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ml_log_level_t<sp/>MLLogLevel;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ml_logger_fn<sp/>ml_log;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>MLLoggerDefault[];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ML_LOGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOGGER<sp/>MLLoggerDefault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOG_FATAL(ERROR,<sp/>FORMAT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_FATAL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_log(ML_LOGGER,<sp/>ML_LOG_LEVEL_FATAL,<sp/>ERROR,<sp/>__FILE__,<sp/>__LINE__,<sp/>FORMAT,<sp/>##__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOG_ERROR(ERROR,<sp/>FORMAT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_ERROR)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_log(ML_LOGGER,<sp/>ML_LOG_LEVEL_ERROR,<sp/>ERROR,<sp/>__FILE__,<sp/>__LINE__,<sp/>FORMAT,<sp/>##__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOG_WARN(ERROR,<sp/>FORMAT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_WARN)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_log(ML_LOGGER,<sp/>ML_LOG_LEVEL_WARN,<sp/>ERROR,<sp/>__FILE__,<sp/>__LINE__,<sp/>FORMAT,<sp/>##__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOG_INFO(ERROR,<sp/>FORMAT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_INFO)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_log(ML_LOGGER,<sp/>ML_LOG_LEVEL_INFO,<sp/>ERROR,<sp/>__FILE__,<sp/>__LINE__,<sp/>FORMAT,<sp/>##__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_LOG_DEBUG(ERROR,<sp/>FORMAT,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_DEBUG)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_log(ML_LOGGER,<sp/>ML_LOG_LEVEL_DEBUG,<sp/>ERROR,<sp/>__FILE__,<sp/>__LINE__,<sp/>FORMAT,<sp/>##__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*ml_logger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_logger_init(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_logging_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/ml_logging.h"/>
  </compounddef>
</doxygen>
