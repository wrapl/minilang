
hierarchy
=========

.. graphviz::

   digraph hierarchy {
      rankdir="LR";
      fontsize="40pt"
      concentrate=true;
      overlap=false;
      packMode="node";
      outputorder="edgesfirst";
      node [shape=box,fontsize=24];
      "any":e -> "sequence":w;
      "any":e -> "function":w;
      "function":e -> "type":w;
      "function":e -> "visitor":w;
      "function":e -> "function::partial":w;
      "sequence":e -> "function::partial":w;
      "function":e -> "tuple":w;
      "sequence":e -> "tuple":w;
      "any":e -> "boolean":w;
      "any":e -> "module":w;
      "any":e -> "external":w;
      "any":e -> "external::set":w;
      "function":e -> "symbol":w;
      "any":e -> "symbol::interval":w;
      "any":e -> "weakref":w;
      "any":e -> "weakmaptoken":w;
      "any":e -> "weakmap":w;
      "any":e -> "xml":w;
      "xml":e -> "xml::text":w;
      "string":e -> "xml::text":w;
      "xml":e -> "xml::element":w;
      "sequence":e -> "xml::element":w;
      "function":e -> "xml::filter":w;
      "stream":e -> "xml::parser":w;
      "sequence":e -> "xe::node":w;
      "any":e -> "xe::var":w;
      "any":e -> "uuid":w;
      "any":e -> "time":w;
      "enum::cyclic":e -> "time::day":w;
      "enum::cyclic":e -> "time::month":w;
      "any":e -> "time::zone":w;
      "any":e -> "thread":w;
      "function":e -> "thread::port":w;
      "any":e -> "thread::channel":w;
      "any":e -> "thread::mutex":w;
      "any":e -> "thread::protected":w;
      "any":e -> "thread::condition":w;
      "function":e -> "task":w;
      "task":e -> "task::set":w;
      "function":e -> "task::queue":w;
      "sequence":e -> "table":w;
      "sequence":e -> "table::row":w;
      "any":e -> "instance::field":w;
      "any":e -> "instance":w;
      "function":e -> "struct::getter":w;
      "function":e -> "struct::getter::fast":w;
      "type":e -> "struct":w;
      "any":e -> "ref":w;
      "any":e -> "address":w;
      "address":e -> "buffer":w;
      "enum":e -> "byte::order":w;
      "address":e -> "string":w;
      "sequence":e -> "string":w;
      "enum":e -> "string::norm":w;
      "enum":e -> "string::ctype":w;
      "function":e -> "regex":w;
      "stream":e -> "string::buffer":w;
      "any":e -> "string::buffer":w;
      "any":e -> "stream":w;
      "enum":e -> "stream::seek":w;
      "function":e -> "stream::parser":w;
      "sequence":e -> "stream::parser":w;
      "stream":e -> "stream::buffered":w;
      "stream":e -> "stream::fd":w;
      "enum":e -> "socket::type":w;
      "stream::fd":e -> "socket":w;
      "socket":e -> "socket::local":w;
      "socket":e -> "socket::inet":w;
      "sequence":e -> "slice":w;
      "slice":e -> "slice::mutable":w;
      "any":e -> "slice::index":w;
      "any":e -> "slice::slice":w;
      "any":e -> "slice::iter":w;
      "slice::iter":e -> "slice::mutable::iter":w;
      "sequence":e -> "set":w;
      "set":e -> "set::mutable":w;
      "enum":e -> "set::order":w;
      "function":e -> "chained":w;
      "sequence":e -> "chained":w;
      "any":e -> "iterator":w;
      "sequence":e -> "split":w;
      "sequence":e -> "grouped":w;
      "function":e -> "context":w;
      "function":e -> "state":w;
      "state":e -> "resumable::state":w;
      "any":e -> "uninitialized":w;
      "any":e -> "error":w;
      "any":e -> "error::value":w;
      "any":e -> "debugger":w;
      "any":e -> "semaphore":w;
      "any":e -> "condition":w;
      "any":e -> "rwlock":w;
      "any":e -> "channel":w;
      "any":e -> "pqueue::entry":w;
      "sequence":e -> "pqueue":w;
      "function":e -> "polynomial":w;
      "any":e -> "polynomial::rational":w;
      "any":e -> "field":w;
      "field":e -> "field::mutable":w;
      "any":e -> "object":w;
      "type":e -> "class":w;
      "any":e -> "property":w;
      "integer":e -> "enum::value":w;
      "type":e -> "enum":w;
      "sequence":e -> "enum":w;
      "enum":e -> "enum::cyclic":w;
      "sequence":e -> "enum::interval":w;
      "type":e -> "flags":w;
      "any":e -> "flags::value":w;
      "any":e -> "flags::spec":w;
      "any":e -> "number":w;
      "number":e -> "complex":w;
      "complex":e -> "real":w;
      "real":e -> "integer":w;
      "function":e -> "integer":w;
      "real":e -> "double":w;
      "sequence":e -> "integer::range":w;
      "sequence":e -> "integer::interval":w;
      "sequence":e -> "real::range":w;
      "sequence":e -> "real::interval":w;
      "address":e -> "mmap":w;
      "mmap":e -> "mmap::buffer":w;
      "buffer":e -> "mmap::buffer":w;
      "any":e -> "minijs":w;
      "any":e -> "method::context":w;
      "function":e -> "method::isolated":w;
      "function":e -> "method":w;
      "function":e -> "random":w;
      "sequence":e -> "map":w;
      "map":e -> "map::mutable":w;
      "enum":e -> "map::order":w;
      "any":e -> "map::node":w;
      "map::node":e -> "map::node::mutable":w;
      "any":e -> "map::node::mutable":w;
      "function":e -> "log::macro":w;
      "any":e -> "logger":w;
      "sequence":e -> "list":w;
      "list":e -> "list::mutable":w;
      "any":e -> "list::node":w;
      "list::node":e -> "list::node::mutable":w;
      "any":e -> "list::node::mutable":w;
      "any":e -> "list::slice":w;
      "function":e -> "importer":w;
      "any":e -> "module::dir":w;
      "stream":e -> "json::decoder":w;
      "string":e -> "json":w;
      "sequence":e -> "gir":w;
      "type":e -> "gir::baseinfo":w;
      "any":e -> "gir::module":w;
      "gir::baseinfo":e -> "gir::instance":w;
      "gir::instance":e -> "gir::object":w;
      "gir::instance":e -> "gir::interface":w;
      "any":e -> "gir::objectinstance":w;
      "gir::baseinfo":e -> "gir::struct":w;
      "any":e -> "gir::structinstance":w;
      "gir::baseinfo":e -> "gir::union":w;
      "any":e -> "gir::unioninstance":w;
      "any":e -> "gir::fieldref":w;
      "gir::fieldref":e -> "gir::fieldref-boolean":w;
      "gir::fieldref":e -> "gir::fieldref-int8":w;
      "gir::fieldref":e -> "gir::fieldref-uint8":w;
      "gir::fieldref":e -> "gir::fieldref-int16":w;
      "gir::fieldref":e -> "gir::fieldref-uint16":w;
      "gir::fieldref":e -> "gir::fieldref-int32":w;
      "gir::fieldref":e -> "gir::fieldref-uint32":w;
      "gir::fieldref":e -> "gir::fieldref-int64":w;
      "gir::fieldref":e -> "gir::fieldref-uint64":w;
      "gir::fieldref":e -> "gir::fieldref-float":w;
      "gir::fieldref":e -> "gir::fieldref-double":w;
      "gir::fieldref":e -> "gir::fieldref-utf8":w;
      "gir::baseinfo":e -> "gir::enum":w;
      "any":e -> "gir::enumvalue":w;
      "any":e -> "gir::objectproperty":w;
      "gir::baseinfo":e -> "gir::callback":w;
      "any":e -> "gir::callbackinstance":w;
      "function":e -> "gir::function":w;
      "gir::instance":e -> "gir::class":w;
      "stream":e -> "file":w;
      "any":e -> "file::stat":w;
      "enum":e -> "file::mode":w;
      "sequence":e -> "dir":w;
      "file":e -> "popen":w;
      "state":e -> "compiler::function":w;
      "any":e -> "expr":w;
      "any":e -> "macro":w;
      "function":e -> "function::inline":w;
      "function":e -> "macro::subst":w;
      "any":e -> "block::builder":w;
      "any":e -> "expr::builder":w;
      "state":e -> "compiler":w;
      "any":e -> "parser":w;
      "any":e -> "global":w;
      "any":e -> "command::decl":w;
      "stream":e -> "cbor::decoder":w;
      "any":e -> "cbortag":w;
      "any":e -> "variable":w;
      "state":e -> "continuation":w;
      "sequence":e -> "continuation":w;
      "function":e -> "closure":w;
      "sequence":e -> "closure":w;
      "any":e -> "closure::info":w;
      "any":e -> "ast::expr":w;
      "ast::expr":e -> "ast::expr::if":w;
      "ast::expr":e -> "ast::expr::fun":w;
      "ast::expr":e -> "ast::expr::for":w;
      "ast::expr":e -> "ast::expr::value":w;
      "ast::expr":e -> "ast::expr::subst":w;
      "ast::expr":e -> "ast::expr::ident":w;
      "ast::expr":e -> "ast::expr::local":w;
      "ast::expr":e -> "ast::expr::block":w;
      "ast::expr":e -> "ast::expr::string":w;
      "ast::expr":e -> "ast::expr::scoped":w;
      "ast::expr":e -> "ast::expr::parent":w;
      "ast::expr":e -> "ast::expr::default":w;
      "ast::expr":e -> "ast::expr::ifconfig":w;
      "ast::expr":e -> "ast::expr::parentvalue":w;
      "ast::expr::parent":e -> "ast::expr::and":w;
      "ast::expr::parent":e -> "ast::expr::assign":w;
      "ast::expr":e -> "ast::expr::blank":w;
      "ast::expr::parent":e -> "ast::expr::call":w;
      "ast::expr::parentvalue":e -> "ast::expr::constcall":w;
      "ast::expr::parent":e -> "ast::expr::debug":w;
      "ast::expr::local":e -> "ast::expr::def":w;
      "ast::expr::local":e -> "ast::expr::defin":w;
      "ast::expr::local":e -> "ast::expr::defunpack":w;
      "ast::expr::ident":e -> "ast::expr::define":w;
      "ast::expr::parent":e -> "ast::expr::delegate":w;
      "ast::expr::parent":e -> "ast::expr::each":w;
      "ast::expr::parent":e -> "ast::expr::exit":w;
      "ast::expr::parent":e -> "ast::expr::guard":w;
      "ast::expr::parent":e -> "ast::expr::inline":w;
      "ast::expr":e -> "ast::expr::it":w;
      "ast::expr::local":e -> "ast::expr::let":w;
      "ast::expr::local":e -> "ast::expr::letin":w;
      "ast::expr::local":e -> "ast::expr::letunpack":w;
      "ast::expr::parent":e -> "ast::expr::list":w;
      "ast::expr::parent":e -> "ast::expr::loop":w;
      "ast::expr::parent":e -> "ast::expr::map":w;
      "ast::expr::parent":e -> "ast::expr::next":w;
      "ast::expr":e -> "ast::expr::nil":w;
      "ast::expr::parent":e -> "ast::expr::not":w;
      "ast::expr":e -> "ast::expr::old":w;
      "ast::expr::parent":e -> "ast::expr::or":w;
      "ast::expr::local":e -> "ast::expr::ref":w;
      "ast::expr::local":e -> "ast::expr::refin":w;
      "ast::expr::local":e -> "ast::expr::refunpack":w;
      "ast::expr":e -> "ast::expr::register":w;
      "ast::expr::parentvalue":e -> "ast::expr::resolve":w;
      "ast::expr::parent":e -> "ast::expr::return":w;
      "ast::expr::parent":e -> "ast::expr::suspend":w;
      "ast::expr::parent":e -> "ast::expr::switch":w;
      "ast::expr::parent":e -> "ast::expr::tuple":w;
      "ast::expr":e -> "ast::expr::unknown":w;
      "ast::expr::local":e -> "ast::expr::var":w;
      "ast::expr::local":e -> "ast::expr::varin":w;
      "ast::expr::local":e -> "ast::expr::vartype":w;
      "ast::expr::local":e -> "ast::expr::varunpack":w;
      "ast::expr::local":e -> "ast::expr::with":w;
      "any":e -> "ast::local":w;
      "any":e -> "ast::param":w;
      "any":e -> "ast::stringpart":w;
      "any":e -> "ast::ifcase":w;
      "enum":e -> "paramkind":w;
      "list":e -> "ast::names":w;
      "address":e -> "array":w;
      "sequence":e -> "array":w;
      "array":e -> "array::mutable":w;
      "buffer":e -> "array::mutable":w;
      "array":e -> "vector":w;
      "vector":e -> "vector::mutable":w;
      "array::mutable":e -> "vector::mutable":w;
      "array":e -> "matrix":w;
      "matrix":e -> "matrix::mutable":w;
      "array::mutable":e -> "matrix::mutable":w;
      "array":e -> "array::complex":w;
      "array::complex":e -> "array::mutable::complex":w;
      "array::mutable":e -> "array::mutable::complex":w;
      "array::complex":e -> "vector::complex":w;
      "vector":e -> "vector::complex":w;
      "vector::complex":e -> "vector::mutable::complex":w;
      "array::mutable::complex":e -> "vector::mutable::complex":w;
      "vector::mutable":e -> "vector::mutable::complex":w;
      "array::complex":e -> "matrix::complex":w;
      "matrix":e -> "matrix::complex":w;
      "array::mutable::complex":e -> "matrix::mutable::complex":w;
      "matrix::mutable":e -> "matrix::mutable::complex":w;
      "array::complex":e -> "array::real":w;
      "array::real":e -> "array::mutable::real":w;
      "array::mutable::complex":e -> "array::mutable::real":w;
      "array::real":e -> "vector::real":w;
      "vector::complex":e -> "vector::real":w;
      "vector::real":e -> "vector::mutable::real":w;
      "array::mutable::real":e -> "vector::mutable::real":w;
      "vector::mutable::complex":e -> "vector::mutable::real":w;
      "array::real":e -> "matrix::real":w;
      "matrix::complex":e -> "matrix::real":w;
      "matrix::real":e -> "matrix::mutable::real":w;
      "array::mutable::real":e -> "matrix::mutable::real":w;
      "matrix::mutable::complex":e -> "matrix::mutable::real":w;
      "array::real":e -> "array::integer":w;
      "array::integer":e -> "array::mutable::integer":w;
      "array::mutable::real":e -> "array::mutable::integer":w;
      "vector::real":e -> "vector::integer":w;
      "vector::integer":e -> "vector::mutable::integer":w;
      "vector::mutable::real":e -> "vector::mutable::integer":w;
      "matrix::real":e -> "matrix::integer":w;
      "matrix::integer":e -> "matrix::mutable::integer":w;
      "matrix::mutable::real":e -> "matrix::mutable::integer":w;
      "any":e -> "ref::uint8":w;
      "any":e -> "ref::int8":w;
      "any":e -> "ref::uint16":w;
      "any":e -> "ref::int16":w;
      "any":e -> "ref::uint32":w;
      "any":e -> "ref::int32":w;
      "any":e -> "ref::uint64":w;
      "any":e -> "ref::int64":w;
      "any":e -> "ref::float32":w;
      "any":e -> "ref::float64":w;
      "any":e -> "ref::complex32":w;
      "any":e -> "ref::complex64":w;
      "any":e -> "ref::any":w;
      "any":e -> "array::iterator":w;
      "array::iterator":e -> "array::mutable::iterator":w;
      "array::integer":e -> "array::uint8":w;
      "array::uint8":e -> "array::mutable::uint8":w;
      "array::mutable::integer":e -> "array::mutable::uint8":w;
      "vector::integer":e -> "vector::uint8":w;
      "array::uint8":e -> "vector::uint8":w;
      "vector::uint8":e -> "vector::mutable::uint8":w;
      "vector::mutable::integer":e -> "vector::mutable::uint8":w;
      "array::mutable::uint8":e -> "vector::mutable::uint8":w;
      "matrix::integer":e -> "matrix::uint8":w;
      "array::uint8":e -> "matrix::uint8":w;
      "matrix::uint8":e -> "matrix::mutable::uint8":w;
      "matrix::mutable::integer":e -> "matrix::mutable::uint8":w;
      "array::mutable::uint8":e -> "matrix::mutable::uint8":w;
      "array::integer":e -> "array::int8":w;
      "array::int8":e -> "array::mutable::int8":w;
      "array::mutable::integer":e -> "array::mutable::int8":w;
      "vector::integer":e -> "vector::int8":w;
      "array::int8":e -> "vector::int8":w;
      "vector::int8":e -> "vector::mutable::int8":w;
      "vector::mutable::integer":e -> "vector::mutable::int8":w;
      "array::mutable::int8":e -> "vector::mutable::int8":w;
      "matrix::integer":e -> "matrix::int8":w;
      "array::int8":e -> "matrix::int8":w;
      "matrix::int8":e -> "matrix::mutable::int8":w;
      "matrix::mutable::integer":e -> "matrix::mutable::int8":w;
      "array::mutable::int8":e -> "matrix::mutable::int8":w;
      "array::integer":e -> "array::uint16":w;
      "array::uint16":e -> "array::mutable::uint16":w;
      "array::mutable::integer":e -> "array::mutable::uint16":w;
      "vector::integer":e -> "vector::uint16":w;
      "array::uint16":e -> "vector::uint16":w;
      "vector::uint16":e -> "vector::mutable::uint16":w;
      "vector::mutable::integer":e -> "vector::mutable::uint16":w;
      "array::mutable::uint16":e -> "vector::mutable::uint16":w;
      "matrix::integer":e -> "matrix::uint16":w;
      "array::uint16":e -> "matrix::uint16":w;
      "matrix::uint16":e -> "matrix::mutable::uint16":w;
      "matrix::mutable::integer":e -> "matrix::mutable::uint16":w;
      "array::mutable::uint16":e -> "matrix::mutable::uint16":w;
      "array::integer":e -> "array::int16":w;
      "array::int16":e -> "array::mutable::int16":w;
      "array::mutable::integer":e -> "array::mutable::int16":w;
      "vector::integer":e -> "vector::int16":w;
      "array::int16":e -> "vector::int16":w;
      "vector::int16":e -> "vector::mutable::int16":w;
      "vector::mutable::integer":e -> "vector::mutable::int16":w;
      "array::mutable::int16":e -> "vector::mutable::int16":w;
      "matrix::integer":e -> "matrix::int16":w;
      "array::int16":e -> "matrix::int16":w;
      "matrix::int16":e -> "matrix::mutable::int16":w;
      "matrix::mutable::integer":e -> "matrix::mutable::int16":w;
      "array::mutable::int16":e -> "matrix::mutable::int16":w;
      "array::integer":e -> "array::uint32":w;
      "array::uint32":e -> "array::mutable::uint32":w;
      "array::mutable::integer":e -> "array::mutable::uint32":w;
      "vector::integer":e -> "vector::uint32":w;
      "array::uint32":e -> "vector::uint32":w;
      "vector::uint32":e -> "vector::mutable::uint32":w;
      "vector::mutable::integer":e -> "vector::mutable::uint32":w;
      "array::mutable::uint32":e -> "vector::mutable::uint32":w;
      "matrix::integer":e -> "matrix::uint32":w;
      "array::uint32":e -> "matrix::uint32":w;
      "matrix::uint32":e -> "matrix::mutable::uint32":w;
      "matrix::mutable::integer":e -> "matrix::mutable::uint32":w;
      "array::mutable::uint32":e -> "matrix::mutable::uint32":w;
      "array::integer":e -> "array::int32":w;
      "array::int32":e -> "array::mutable::int32":w;
      "array::mutable::integer":e -> "array::mutable::int32":w;
      "vector::integer":e -> "vector::int32":w;
      "array::int32":e -> "vector::int32":w;
      "vector::int32":e -> "vector::mutable::int32":w;
      "vector::mutable::integer":e -> "vector::mutable::int32":w;
      "array::mutable::int32":e -> "vector::mutable::int32":w;
      "matrix::integer":e -> "matrix::int32":w;
      "array::int32":e -> "matrix::int32":w;
      "matrix::int32":e -> "matrix::mutable::int32":w;
      "matrix::mutable::integer":e -> "matrix::mutable::int32":w;
      "array::mutable::int32":e -> "matrix::mutable::int32":w;
      "array::integer":e -> "array::uint64":w;
      "array::uint64":e -> "array::mutable::uint64":w;
      "array::mutable::integer":e -> "array::mutable::uint64":w;
      "vector::integer":e -> "vector::uint64":w;
      "array::uint64":e -> "vector::uint64":w;
      "vector::uint64":e -> "vector::mutable::uint64":w;
      "vector::mutable::integer":e -> "vector::mutable::uint64":w;
      "array::mutable::uint64":e -> "vector::mutable::uint64":w;
      "matrix::integer":e -> "matrix::uint64":w;
      "array::uint64":e -> "matrix::uint64":w;
      "matrix::uint64":e -> "matrix::mutable::uint64":w;
      "matrix::mutable::integer":e -> "matrix::mutable::uint64":w;
      "array::mutable::uint64":e -> "matrix::mutable::uint64":w;
      "array::integer":e -> "array::int64":w;
      "array::int64":e -> "array::mutable::int64":w;
      "array::mutable::integer":e -> "array::mutable::int64":w;
      "vector::integer":e -> "vector::int64":w;
      "array::int64":e -> "vector::int64":w;
      "vector::int64":e -> "vector::mutable::int64":w;
      "vector::mutable::integer":e -> "vector::mutable::int64":w;
      "array::mutable::int64":e -> "vector::mutable::int64":w;
      "matrix::integer":e -> "matrix::int64":w;
      "array::int64":e -> "matrix::int64":w;
      "matrix::int64":e -> "matrix::mutable::int64":w;
      "matrix::mutable::integer":e -> "matrix::mutable::int64":w;
      "array::mutable::int64":e -> "matrix::mutable::int64":w;
      "array::real":e -> "array::float32":w;
      "array::float32":e -> "array::mutable::float32":w;
      "array::mutable::real":e -> "array::mutable::float32":w;
      "vector::real":e -> "vector::float32":w;
      "array::float32":e -> "vector::float32":w;
      "vector::float32":e -> "vector::mutable::float32":w;
      "vector::mutable::real":e -> "vector::mutable::float32":w;
      "array::mutable::float32":e -> "vector::mutable::float32":w;
      "matrix::real":e -> "matrix::float32":w;
      "array::float32":e -> "matrix::float32":w;
      "matrix::float32":e -> "matrix::mutable::float32":w;
      "matrix::mutable::real":e -> "matrix::mutable::float32":w;
      "array::mutable::float32":e -> "matrix::mutable::float32":w;
      "array::real":e -> "array::float64":w;
      "array::float64":e -> "array::mutable::float64":w;
      "array::mutable::real":e -> "array::mutable::float64":w;
      "vector::real":e -> "vector::float64":w;
      "array::float64":e -> "vector::float64":w;
      "vector::float64":e -> "vector::mutable::float64":w;
      "vector::mutable::real":e -> "vector::mutable::float64":w;
      "array::mutable::float64":e -> "vector::mutable::float64":w;
      "matrix::real":e -> "matrix::float64":w;
      "array::float64":e -> "matrix::float64":w;
      "matrix::float64":e -> "matrix::mutable::float64":w;
      "matrix::mutable::real":e -> "matrix::mutable::float64":w;
      "array::mutable::float64":e -> "matrix::mutable::float64":w;
      "array::complex":e -> "array::complex32":w;
      "array::complex32":e -> "array::mutable::complex32":w;
      "array::mutable::complex":e -> "array::mutable::complex32":w;
      "vector::complex":e -> "vector::complex32":w;
      "array::complex32":e -> "vector::complex32":w;
      "vector::complex32":e -> "vector::mutable::complex32":w;
      "vector::mutable::complex":e -> "vector::mutable::complex32":w;
      "array::mutable::complex32":e -> "vector::mutable::complex32":w;
      "matrix::complex":e -> "matrix::complex32":w;
      "array::complex32":e -> "matrix::complex32":w;
      "matrix::complex32":e -> "matrix::mutable::complex32":w;
      "matrix::mutable::complex":e -> "matrix::mutable::complex32":w;
      "array::mutable::complex32":e -> "matrix::mutable::complex32":w;
      "array::complex":e -> "array::complex64":w;
      "array::complex64":e -> "array::mutable::complex64":w;
      "array::mutable::complex":e -> "array::mutable::complex64":w;
      "vector::complex":e -> "vector::complex64":w;
      "array::complex64":e -> "vector::complex64":w;
      "vector::complex64":e -> "vector::mutable::complex64":w;
      "vector::mutable::complex":e -> "vector::mutable::complex64":w;
      "array::mutable::complex64":e -> "vector::mutable::complex64":w;
      "matrix::complex":e -> "matrix::complex64":w;
      "array::complex64":e -> "matrix::complex64":w;
      "matrix::complex64":e -> "matrix::mutable::complex64":w;
      "matrix::mutable::complex":e -> "matrix::mutable::complex64":w;
      "array::mutable::complex64":e -> "matrix::mutable::complex64":w;
      "array":e -> "array::any":w;
      "array::any":e -> "array::mutable::any":w;
      "array::mutable":e -> "array::mutable::any":w;
      "vector":e -> "vector::any":w;
      "array::any":e -> "vector::any":w;
      "vector::any":e -> "vector::mutable::any":w;
      "vector::mutable":e -> "vector::mutable::any":w;
      "array::mutable::any":e -> "vector::mutable::any":w;
      "matrix":e -> "matrix::any":w;
      "array::any":e -> "matrix::any":w;
      "matrix::any":e -> "matrix::mutable::any":w;
      "matrix::mutable":e -> "matrix::mutable::any":w;
      "array::mutable::any":e -> "matrix::mutable::any":w;
   }

