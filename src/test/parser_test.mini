import: gtk("gir/Gtk@3.0")
import: gtksource("gir/GtkSource@4")
import: pango("gir/Pango")
import: glib("gir/GLib")

gtk::init(nil, nil)

fun describe(Buffer, Indent, Expr) do
	switch Expr: type
	case ast::names do
		Buffer:write("<names> ", Expr)
	case list do
		if Expr:length > 0 then
			Buffer:write("[")
			for I, Value in Expr do
				Buffer:write("\n", Indent + "- ")
				describe(Buffer, Indent + " ", Value)
			end
			Buffer:write('\n{Indent}]')
		else
			Buffer:write("[]")
		end
	case ast::expr do
		Buffer:write('{type(Expr)} [{Expr:startline} .. {Expr:endline}] \{')
		for Field in type(Expr):fields do
			if not Field in :({:startline, :endline, :source}) then
				Buffer:write('\n{Indent}| <{Field:name}> ')
				describe(Buffer, Indent + "| ", Field(Expr))
			end
		end
		Buffer:write('\n{Indent}}')
	case object do
		Buffer:write('{type(Expr)} \{')
		for Field in type(Expr):fields do
			Buffer:write('\n{Indent}  <{Field:name}> ')
			describe(Buffer, Indent + "| ", Field(Expr))
		end
		Buffer:write('\n{Indent}}')
	else
		Buffer:write(Expr)
	end
end

:>gir::install()
	
let Config := glib::KeyFile::new()
Config:load_from_file(glib::get_user_config_dir() + "/minilang.conf", glib::KeyFileFlags::none)

let Window := gtk::Window::new(gtk::WindowType::toplevel)
let HPaned := gtk::Paned::new(gtk::Orientation::horizontal)
let VPaned := gtk::Paned::new(gtk::Orientation::vertical)

let Font := do
	pango::font_description_from_string(Config:get_value("gtk-console", "font"))
on Error do
	pango::font_description_from_string("Fira Code Retina 10")
end

let LanguageManager := gtksource::LanguageManager::get_default()
let Language := LanguageManager:get_language("minilang")

let StyleManager := gtksource::StyleSchemeManager::get_default()
let Style := do
	StyleManager:get_scheme(Config:get_value("gtk-console", "style"))
on Error do
	nil
end

let Buffer := gtksource::Buffer::new_with_language(Language)
Style and Buffer:set_style_scheme(Style)
let Editor := gtksource::View::new_with_buffer(Buffer)
Editor:set_tab_width(4)
Editor:override_font(Font)
Editor:set_show_line_numbers(true)
let EditorScrolled := gtk::ScrolledWindow::new(nil, nil)
EditorScrolled:add(Editor)
VPaned:add(EditorScrolled)
let WarningView := gtk::TextView::new()
VPaned:add(WarningView)
HPaned:add(VPaned)

let Output := gtk::TextView::new()
Output:set_wrap_mode(gtk::WrapMode::char)
Output:override_font(Font)
Output:set_editable(false)
Output:set_cursor_visible(false)
let OutputScrolled := gtk::ScrolledWindow::new(nil, nil)
OutputScrolled:add(Output)
HPaned:add(OutputScrolled)

VPaned:set_position(600)
HPaned:set_position(400)
Window:add(HPaned)
Window:set_default_size(800, 800)
Window:show_all

Editor:grab_focus

let EditBuffer := Editor:get_buffer
let OutputBuffer := Output:get_buffer
let WarningBuffer := WarningView:get_buffer

EditBuffer:connect("changed"; Buffer) do
	let Start := gtk::TextIter()
	let End := gtk::TextIter()
	Buffer:get_bounds(Start, End)
	let Text := Buffer:get_text(Start, End, false)
	let P := parser()
	P:permissive(true)
	P:source("test", 0)
	P:input(Text)
	let Expr := P:parse:ast
	let Warnings := P:warnings
	:>OutputBuffer:set_text(string(Expr), -1)
	print('Expr = {Expr}\n')
	print('Warnings = {Warnings}\n')
	let Desc := string::buffer()
	describe(Desc, "", Expr)
	OutputBuffer:set_text(Desc:rest, -1)
	WarningBuffer:set_text(Warnings:join("\n"), -1)
on Error do
	OutputBuffer:set_text(string(Error), -1)
end

gtk::main()
