if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CC_TYPE := switch shell(CC, "--version"): string
case r"\(GCC\) [0-9.]+" do
	"GCC"
case r"clang version [0-9.]+" do
	"CLANG"
else
	"OTHER"
end

CFLAGS := old + [
	"-momit-leaf-frame-pointer",
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-fno-stack-protector",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-Werror=format-security",
	:>"-Wsuggest-attribute=pure",
	:>"-Wsuggest-attribute=const",
	:>"-Wsuggest-attribute=noreturn",
	:>"-Wsuggest-attribute=malloc",
	'-I.', "-pthread",
	"-DGC_THREADS",
	"-D_GNU_SOURCE",
	'-D{PLATFORM}'
]
LDFLAGS := old + ["-lm"]

if defined("ANALYZER") then
	CFLAGS:put("-fanalyzer")
end

if defined("LTO") then
	CFLAGS:put("-flto")
	LDFLAGS:put("-flto")
end

GC_DEBUG := defined("GC_DEBUG")

if DEBUG then
	CFLAGS := old + ["-O1", "-g", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
	GC_DEBUG and CFLAGS:put("-DGC_DEBUG")
elseif GC_DEBUG then
	CFLAGS := old + ["-O3", "-g", "-DGC_DEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-g"]
	LDFLAGS := old + ["-g"]
end

print('CC_TYPE = {CC_TYPE}\n')

if CC_TYPE = "GCC" then
	CFLAGS := old + [
		"-march=native",
		"-mtune=native",
		"-mno-sse2",
		"-mno-align-stringops",
		"-minline-all-stringops",
		"-fcf-protection=none",
		"-Werror=cast-function-type",
		"-fno-tree-loop-distribute-patterns"
	]
	if not DEBUG then
		CFLAGS := old + ["-fexpensive-optimizations"]
	end
elseif CC_TYPE = "CLANG" then
	CFLAGS := old + [
		:>"-Werror=bad-function-cast",
		"-Wno-initializer-overrides"
	]
end

PREBUILDS := old + [file("ml_config.h")]
INIT_HEADERS := [file("ml_types.h")]

fun generate_init_file(Source) do
	let InitFile := string(Source):replace(".c", "_init.c")
	let Target := file(InitFile)[Source, PREBUILDS, INIT_HEADERS] => fun() do
		Target:open("w"):close
		let Init := shell(CC, CFLAGS, "-E -P -DGENERATE_INIT", Source)
		let Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				let I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				let J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

PARENT."generate_init_file" := generate_init_file

fun generate_init_files() do
	for Source in PATH:ls(".*\\.c", :R) do
		Source:basename:find("_init") and next
		generate_init_file(Source)
	end
end

PARENT."generate_init_files" := generate_init_files

generate_init_files()

let Objects := [
	file("inthash.o"),
	file("ml_bytecode.o"),
	file("ml_compiler.o"),
	file("ml_tasks.o"),
	file("ml_console.o"),
	file("ml_debugger.o"),
	file("ml_file.o"),
	file("ml_list.o"),
	:>file("ml_list2.o"),
	file("ml_map.o"),
	file("ml_method.o"),
	file("ml_number.o"),
	file("ml_object.o"),
	file("ml_opcodes.o"),
	file("ml_runtime.o"),
	file("ml_sequence.o"),
	file("ml_set.o"),
	file("ml_socket.o"),
	file("ml_stream.o"),
	file("ml_string.o"),
	file("ml_types.o"),
	file("ml_unique.o"),
	file("sha256.o"),
	file("stringmap.o")
]

let Libraries := []

let InstallHeaders := [
	"ml_config.h",
	"inthash.h",
	"minilang.h",
	"ml_bytecode.h",
	"ml_compiler.h",
	"ml_tasks.h",
	"ml_console.h",
	"ml_file.h",
	"ml_macros.h",
	"ml_object.h",
	"ml_opcodes.h",
	"ml_runtime.h",
	"ml_sequence.h",
	"ml_stream.h",
	"ml_types.h",
	"stringmap.h"
]

var GC

if MINILANG_STATICGC or defined("STATICGC") then
	let Dir := file("gc")
	let Lib := file("gc/.libs/libgc.a") => fun(Lib) do
		Dir:rmdir:mkdir:chdir
		execute("wget https://github.com/ivmai/bdwgc/releases/download/v8.2.4/gc-8.2.4.tar.gz -O- | tar xvzP --strip-components=1")
		let Configuration := {
			"--prefix" is PATH,
			"--enable-static",
			"--disable-shared",
			:>"--disable-parallel-mark",
			"--enable-threads=pthreads",
			:>"--enable-large-config",
			:>"--enable-redirect-malloc",
			"--enable-mmap"
		}
		if GC_DEBUG then
			Configuration:insert("--enable-gc-debug", not nil)
		end
		execute('CC={CC} ./configure', Configuration)
		execute("make clean")
		execute("make -j4")
		execute("make install")
	end
	GC := Lib
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{PATH / "include"}']
	Libraries:put(Lib)
	:>LDFLAGS := old + ['-L{PATH / "lib"}', '-pthread']
end

if MINILANG_DEFAULTS or defined("DEFAULTS") then
	MINILANG_TABLES := 1
	MINILANG_MATH := 1
	MINILANG_AST := 1
	MINILANG_COMPLEX := not defined("NOCOMPLEX")
	MINILANG_CBOR := 1
	MINILANG_JSON := 1
	MINILANG_XML := 1
	MINILANG_LIBRARY := not defined("NOSCHEDULER")
	MINILANG_SCHEDULER := not defined("NOSCHEDULER")
	MINILANG_TRE := not defined("NOTRE")
	MINILANG_GENERICS := not defined("NOGENERICS")
	MINILANG_MUTABLES := 1
	MINILANG_PQUEUES := 1
	MINILANG_TIME := 1
	MINILANG_UUID := 1
	MINILANG_ICU := 1
	MINILANG_ENCODINGS := 1
	if PLATFORM = "Linux" and MACHINE = "x86_64" then
		MINILANG_NANBOXING := not defined("NONANBOXING")
	end
end

MINILANG_TABLES := old or defined("TABLES")
MINILANG_MATH := MINILANG_TABLES or old or defined("MATH")
MINILANG_AST := old or defined("AST")
MINILANG_COMPLEX := old or defined("COMPLEX")
MINILANG_GIR_BYTECODE := old or defined("GIR_BYTECODE")
MINILANG_GIR := MINILANG_GIR_BYTECODE or old or defined("GIR")
MINILANG_CBOR := old or defined("CBOR")
MINILANG_JSON := old or defined("JSON")
MINILANG_XML := old or defined("XML")
MINILANG_XE := old or defined("XE")
MINILANG_LIBRARY := old or defined("LIBRARY")
MINILANG_MODULES := MINILANG_LIBRARY or old or defined("MODULES")
MINILANG_SCHEDULER := MINILANG_MODULES or old or defined("SCHEDULER") or defined("THREADS")
MINILANG_THREADS := old or defined("THREADS")
MINILANG_THREADSAFE := MINILANG_THREADS or old or defined("THREADSAFE")
MINILANG_JIT := old or defined("JIT")
MINILANG_NANBOXING := old or defined("NANBOXING")
MINILANG_TRE := old or defined("TRE")
MINILANG_GENERICS := old or defined("GENERICS")
MINILANG_MUTABLES := old or defined("MUTABLES")
MINILANG_PQUEUES := old or defined("PQUEUES")
MINILANG_TIMEZONES := old or defined("TIMEZONES")
MINILANG_TIME := old or MINILANG_TIMEZONES or defined("TIME")
MINILANG_UUID := old or defined("UUID")
MINILANG_ICU := old or defined("ICU")
MINILANG_LIBS := old or defined("LIBS")
MINILANG_BACKTRACE := old or defined("BACKTRACE")
MINILANG_MINIJS := old or defined("MINIJS")
MINILANG_RELAX_NAMES := old or defined("RELAX_NAMES")
MINILANG_GTK_CONSOLE := old or defined("GTK_CONSOLE")
MINILANG_COROUTINES := old or defined("COROUTINES")
MINILANG_ENCODINGS := old or defined("ENCODINGS")
MINILANG_STRUCTS := old or defined("STRUCTS")

file("ml_config.h") => fun(Target) do
	let File := Target:open("w")
	File:write("#ifndef ML_CONFIG_H\n")
	File:write("#define ML_CONFIG_H\n")
	if MINILANG_MODULES then
		File:write("\n#define ML_MODULES\n")
	end
	if MINILANG_SCHEDULER then
		File:write("\n#define ML_SCHEDULER\n")
	end
	if MINILANG_NANBOXING then
		File:write("\n#define ML_NANBOXING\n")
	end
	if MINILANG_COMPLEX then
		File:write("\n#define ML_COMPLEX\n")
	end
	if MINILANG_GENERICS then
		File:write("\n#define ML_GENERICS\n")
	end
	if MINILANG_MUTABLES then
		File:write("\n#define ML_MUTABLES\n")
	end
	if MINILANG_THREADSAFE then
		File:write("\n#define ML_THREADSAFE\n")
	end
	if MINILANG_THREADS then
		File:write("\n#define ML_THREADS\n")
	end
	if MINILANG_RELAX_NAMES then
		File:write("\n#define ML_RELAX_NAMES\n")
	end
	File:write("\n#endif")
	File:close
end

if defined("ASSERTS") then
	CFLAGS := old + ["-DML_ASSERTS"]
end

if MINILANG_TABLES then
	Objects:put(file("ml_table.o"))
	CFLAGS := old + ["-DML_TABLES"]
	InstallHeaders:put("ml_table.h")
end

if MINILANG_MATH then
	file("array"):mkdir
	Objects:put(
		file("array/compare_cmp.o"),
		file("array/compare_eq.o"),
		file("array/compare_ge.o"),
		file("array/compare_gt.o"),
		file("array/compare_le.o"),
		file("array/compare_lt.o"),
		file("array/compare_ne.o"),
		file("array/update_add.o"),
		file("array/update_and.o"),
		file("array/update_div.o"),
		file("array/update_max.o"),
		file("array/update_min.o"),
		file("array/update_mul.o"),
		file("array/update_or.o"),
		file("array/update_set.o"),
		file("array/update_sub.o"),
		file("array/update_xor.o"),
		file("ml_array.o"),
		file("ml_math.o"),
		file("ml_polynomial.o")
	)
	CFLAGS := old + ["-DML_MATH"]
	InstallHeaders:put("ml_array.h")
	InstallHeaders:put("ml_math.h")
	InstallHeaders:put("ml_polynomial.h")
end

if MINILANG_AST then
	Objects:put(file("ml_ast.o"))
	CFLAGS := old + ["-DML_AST"]
	InstallHeaders:put("ml_ast.h")
end

if MINILANG_GTK_CONSOLE then
	MINILANG_GIR := 1
	Objects:put(file("gtk_console.o"), file("gtk_console_completion.o"))
	CFLAGS := old + ["-DML_GTK_CONSOLE", pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4")]
	LDFLAGS := old + [pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4")]
	InstallHeaders:put("gtk_console.h")
end

if MINILANG_GIR then
	Objects:put(file("ml_gir.o"))
	CFLAGS := old + ["-DML_GIR", pkgconfig("--cflags gobject-introspection-1.0")]
	LDFLAGS := old + [pkgconfig("--libs gobject-introspection-1.0 gio-2.0")]
	InstallHeaders:put("ml_gir.h")
end

if MINILANG_GIR_BYTECODE then
	CFLAGS := old + ["-DML_GIR_BYTECODE"]
end

if MINILANG_LIGHTNING or defined("LIGHTNING") then
	let Dir := file("lightning")
	let Lib := file("lightning/lib/.libs/liblightning.a") => fun(Lib) do
		Dir:rmdir:mkdir:chdir
		execute("wget https://ftp.gnu.org/gnu/lightning/lightning-2.1.4.tar.gz -O- | tar xvzP --strip-components=1")
		execute('CC={CC} ./configure', {
			"--prefix" is PATH,
			"--enable-static",
			"--disable-shared"
		})
		execute("make clean")
		execute("make -j4")
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{Dir / "includes"}', "-DML_LIGHTNING"]
	LDFLAGS := old + [Lib]
end

if MINILANG_CBOR then
	let Minicbor := meta("minicbor";) do
		let Dir := PATH/"minicbor"
		Dir:rmdir
		execute("git clone -b dev https://github.com/rajamukherji/minicbor.git", Dir)
		Dir:chdir
		execute("git checkout 22661fb")
	end
	PREBUILDS := old + [Minicbor]
	CFLAGS := old + ["-DML_CBOR"]
	Objects:put(file("ml_cbor.o"))
	InstallHeaders:put("ml_cbor.h")
end

if MINILANG_JSON then
	CFLAGS := old + ['-DML_JSON']
	Objects:put(file("ml_json.o"))
	InstallHeaders:put("ml_json.h")
end

if MINILANG_XML then
	CFLAGS := old + ['-DML_XML']
	LDFLAGS := old + ["-lexpat"]
	Objects:put(file("ml_xml.o"))
	InstallHeaders:put("ml_xml.h")
end

if MINILANG_XE then
	CFLAGS := old + ['-DML_XE']
	Objects:put(file("ml_xe.o"))
	InstallHeaders:put("ml_xe.h")
end

if MINILANG_STRUCTS then
	CFLAGS := old + ["-DML_STRUCT"]
	Objects:put(file("ml_struct.o"))
end

if MINILANG_BACKTRACE then
	let Dir := PATH / "libbacktrace"
	let Lib := Dir / ".libs/libbacktrace.a" => fun() do
		Dir:rmdir
		execute("git clone https://github.com/ianlancetaylor/libbacktrace.git", Dir)
		Dir:chdir
		execute("./configure")
		execute("make clean")
		execute("make -j4")
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-DML_BACKTRACE', '-I{Dir}']
	LDFLAGS := old + [Lib, "-lunwind"]
end

if MINILANG_LIBRARY then
	CFLAGS := old + ['-DML_LIBRARY']
	Objects:put(file("ml_library.o"), file("whereami.o"))
	InstallHeaders:put("ml_library.h")
end

if MINILANG_MODULES then
	LDFLAGS := old + ["-ldl"]
	Objects:put(file("ml_module.o"))
	InstallHeaders:put("ml_module.h")
end

if MINILANG_THREADS then
	LDFLAGS := old + ["-pthread"]
	Objects:put(file("ml_thread.o"))
	InstallHeaders:put("ml_thread.h")
end

if MINILANG_COROUTINES then
	Objects:put(file("ml_coroutine.o"), file("coro.o"))
	InstallHeaders:put("ml_coroutine.h")
end

if MINILANG_JIT then
	let Source := file("ml_bytecode_x64.dasc")
	file("ml_bytecode_x64.c")[Source] => fun(Target) do
		execute("lua5.2", file("dynasm/dynasm.lua"), "-o", Target, Source)
	end
	Objects:put(file("ml_bytecode_x64.o"))
	CFLAGS := old + ["-DML_JIT", "-I", Source:dirname]
	LDFLAGS := old + ["-lZydis"]
end

if PLATFORM = "Linux" and MACHINE = "x86_64" and CC != "clang" then
	Objects:put(file("inthash_x64.o"))
	CFLAGS := old + ["-DASM_INTHASH_SEARCH"]
end

if MINILANG_TRE then
	let Dir := file("tre")
	let Lib := file("tre/lib/.libs/libtre.a")[GC] => fun(Lib) do
		Dir:rmdir:mkdir:chdir
		execute("wget http://laurikari.net/tre/tre-0.8.0.tar.gz -O- | tar xvzPf - --strip-components=1")
		execute("patch", "-p0", "-i", file("tre.patch"))
		let XMallocH := file("tre/lib/xmalloc.h"):open("w")
		XMallocH:write(
'#ifndef XMALLOC_H
#define XMALLOC_H

#include <gc/gc.h>

#define xmalloc(N) GC_malloc(N)
#define xcalloc(C, N) GC_malloc((C) * (N))
#define xrealloc(P, N) GC_realloc(P, N)
#define xfree(P)

#endif
')
		XMallocH:close
		let XmallocC := file("tre/lib/xmalloc.c"):open("w"):close
		execute('CC={CC} CFLAGS=\"{CFLAGS}\" ./configure', {
			"--prefix" is PATH,
			"--enable-static",
			"--enable-multibyte",
			"--enable-wchar",
			"--disable-shared"
		})
		:>execute("sed -i s/HAVE_WCTYPE/HAVE_WCTYPE_OFF/g config.h")
		execute("make clean")
		execute("make -j4 -C lib")
		execute('make -j4 -C lib PREFIX={PATH} install')
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ["-DML_TRE"]
	Libraries:put(Lib)
end

if MINILANG_PQUEUES then
	Objects:put(file("ml_pqueue.o"))
	CFLAGS := old + ["-DML_PQUEUES"]
	InstallHeaders:put("ml_pqueue.h")
end

if MINILANG_TIME then
	Objects:put(file("ml_time.o"))
	CFLAGS := old + ["-DML_TIME"]
	InstallHeaders:put("ml_time.h")
end

if MINILANG_TIMEZONES then
	let Header := file("timelib_mem.h")
	let Lib := file("timelib/timelib.a")[GC, Header] => fun(Target) do
		file("timelib"):rmdir
		execute("git clone https://github.com/derickr/timelib.git", Dir)
		file("timelib"):chdir
		let Flags := '\"{CFLAGS} -DHAVE_STDINT_H -DHAVE_GETTIMEOFDAY -DHAVE_UNISTD_H -DHAVE_DIRENT_H -I. --include {Header}\"'
		execute('make timelib.a CFLAGS={Flags} CPPFLAGS={Flags}')
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ["-DML_TIMEZONES"]
	Libraries:put(Lib)
end

if MINILANG_UUID then
	Objects:put(file("ml_uuid.o"))
	CFLAGS := old + ["-DML_UUID"]
	LDFLAGS := old + ["-luuid"]
	InstallHeaders:put("ml_uuid.h")
end

if MINILANG_ICU then
	CFLAGS := old + ["-DML_ICU"]
	LDFLAGS := old + ["-licuuc"]
end

if MINILANG_MINIJS then
	Objects:put(file("ml_minijs.o"))
	CFLAGS := old + ["-DML_MINIJS"]
	LDFLAGS := old + ["-ljansson"]
	InstallHeaders:put("ml_minijs.h")
end

if MINILANG_ENCODINGS then
	Objects:put(file("ml_base16.o"), file("ml_base64.o"))
	CFLAGS := old + ["-DML_ENCODINGS"]
	InstallHeaders:put("ml_base16.h", "ml_base64.h")
end

if PLATFORM = "Linux" then
	Objects:put(file("linenoise.o"))
	GC or LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-I/usr/local/include"]
	GC or LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects:put(file("linenoise.o"))
	GC or LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

LIBMINILANG := c_library(LIB_DIR / "libminilang.a", Objects, Libraries)
MINILANG := c_program(BIN_DIR / "minilang", [file("minilang.o")], [LIBMINILANG])
MINIDBG := (BIN_DIR / "minidbg")[file("minidbg")] => fun(Target) do
	file("minidbg"):copy(Target)
	execute("chmod", "+x", Target)
end
MINIPP := c_program(BIN_DIR / "minipp", [file("minipp.o")], [LIBMINILANG])

if PLATFORM = "Linux" then
	let Exports := file("exports.lst")
	MINILANG[Exports]
	LDFLAGS := old + ["-ldl", '-Wl,--dynamic-list={Exports}']
end

DEFAULT[LIBMINILANG, MINILANG, MINIDBG, MINIPP]

PARENT."LIBMINILANG" := LIBMINILANG

let InstallBin := PREFIX / "bin"
let InstallInclude := PREFIX / "include/minilang"
let InstallLib := PREFIX / "lib"

install(MINILANG, InstallBin / "minilang", "+x")
install(MINIDBG, InstallBin / "minidbg", "+x")

for Header in InstallHeaders do
	install(file(Header), InstallInclude / Header)
end

install(LIBMINILANG, InstallLib / "libminilang.a")

subdir("test")
