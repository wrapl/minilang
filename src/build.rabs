if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CC_TYPE := switch shell(CC, "--version"): string
case r"\(GCC\) [0-9.]+" do
	"GCC"
case r"clang version [0-9.]+" do
	"CLANG"
case r"emcc" do
	"CLANG"
else
	"OTHER"
end

CFLAGS := old + [
	"-momit-leaf-frame-pointer",
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-fno-stack-protector",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-Werror=format-security",
	"-Wno-format-zero-length",
	:>"-Wsuggest-attribute=pure",
	:>"-Wsuggest-attribute=const",
	:>"-Wsuggest-attribute=noreturn",
	:>"-Wsuggest-attribute=malloc",
	'-I.', '-I{PATH / "include"}',
	"-D_GNU_SOURCE",
	'-D{PLATFORM}'
]
LDFLAGS := old + ["-lm"]

if PLATFORM != "Wasm" then
	CFLAGS := old + ["-pthread", "-DGC_THREADS"]
end

if defined("ANALYZER") then
	CFLAGS:put("-fanalyzer")
end

if defined("LTO") then
	CFLAGS:put("-flto")
	LDFLAGS:put("-flto")
end

GC_DEBUG := defined("GC_DEBUG")
GC_BACKTRACE := defined("GC_BACKTRACE")

if DEBUG then
	CFLAGS := old + ["-O1", "-g", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
	GC_DEBUG and CFLAGS:put("-DGC_DEBUG")
elseif GC_DEBUG then
	CFLAGS := old + ["-O3", "-g", "-DGC_DEBUG"]
	LDFLAGS := old + ["-g"]
elseif GC_BACKTRACE then
	CFLAGS := old + ["-O3", "-g", "-DGC_BACKTRACE"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-g"]
	LDFLAGS := old + ["-g"]
end

print('CC_TYPE = {CC_TYPE}\n')

EXT_CFLAGS := CFLAGS + []

if CC_TYPE = "GCC" then
	CFLAGS := old + [
		"-march=native",
		"-mtune=native",
		"-mno-sse2",
		"-mno-align-stringops",
		"-minline-all-stringops",
		"-fcf-protection=none",
		"-Werror=cast-function-type",
		"-fno-tree-loop-distribute-patterns"
	]
	if not DEBUG then
		CFLAGS := old + ["-fexpensive-optimizations"]
	end
elseif CC_TYPE = "CLANG" then
	CFLAGS := old + [
		:>"-Werror=bad-function-cast",
		"-fcf-protection=none",
		"-finline-max-stacksize=64",
		"-Wno-initializer-overrides"
	]
end

PREBUILDS := old + [file("ml_config.h")]
INIT_HEADERS := [file("ml_types.h")]

fun generate_init_file(Source) do
	let InitFile := string(Source):replace(".c", "_init.c")
	let Target := file(InitFile)[Source, PREBUILDS, INIT_HEADERS] => fun() do
		Target:open("w"):close
		let Init := shell(CC, CFLAGS, "-E -P -DGENERATE_INIT", Source)
		let Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				let I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				let J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

PARENT."generate_init_file" := generate_init_file

fun generate_init_files(Path := PATH) do
	for Source in Path:ls(".*\\.c") do
		Source:basename:find("_init") and next
		generate_init_file(Source)
	end
end

PARENT."generate_init_files" := generate_init_files

generate_init_files(PATH)
generate_init_files(PATH / "array")

let Objects := [
	file("inthash.o"),
	file("ml_bytecode.o"),
	file("ml_compiler.o"),
	file("ml_tasks.o"),
	file("ml_console.o"),
	file("ml_debugger.o"),
	file("ml_file.o"),
	file("ml_list.o"),
	file("ml_logging.o"),
	file("ml_map.o"),
	file("ml_method.o"),
	file("ml_number.o"),
	file("ml_object.o"),
	file("ml_opcodes.o"),
	file("ml_runtime.o"),
	file("ml_sequence.o"),
	file("ml_set.o"),
	file("ml_slice.o"),
	file("ml_socket.o"),
	file("ml_stream.o"),
	file("ml_string.o"),
	file("ml_time.o"),
	file("ml_types.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("weakmap.o")
]

let Libraries := []

let InstallHeaders := [
	"ml_config.h",
	"inthash.h",
	"minilang.h",
	"ml_bytecode.h",
	"ml_compiler.h",
	"ml_tasks.h",
	"ml_console.h",
	"ml_debugger.h",
	"ml_file.h",
	"ml_logging.h",
	"ml_macros.h",
	"ml_object.h",
	"ml_opcodes.h",
	"ml_runtime.h",
	"ml_sequence.h",
	"ml_stream.h",
	"ml_time.h",
	"ml_types.h",
	"stringmap.h",
	"weakmap.h"
]

let Options := [
	"TABLES",
	"MATH",
	"AST",
	"COMPLEX",
	"RATIONAL",
	"CBOR",
	"JSON",
	"XML",
	"XE",
	"LIBRARY",
	"MODULES",
	"SCHEDULER",
	"THREADS",
	"THREADSAFE",
	"JIT",
	"NANBOXING",
	"TRE",
	"GENERICS",
	"MUTABLES",
	"PQUEUES",
	"TIMEZONES",
	"UUID",
	"ICU",
	"LIBS",
	"UNWIND",
	"BACKTRACE",
	"MINIJS",
	"COROUTINES",
	"ENCODINGS",
	"STRUCTS",
	"MMAP",
	"STRINGCACHE",
	"STATICGC"
]

if MACHINE = "x86" then
	MINILANG_TRAMPOLINE := 1
end

MINILANG_DEFAULTS := if some(Options ->? defined) then nil else 1 end

if MINILANG_DEFAULTS or defined("DEFAULTS") then
	MINILANG_TABLES := 1
	MINILANG_MATH := 1
	MINILANG_AST := 1
	MINILANG_COMPLEX := not defined("NOCOMPLEX")
	MINILANG_CBOR := 1
	MINILANG_JSON := 1
	MINILANG_XML := 1
	MINILANG_MINIJS := 1
	MINILANG_LIBRARY := not defined("NOSCHEDULER")
	MINILANG_SCHEDULER := not defined("NOSCHEDULER")
	MINILANG_TIMESCHED := not defined("NOTIMESCHED")
	MINILANG_TRE := not defined("NOTRE")
	MINILANG_GENERICS := not defined("NOGENERICS")
	MINILANG_MUTABLES := 1
	MINILANG_PQUEUES := 1
	MINILANG_UUID := 1
	MINILANG_ICU := 1
	MINILANG_ENCODINGS := 1
	MINILANG_TIMEZONES := 1
	MINILANG_XE := 1
	MINILANG_STRINGCACHE := not defined("NOSTRINGCACHE")
	MINILANG_STATICGC := not defined("NOSTATICGC")
	MINILANG_BACKTRACE := not defined("NOBACKTRACE")
	if PLATFORM = "Linux" then
		MINILANG_UNWIND := 1
	end
	if PLATFORM != "Wasm" then
		MINILANG_THREADS := not defined("NOTHREADS")
	end
	if PLATFORM = "Linux" and MACHINE = "x86_64" then
		MINILANG_NANBOXING := not defined("NONANBOXING")
		MINILANG_MMAP := 1
		:>MINILANG_CONTEXT_SECTION := not defined("NOCONTEXTSECTION")
	end
end

var GC

if MINILANG_STATICGC or defined("STATICGC") then
	NOPARALLELMARK := defined("NOPARALLELMARK")
	file("gc"):mkdir
	let Lib := file("lib/libgc.a")[file("gc/ChangeLog")] => fun(Lib) do
		file("gc"):chdir
		let Configuration := {
			"--prefix" is PATH,
			"--enable-static",
			"--disable-shared",
			:>"--disable-parallel-mark",
			"--enable-large-config",
			:>"--enable-redirect-malloc",
			"--enable-cplusplus",
			"--enable-mmap"
		}
		if PLATFORM != "Wasm" then
			Configuration["--enable-threads=pthreads"] := some
		end
		if NOPARALLELMARK then
			Configuration["--disable-parallel-mark"] := some
		end
		if GC_DEBUG or GC_BACKTRACE then
			Configuration:grow({
				"--enable-gc-debug",
				:>"--enable-gc-assertions",
				"--disable-thread-local-alloc"
			})
		end
		execute("autoreconf", "-vfi", file("gc/configure.ac"):dirname)
		execute('CC={CC} CXX={CC}', file("gc/configure"), Configuration)
		execute("make clean")
		execute("make -j4")
		execute('make -j4 PREFIX={PATH} install')
	end
	GC := Lib
	PREBUILDS := old + [Lib]
	let Lib2 := file("lib/libgccpp.a")[Lib]
	Libraries:put(Lib, Lib2)
	:>LDFLAGS := old + ['-L{PATH / "lib"}', '-pthread']
end

MINILANG_TABLES := old or defined("TABLES")
MINILANG_MATH := MINILANG_TABLES or old or defined("MATH")
MINILANG_AST := old or defined("AST")
MINILANG_COMPLEX := old or defined("COMPLEX")
MINILANG_CBOR := old or defined("CBOR")
MINILANG_JSON := old or defined("JSON")
MINILANG_XML := old or defined("XML")
MINILANG_XE := old or defined("XE")
MINILANG_LIBRARY := old or defined("LIBRARY")
MINILANG_MODULES := MINILANG_LIBRARY or old or defined("MODULES")
MINILANG_THREADS := old or defined("THREADS")
MINILANG_TRAMPOLINE := old or defined("TRAMPOLINE")
MINILANG_SCHEDULER := MINILANG_MODULES or MINILANG_THREADS or MINILANG_TRAMPOLINE or old or defined("SCHEDULER")
MINILANG_TIMESCHED := old or defined("TIMESCHED")
MINILANG_THREADSAFE := MINILANG_THREADS or old or defined("THREADSAFE")
MINILANG_JIT := old or defined("JIT")
MINILANG_TRE := old or defined("TRE")
MINILANG_GENERICS := old or defined("GENERICS")
MINILANG_MUTABLES := old or defined("MUTABLES")
MINILANG_PQUEUES := old or defined("PQUEUES")
MINILANG_TIMEZONES := old or defined("TIMEZONES")
MINILANG_UUID := old or defined("UUID")
MINILANG_ICU := old or defined("ICU")
MINILANG_LIBS := old or defined("LIBS")
MINILANG_UNWIND := old or defined("UNWIND")
MINILANG_BACKTRACE := old or defined("BACKTRACE")
MINILANG_MINIJS := old or defined("MINIJS")
MINILANG_COROUTINES := old or defined("COROUTINES")
MINILANG_ENCODINGS := old or defined("ENCODINGS")
MINILANG_STRUCTS := old or defined("STRUCTS")
MINILANG_MMAP := old or defined("MMAP")
MINILANG_STRINGCACHE := old or defined("STRINGCACHE")
MINILANG_FLINT := old or defined("FLINT")
MINILANG_NANBOXING := old or defined("NANBOXING")
MINILANG_CONTEXT_SECTION := old or defined("CONTEXTSECTION")

file("ml_config.h") => fun(Target) do
	let File := Target:open("w")
	File:write("#ifndef ML_CONFIG_H\n")
	File:write("#define ML_CONFIG_H\n")
	if MINILANG_MODULES then
		File:write("\n#define ML_MODULES\n")
	end
	if MINILANG_SCHEDULER then
		File:write("\n#define ML_SCHEDULER\n")
	end
	if MINILANG_TRAMPOLINE then
		File:write("\n#define ML_TRAMPOLINE\n")
	end
	if MINILANG_TIMESCHED then
		File:write("\n#define ML_TIMESCHED\n")
	end
	if MINILANG_NANBOXING then
		File:write("\n#define ML_NANBOXING\n")
	end
	if MINILANG_FLINT then
		File:write("\n#define ML_FLINT\n")
	end
	if MINILANG_COMPLEX then
		File:write("\n#define ML_COMPLEX\n")
	end
	if MINILANG_GENERICS then
		File:write("\n#define ML_GENERICS\n")
	end
	if MINILANG_MUTABLES then
		File:write("\n#define ML_MUTABLES\n")
	end
	if MINILANG_THREADSAFE then
		File:write("\n#define ML_THREADSAFE\n")
	end
	if MINILANG_THREADS then
		File:write("\n#define ML_THREADS\n")
	end
	if MINILANG_UNWIND then
		File:write("\n#define ML_UNWIND\n")
	end
	if MINILANG_BACKTRACE then
		File:write("\n#define ML_BACKTRACE\n")
	end
	if MINILANG_CONTEXT_SECTION then
		File:write("\n#define ML_CONTEXT_SECTION\n")
	end
	File:write("\n#endif")
	File:close
end

if defined("ASSERTS") then
	CFLAGS := old + ["-DML_ASSERTS"]
end

if MINILANG_TABLES then
	Objects:put(file("ml_table2.o"))
	CFLAGS := old + ["-DML_TABLES"]
	InstallHeaders:put("ml_table.h")
end

if MINILANG_MATH then
	file("array"):mkdir
	Objects:put(
		file("array/compare_cmp.o"),
		file("array/compare_eq.o"),
		file("array/compare_ge.o"),
		file("array/compare_gt.o"),
		file("array/compare_le.o"),
		file("array/compare_lt.o"),
		file("array/compare_ne.o"),
		file("array/update_add.o"),
		file("array/update_and.o"),
		file("array/update_div.o"),
		file("array/update_max.o"),
		file("array/update_min.o"),
		file("array/update_mul.o"),
		file("array/update_or.o"),
		file("array/update_set.o"),
		file("array/update_sub.o"),
		file("array/update_xor.o"),
		file("ml_array.o"),
		file("ml_math.o"),
		file("ml_polynomial.o")
	)
	CFLAGS := old + ["-DML_MATH"]
	InstallHeaders:put("ml_array.h")
	InstallHeaders:put("ml_math.h")
	InstallHeaders:put("ml_polynomial.h")
end

if MINILANG_AST then
	Objects:put(file("ml_ast.o"))
	CFLAGS := old + ["-DML_AST"]
	InstallHeaders:put("ml_ast.h")
end

if MINILANG_LIGHTNING or defined("LIGHTNING") then
	let Dir := file("lightning")
	let Lib := file("lightning/lib/.libs/liblightning.a") => fun(Lib) do
		Dir:rmdir:mkdir:chdir
		execute("wget https://ftp.gnu.org/gnu/lightning/lightning-2.1.4.tar.gz -O- | tar xvzP --strip-components=1")
		execute('CC={CC} ./configure', {
			"--prefix" is PATH,
			"--enable-static",
			"--disable-shared"
		})
		execute("make clean")
		execute("make -j4")
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{Dir / "includes"}', "-DML_LIGHTNING"]
	LDFLAGS := old + [Lib]
end

if MINILANG_CBOR then
	CFLAGS := old + ["-DML_CBOR"]
	Objects:put(file("ml_cbor2.o"))
	InstallHeaders:put("ml_cbor.h")
end

if MINILANG_JSON then
	CFLAGS := old + ['-DML_JSON']
	Objects:put(file("ml_json.o"))
	InstallHeaders:put("ml_json.h")
end

if MINILANG_XML then
	CFLAGS := old + ['-DML_XML']
	LDFLAGS := old + ["-lexpat"]
	Objects:put(file("ml_xml.o"))
	InstallHeaders:put("ml_xml.h")
end

if MINILANG_XE then
	CFLAGS := old + ['-DML_XE']
	Objects:put(file("ml_xe.o"))
	InstallHeaders:put("ml_xe.h")
end

if MINILANG_MMAP then
	CFLAGS := old + ['-DML_MMAP']
	Objects:put(file("ml_mmap.o"))
	InstallHeaders:put("ml_mmap.h")
end

if MINILANG_STRUCTS then
	CFLAGS := old + ["-DML_STRUCT"]
	Objects:put(file("ml_struct.o"))
end

if MINILANG_UNWIND then
	LDFLAGS := old + ["-lunwind"]
end

if MINILANG_BACKTRACE then
	file("libbacktrace"):mkdir
	let Lib := file("lib/libbacktrace.a") => fun() do
		file("libbacktrace"):chdir
		execute(file("libbacktrace/configure"), '--prefix={PATH}')
		execute("make clean")
		execute("make -j4")
		execute('make -j4 PREFIX={PATH} install')
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ['-I{file("libbacktrace")}']
	LDFLAGS := old + [Lib]
end

if MINILANG_LIBRARY then
	CFLAGS := old + ['-DML_LIBRARY']
	Objects:put(file("ml_library.o"))
	if PLATFORM != "Wasm" then
		Objects:put(file("whereami.o"))
	end
	InstallHeaders:put("ml_library.h")
end

if MINILANG_MODULES then
	LDFLAGS := old + ["-ldl"]
	Objects:put(file("ml_module.o"))
	InstallHeaders:put("ml_module.h")
end

if MINILANG_THREADS then
	LDFLAGS := old + ["-pthread"]
	Objects:put(file("ml_thread.o"))
	InstallHeaders:put("ml_thread.h")
end

if MINILANG_COROUTINES then
	Objects:put(file("ml_coroutine.o"), file("coro.o"))
	InstallHeaders:put("ml_coroutine.h")
end

if MINILANG_JIT then
	let Source := file("ml_bytecode_x64.dasc")
	file("ml_bytecode_x64.c")[Source] => fun(Target) do
		execute("lua5.2", file("dynasm/dynasm.lua"), "-o", Target, Source)
	end
	Objects:put(file("ml_bytecode_x64.o"))
	CFLAGS := old + ["-DML_JIT", "-I", Source:dirname]
	LDFLAGS := old + ["-lZydis"]
end

if PLATFORM = "Linux" and MACHINE = "x86_64" and CC != "clang" then
	Objects:put(file("inthash_x64.o"))
	CFLAGS := old + ["-DASM_INTHASH_SEARCH"]
end

if MINILANG_TRE then
	file("tre"):mkdir
	let Lib := file("lib/libtre.a")[GC] => fun(Lib) do
		file("tre"):chdir
		let Options := {
			"--prefix" is PATH,
			"--enable-static",
			"--enable-multibyte",
			"--enable-wchar",
			"--disable-shared"
		}
		if PLATFORM = "Android" then
			Options["--build"] := '{MACHINE}-unknown-linux-gnu'
		end

		execute("autoreconf", "-vfi", file("tre/configure.ac"):dirname)
		execute('CC={CC} CFLAGS=\"{EXT_CFLAGS}\"', file("tre/configure"), Options)
		:>execute("sed -i s/HAVE_WCTYPE/HAVE_WCTYPE_OFF/g config.h")
		execute("make clean")
		execute("make -j4 -C lib")
		execute('make -j4 -C lib PREFIX={PATH} install')
		execute('make -j4 -C local_includes PREFIX={PATH} install')
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ["-DML_TRE"]
	Libraries:put(Lib)
end

if MINILANG_PQUEUES then
	Objects:put(file("ml_pqueue.o"))
	CFLAGS := old + ["-DML_PQUEUES"]
	InstallHeaders:put("ml_pqueue.h")
end
if MINILANG_TIMEZONES then
	let Header := file("timelib_mem.h")
	let TimelibObjects := [
		file("timelib/parse_iso_intervals.o"),
		file("timelib/parse_date.o"),
		file("timelib/unixtime2tm.o"),
		file("timelib/tm2unixtime.o"),
		file("timelib/dow.o"),
		file("timelib/parse_tz.o"),
		file("timelib/parse_zoneinfo.o"),
		file("timelib/timelib.o"),
		file("timelib/astro.o"),
		file("timelib/interval.o"),
		file("timelib/parse_posix.o")
	]
	file("timelib"):mkdir
	let Lib := scope("timelib";) do
		REFLAGS := ["-I", file("timelib/timelib.h"):dirname]
		file("timelib/parse_date.c")[file("timelib/timezonemap.h"), file("timelib/parse_date.re")] => fun() do
			execute('re2c {REFLAGS} -d -b {file("timelib/parse_date.re")} > {file("timelib/parse_date.c")}')
		end
		file("timelib/parse_iso_intervals.c")[file("timelib/parse_iso_intervals.re")] => fun() do
			execute('re2c {REFLAGS} -d -b {file("timelib/parse_iso_intervals.re")} > {file("timelib/parse_iso_intervals.c")}')
		end

		CFLAGS := EXT_CFLAGS + [
			"-DHAVE_STDINT_H",
			"-DHAVE_GETTIMEOFDAY",
			"-DHAVE_UNISTD_H",
			"-DHAVE_DIRENT_H",
			"-I", file("timelib/timelib.h"):dirname,
			"--include", Header
		]
		c_library(file("timelib.a"), TimelibObjects)[GC, Header]
	end
	PREBUILDS := old + [Lib]
	CFLAGS := old + ["-DML_TIMEZONES"]
	Libraries:put(Lib)
end

if MINILANG_UUID then
	Objects:put(file("ml_uuid.o"))
	CFLAGS := old + ["-DML_UUID"]
	LDFLAGS := old + ["-luuid"]
	InstallHeaders:put("ml_uuid.h")
end

if MINILANG_ICU then
	CFLAGS := old + ["-DML_ICU"]
	LDFLAGS := old + ["-licuuc"]
end

if MINILANG_MINIJS then
	Objects:put(file("ml_minijs.o"))
	CFLAGS := old + ["-DML_MINIJS"]
	LDFLAGS := old + ["-ljansson"]
	InstallHeaders:put("ml_minijs.h")
end

if MINILANG_ENCODINGS then
	Objects:put(file("ml_base16.o"), file("ml_base64.o"))
	CFLAGS := old + ["-DML_ENCODINGS"]
	InstallHeaders:put("ml_base16.h", "ml_base64.h")
end

if MINILANG_STRINGCACHE then
	CFLAGS := old + ["-DML_STRINGCACHE"]
end

if MINILANG_FLINT then
	LDFLAGS := old + ["-lflint"]
end

if PLATFORM = "Linux" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-DUSE_LINENOISE"]
	GC or LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-DUSE_LINENOISE", "-I/usr/local/include"]
	GC or LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-DUSE_LINENOISE"]
	GC or LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
elseif PLATFORM = "Android" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-DUSE_LINENOISE"]
	GC or LDFLAGS := old + ["-lgc"]
end

if PLATFORM = "Wasm" then
	LIBMINILANG := c_library(LIB_DIR / "libminilang.wasm", Objects, Libraries)

	CFLAGS := old + ["-DML_USE_TRAMPOLINE"]
	LDFLAGS := old + ["-sEXPORTED_FUNCTIONS=_ml_session,_ml_session_evaluate", "-sEXPORTED_RUNTIME_METHODS=cwrap,stringToNewUTF8", "-sEXIT_RUNTIME=1", "-sALLOW_MEMORY_GROWTH=1"] :>, "-sBINARYEN_EXTRA_PASSES=\"--spill-pointers\""]
	MINIWASM := c_program(BIN_DIR / "minilang.js", [file("miniwasm.o")], [LIBMINILANG])

	MINIHTML := (BIN_DIR / "minilang.html")[file("minilang.html")] => fun(Target) do
		file("minilang.html"):copy(Target)
	end

	DEFAULT[MINIWASM, MINIHTML]
else
	LIBMINILANG := c_library(LIB_DIR / "libminilang.a", Objects, Libraries)

	PARENT."LIBMINILANG" := LIBMINILANG

	MINILANG := c_program(BIN_DIR / "minilang", [file("minilang.o")], [LIBMINILANG])
	MINIDBG := (BIN_DIR / "minidbg")[file("minidbg")] => fun(Target) do
		file("minidbg"):copy(Target)
		execute("chmod", "+x", Target)
	end
	MINICONSOLE := (BIN_DIR / "miniconsole")[file("miniconsole")] => fun(Target) do
		file("miniconsole"):copy(Target)
		execute("chmod", "+x", Target)
	end
	MININOTEBOOK := (BIN_DIR / "mininotebook")[file("mininotebook")] => fun(Target) do
		file("mininotebook"):copy(Target)
		execute("chmod", "+x", Target)
	end
	MINIPP := c_program(BIN_DIR / "minipp", [file("minipp.o")], [LIBMINILANG])

	if PLATFORM = "Linux" or PLATFORM = "Android" then
		let Exports := file("exports.lst")
		MINILANG[Exports]
		LDFLAGS := old + ["-ldl", '-Wl,--dynamic-list={Exports}']
	end

	DEFAULT[LIBMINILANG, MINILANG, MINIDBG, MINICONSOLE, MININOTEBOOK, MINIPP]

	let InstallBin := PREFIX / "bin"
	let InstallInclude := PREFIX / "include/minilang"
	let InstallLib := PREFIX / "lib"

	install(MINILANG, InstallBin / "minilang", "+x")
	install(MINIDBG, InstallBin / "minidbg", "+x")
	install(MINICONSOLE, InstallBin / "miniconsole", "+x")
	install(MININOTEBOOK, InstallBin / "mininotebook", "+x")

	for Header in InstallHeaders do
		install(file(Header), InstallInclude / Header)
	end

	install(LIBMINILANG, InstallLib / "libminilang.a")

	subdir("test")

	if defined("INSTALL") then
		DEFAULT[INSTALL]
	end
end
